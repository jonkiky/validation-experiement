===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected has only one value
expected.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected has only one value
expected.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fRunTests - orig(result.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
this.val$test != null
this.val$test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
this.val$test.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
size(return[]) == 1
this.fRunTests >= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
test.fName.toString == orig(test.fName.toString)
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164;condition="return == true"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 5
return == true
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.routines.DomainValidatorTest"
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 5
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 5
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
names[].getClass().getName() one of { [], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 0, 5 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT181
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 5 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 5 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 5 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 5 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 5 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.DomainValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
return == false
size(this.fTests[]) one of { 0, 5 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 5 }
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 5
result.fStop == false
size(this.fTests[]) one of { 1, 5 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 5 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 5 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 6 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 5 == 0
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 5 }
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest, org.apache.commons.validator.routines.DomainValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) one of { 1, 5 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 5
runTime == 757
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 5
return has only one value
return.toString == "0.757"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 5
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 757
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 5
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 5
booBoos.getClass().getName() == java.util.Vector$1.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 5
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 5
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 5
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 5
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 5
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 5
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 5
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 5
runTime == 757
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 5
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.validator.routines.DomainValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 5 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 5
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 5
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 5
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 5
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 5
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.daikon.DomainValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.DomainValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.routines.DomainValidator:::CLASS
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName()
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*"
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == "\\p{Alpha}{2,}"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == java.lang.String[].class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString == [arpa, root]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString elements one of { "arpa", "root" }
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] contains no nulls and has only one value, of length 20
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString == [aero, asia, biz, cat, com, coop, info, jobs, mobi, museum, name, net, org, pro, tel, travel, gov, edu, mil, int]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] contains no nulls and has only one value, of length 249
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString == [ac, ad, ae, af, ag, ai, al, am, an, ao, aq, ar, as, at, au, aw, ax, az, ba, bb, bd, be, bf, bg, bh, bi, bj, bm, bn, bo, br, bs, bt, bv, bw, by, bz, ca, cc, cd, cf, cg, ch, ci, ck, cl, cm, cn, co, cr, cu, cv, cx, cy, cz, de, dj, dk, dm, do, dz, ec, ee, eg, er, es, et, eu, fi, fj, fk, fm, fo, fr, ga, gb, gd, ge, gf, gg, gh, gi, gl, gm, gn, gp, gq, gr, gs, gt, gu, gw, gy, hk, hm, hn, hr, ht, hu, id, ie, il, im, in, io, iq, ir, is, it, je, jm, jo, jp, ke, kg, kh, ki, km, kn, kp, kr, kw, ky, kz, la, lb, lc, li, lk, lr, ls, lt, lu, lv, ly, ma, mc, md, me, mg, mh, mk, ml, mm, mn, mo, mp, mq, mr, ms, mt, mu, mv, mw, mx, my, mz, na, nc, ne, nf, ng, ni, nl, no, np, nr, nu, nz, om, pa, pe, pf, pg, ph, pk, pl, pm, pn, pr, ps, pt, pw, py, qa, re, ro, rs, ru, rw, sa, sb, sc, sd, se, sg, sh, si, sj, sk, sl, sm, sn, so, sr, st, su, sv, sy, sz, tc, td, tf, tg, th, tj, tk, tl, tm, tn, to, tp, tr, tt, tv, tw, tz, ua, ug, uk, um, us, uy, uz, va, vc, ve, vg, vi, vn, vu, wf, ws, ye, yt, yu, za, zm, zw]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString == [localhost, localdomain]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString elements one of { "localdomain", "localhost" }
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == java.util.Arrays$ArrayList.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] contains no nulls and has only one value, of length 20
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] contains no nulls and has only one value, of length 249
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == true
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == 2
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == 20
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == 249
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]) == 1
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() (elementwise)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() (elementwise)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() (elementwise)
===========================================================================
org.apache.commons.validator.routines.DomainValidator:::OBJECT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == this.domainRegex.patterns[].getClass().getName()
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.domainRegex.patterns[])
size(this.domainRegex.patterns[]) == size(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements != null
this.domainRegex != null
this.domainRegex.patterns != null
this.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.domainRegex.patterns[] elements != null
this.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.hostnameRegex != null
this.hostnameRegex.patterns != null
this.hostnameRegex.patterns[] elements != null
size(this.domainRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == this.domainRegex.patterns[].getClass().getName() (elementwise)
this.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.DomainValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.DomainValidator(boolean):::EXIT
this.allowLocal == orig(allowLocal)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
str != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT206
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
this.allowLocal == false
orig(this) has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString > str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString > str.toString
str.toString < return.toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT208
return == orig(str)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < str.toString
str.toString == return.toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString)  <==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < str.toString)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString)  <==>  (org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < str.toString)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString)  <==>  (str.toString == return.toString)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString)  ==>  (return == orig(str))
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  <==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString > str.toString)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  <==>  (org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString > str.toString)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  <==>  (str.toString < return.toString)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (orig(this) has only one value)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.allowLocal == false)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.domainRegex has only one value)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.domainRegex.patterns has only one value)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.domainRegex.patterns[] elements has only one value)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.hostnameRegex has only one value)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.hostnameRegex.patterns has only one value)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString > str.toString)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
return != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < return.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < return.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < return.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
str.toString <= return.toString
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance():::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(return.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(return.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT115
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT117
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
return.allowLocal == orig(allowLocal)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(return.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(return.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return.allowLocal == false)  <==>  (return.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == false)  <==>  (return.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns)
(return.allowLocal == true)  <==>  (return.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == true)  <==>  (return.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == return)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return.allowLocal)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == return.domainRegex)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == return.domainRegex.patterns)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == return.hostnameRegex)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == return.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT135
(return == false)  ==>  (domain.toString one of { "apache.rog", "localhost.localdomain" })
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
orig(domain) != null
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT135;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT135;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
domain.toString one of { "apache.rog", "localhost.localdomain" }
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT138
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
domain.toString one of { "hostname", "localhost", "machinename" }
return == true
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT138;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT141
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT141;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
(return == true)  ==>  (orig(domain) != null)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
domain.toString == orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
orig(domain) != null
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
this has only one value
this.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(this.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(ccTld.toString one of { ".org", "localdomain", "rog" })  <==>  (return == false)
(ccTld.toString one of { ".org", "localdomain", "rog" })  ==>  (this.allowLocal == return)
(ccTld.toString one of { ".uk", "ch", "uk" })  <==>  (return == true)
(ccTld.toString one of { ".uk", "ch", "uk" })  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
this.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
ccTld.toString == orig(ccTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
ccTld.toString one of { ".uk", "ch", "uk" }
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
ccTld.toString one of { ".org", "localdomain", "rog" }
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
gTld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != gTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[])
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != gTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
gTld.toString == orig(gTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
iTld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != iTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == true)  ==>  (iTld.toString == ".arpa")
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[])
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
(return == true)  ==>  (orig(iTld) has only one value)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.allowLocal == false)
(return == true)  ==>  (this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
(return == true)  ==>  (this.domainRegex has only one value)
(return == true)  ==>  (this.domainRegex.patterns has only one value)
(return == true)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == true)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == true)  ==>  (this.hostnameRegex has only one value)
(return == true)  ==>  (this.hostnameRegex.patterns has only one value)
(return == true)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == true)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != iTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
iTld.toString == orig(iTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT;condition="return == true"
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
this.allowLocal == false
iTld.toString == ".arpa"
return == true
orig(this) has only one value
orig(iTld) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
this has only one value
this.allowLocal == true
iTld.toString one of { "localdomain", "org" }
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
this.allowLocal == orig(this.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(iTld.toString == "localdomain")  <==>  (return == true)
(iTld.toString == "localdomain")  ==>  (iTld.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString)
(iTld.toString == "localdomain")  ==>  (this.allowLocal == return)
(iTld.toString == "org")  <==>  (return == false)
(iTld.toString == "org")  ==>  (iTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString)
(iTld.toString == "org")  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
this.allowLocal == true
iTld.toString one of { "localdomain", "org" }
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
iTld.toString == orig(iTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT;condition="return == true"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
iTld.toString == "localdomain"
return == true
orig(iTld) has only one value
iTld.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
iTld.toString == "org"
return == false
orig(iTld) has only one value
iTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
tld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != tld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT153
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
tld.toString == "localdomain"
return == true
orig(this) has only one value
orig(tld) has only one value
tld.toString in org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT153;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT155
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
tld.toString one of { "localdomain", "rog" }
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT155;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT156
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT156;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[])
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == false)
(return == false)  ==>  (this.allowLocal == return)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == false)  ==>  (tld.toString one of { "localdomain", "rog" })
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != tld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
tld.toString == orig(tld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
tld.toString one of { "localdomain", "rog" }
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest:::OBJECT
this.validator.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.validator.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.validator.hostnameRegex
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
size(this.validator.domainRegex.patterns[]) == size(this.validator.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*"
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == "\\p{Alpha}{2,}"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$"
this.validator.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == java.lang.String[].class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString == [arpa, root]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString elements one of { "arpa", "root" }
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] contains no nulls and has only one value, of length 20
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString == [aero, asia, biz, cat, com, coop, info, jobs, mobi, museum, name, net, org, pro, tel, travel, gov, edu, mil, int]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] contains no nulls and has only one value, of length 249
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString == [ac, ad, ae, af, ag, ai, al, am, an, ao, aq, ar, as, at, au, aw, ax, az, ba, bb, bd, be, bf, bg, bh, bi, bj, bm, bn, bo, br, bs, bt, bv, bw, by, bz, ca, cc, cd, cf, cg, ch, ci, ck, cl, cm, cn, co, cr, cu, cv, cx, cy, cz, de, dj, dk, dm, do, dz, ec, ee, eg, er, es, et, eu, fi, fj, fk, fm, fo, fr, ga, gb, gd, ge, gf, gg, gh, gi, gl, gm, gn, gp, gq, gr, gs, gt, gu, gw, gy, hk, hm, hn, hr, ht, hu, id, ie, il, im, in, io, iq, ir, is, it, je, jm, jo, jp, ke, kg, kh, ki, km, kn, kp, kr, kw, ky, kz, la, lb, lc, li, lk, lr, ls, lt, lu, lv, ly, ma, mc, md, me, mg, mh, mk, ml, mm, mn, mo, mp, mq, mr, ms, mt, mu, mv, mw, mx, my, mz, na, nc, ne, nf, ng, ni, nl, no, np, nr, nu, nz, om, pa, pe, pf, pg, ph, pk, pl, pm, pn, pr, ps, pt, pw, py, qa, re, ro, rs, ru, rw, sa, sb, sc, sd, se, sg, sh, si, sj, sk, sl, sm, sn, so, sr, st, su, sv, sy, sz, tc, td, tf, tg, th, tj, tk, tl, tm, tn, to, tp, tr, tt, tv, tw, tz, ua, ug, uk, um, us, uy, uz, va, vc, ve, vg, vi, vn, vu, wf, ws, ye, yt, yu, za, zm, zw]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString == [localhost, localdomain]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString elements one of { "localdomain", "localhost" }
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == java.util.Arrays$ArrayList.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] contains no nulls and has only one value, of length 20
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] contains no nulls and has only one value, of length 249
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == true
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex != null
this.validator.domainRegex has only one value
this.validator.domainRegex != null
this.validator.domainRegex.patterns has only one value
this.validator.domainRegex.patterns != null
this.validator.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.validator.domainRegex.patterns[] contains no nulls and has only one value, of length 1
this.validator.domainRegex.patterns[] elements has only one value
this.validator.domainRegex.patterns[] elements != null
this.validator.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.validator.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.validator.hostnameRegex has only one value
this.validator.hostnameRegex != null
this.validator.hostnameRegex.patterns has only one value
this.validator.hostnameRegex.patterns != null
this.validator.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
this.validator.hostnameRegex.patterns[] elements has only one value
this.validator.hostnameRegex.patterns[] elements != null
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == 2
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == 20
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == 249
size(this.validator.domainRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < this.fName.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < this.fName.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < this.fName.toString
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != this.validator.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != this.validator.domainRegex.patterns.getClass().getName()
this.validator.domainRegex.patterns.getClass().getName() == this.validator.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.DomainValidatorTest():::EXIT
this.validator == null
this.fName == null
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.setUp():::ENTER
this.validator == null
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.setUp():::EXIT
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName())
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName())
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
this.fName == orig(this.fName)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName()) (elementwise)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString) (elementwise)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName()) (elementwise)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString) (elementwise)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName()) (elementwise)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString) (elementwise)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString) (elementwise)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]) (elementwise)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]) (elementwise)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testAllowLocal():::ENTER
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
this has only one value
this.fName has only one value
this.fName.toString == "testAllowLocal"
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testAllowLocal():::EXIT
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.validator.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.validator.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
this.validator.domainRegex.patterns == orig(this.validator.domainRegex.patterns)
this.validator.domainRegex.patterns[] == orig(this.validator.domainRegex.patterns[])
this.validator.hostnameRegex.patterns == orig(this.validator.hostnameRegex.patterns)
this.validator.hostnameRegex.patterns[] == orig(this.validator.hostnameRegex.patterns[])
this.fName == orig(this.fName)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
this.fName has only one value
this.fName.toString == "testAllowLocal"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.domainRegex.patterns.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.hostnameRegex.patterns.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testIDN():::ENTER
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
this has only one value
this.fName has only one value
this.fName.toString == "testIDN"
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testIDN():::EXIT
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.validator.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.validator.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
this.validator.domainRegex.patterns == orig(this.validator.domainRegex.patterns)
this.validator.domainRegex.patterns[] == orig(this.validator.domainRegex.patterns[])
this.validator.hostnameRegex.patterns == orig(this.validator.hostnameRegex.patterns)
this.validator.hostnameRegex.patterns[] == orig(this.validator.hostnameRegex.patterns[])
this.fName == orig(this.fName)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
this.fName has only one value
this.fName.toString == "testIDN"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.domainRegex.patterns.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.hostnameRegex.patterns.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testInvalidDomains():::ENTER
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
this has only one value
this.fName has only one value
this.fName.toString == "testInvalidDomains"
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testInvalidDomains():::EXIT
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.validator.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.validator.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
this.validator.domainRegex.patterns == orig(this.validator.domainRegex.patterns)
this.validator.domainRegex.patterns[] == orig(this.validator.domainRegex.patterns[])
this.validator.hostnameRegex.patterns == orig(this.validator.hostnameRegex.patterns)
this.validator.hostnameRegex.patterns[] == orig(this.validator.hostnameRegex.patterns[])
this.fName == orig(this.fName)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
this.fName has only one value
this.fName.toString == "testInvalidDomains"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.domainRegex.patterns.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.hostnameRegex.patterns.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testTopLevelDomains():::ENTER
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
this has only one value
this.fName has only one value
this.fName.toString == "testTopLevelDomains"
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testTopLevelDomains():::EXIT
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.validator.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.validator.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
this.validator.domainRegex.patterns == orig(this.validator.domainRegex.patterns)
this.validator.domainRegex.patterns[] == orig(this.validator.domainRegex.patterns[])
this.validator.hostnameRegex.patterns == orig(this.validator.hostnameRegex.patterns)
this.validator.hostnameRegex.patterns[] == orig(this.validator.hostnameRegex.patterns[])
this.fName == orig(this.fName)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
this.fName has only one value
this.fName.toString == "testTopLevelDomains"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.domainRegex.patterns.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.hostnameRegex.patterns.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testValidDomains():::ENTER
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
this has only one value
this.fName has only one value
this.fName.toString == "testValidDomains"
===========================================================================
org.apache.commons.validator.routines.DomainValidatorTest.testValidDomains():::EXIT
this.validator == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this.validator)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(this.validator.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.validator.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.validator.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
this.validator.domainRegex.patterns == orig(this.validator.domainRegex.patterns)
this.validator.domainRegex.patterns[] == orig(this.validator.domainRegex.patterns[])
this.validator.hostnameRegex.patterns == orig(this.validator.hostnameRegex.patterns)
this.validator.hostnameRegex.patterns[] == orig(this.validator.hostnameRegex.patterns[])
this.fName == orig(this.fName)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.validator.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.validator.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
this.fName has only one value
this.fName.toString == "testValidDomains"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.domainRegex.patterns.getClass().getName())
this.validator.domainRegex.patterns.getClass().getName() == orig(this.validator.hostnameRegex.patterns.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::OBJECT
this.patterns != null
this.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.patterns[] elements != null
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::ENTER
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$" }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::EXIT
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::ENTER
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$" }
caseSensitive == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::EXIT
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::ENTER
regexs.getClass().getName() == java.lang.String[].class
regexs[].toString elements one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$" }
regexs[].toString one of { [\p{Alnum}(?>[\p{Alnum}-]*\p{Alnum})*], [^(?:\p{Alnum}(?>[\p{Alnum}-]*\p{Alnum})*\.)+(\p{Alpha}{2,})$] }
caseSensitive == true
size(regexs[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::EXIT
regexs[] == orig(regexs[])
size(this.patterns[]) == orig(size(regexs[]))
regexs[].toString elements one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$" }
regexs[].toString one of { [\p{Alnum}(?>[\p{Alnum}-]*\p{Alnum})*], [^(?:\p{Alnum}(?>[\p{Alnum}-]*\p{Alnum})*\.)+(\p{Alpha}{2,})$] }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::ENTER
this has only one value
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT134
value.toString one of { "hostname", "localhost", "machinename" }
return == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT134;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT137
value.toString == " apache.org "
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT137;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
(value.toString == " apache.org ")  <==>  (return == false)
(value.toString == " apache.org ")  ==>  (orig(value) has only one value)
(value.toString one of { "hostname", "localhost", "machinename" })  <==>  (return == true)
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT;condition="return == true"
value.toString one of { "hostname", "localhost", "machinename" }
return == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
value.toString == " apache.org "
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT150
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
return == null
orig(this) has only one value
orig(value) == null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT160
size(return[]) == orig(size(this.patterns[]))
return != null
orig(value) != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT163
return == null
orig(value) != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
size(this.patterns[]) == size(return[])
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(return[]) == 1
this.patterns.getClass().getName() != return.getClass().getName()
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
