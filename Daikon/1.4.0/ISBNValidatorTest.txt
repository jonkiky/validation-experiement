===========================================================================
junit.framework.Assert:::OBJECT
this has only one value
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
junit.framework.Assert.assertFalse(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message == null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object has only one value
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message == null
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
===========================================================================
junit.framework.TestCase:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
this.fName.toString == "testIsValid"
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name has only one value
name.toString == "testIsValid"
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
name.toString == "testIsValid"
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
this has only one value
this.val$test has only one value
this.val$test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
this.val$test.fName has only one value
this.val$test.fName.toString == "testIsValid"
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
$hidden$1.fName has only one value
$hidden$1.fName.toString == "testIsValid"
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
$hidden$1.fName has only one value
$hidden$1.fName.toString == "testIsValid"
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests one of { 0, 1 }
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests <= size(this.fListeners[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == size(return[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fRunTests == 1
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return[] elements == return[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[this.fRunTests-1] == this.fListeners[return]
this.fListeners[return] == this.fListeners[orig(this.fRunTests)-1]
this.fListeners[return] == orig(this.fListeners[post(this.fRunTests)-1])
this.fListeners[return] == orig(this.fListeners[this.fRunTests-1])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return has only one value
return.getClass().getName() == java.util.Vector$1.class
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[this.fRunTests-1] == this.fListeners[return]
this.fListeners[return] == this.fListeners[orig(this.fRunTests)-1]
this.fListeners[return] == orig(this.fListeners[post(this.fRunTests)-1])
this.fListeners[return] == orig(this.fListeners[this.fRunTests-1])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return has only one value
return.getClass().getName() == java.util.Vector$1.class
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test has only one value
test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
test.fName has only one value
test.fName.toString == "testIsValid"
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
orig(this.fRunTests) == size(this.fFailures[])
orig(this.fRunTests) == size(this.fErrors[])
orig(this.fRunTests) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test.fName has only one value
test.fName.toString == "testIsValid"
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
test.fName.toString == orig(test.fName.toString)
===========================================================================
junit.framework.TestResult.runCount():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
return == size(this.fListeners[])
return == orig(size(this.fListeners[]))
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 1
this.fListeners[] elements == this.fListeners[return-1]
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
p has only one value
p.getClass().getName() == junit.framework.TestResult$1.class
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))-1
this.fStop == return
return == orig(this.fStop)
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test has only one value
test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(this.fRunTests) == size(this.fFailures[])
orig(this.fRunTests) == size(this.fErrors[])
orig(this.fRunTests) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164;condition="return == true"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return == true
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.ISBNValidatorTest"
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[] == []
this.fTests[].getClass().getName() == []
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
orig(test) in this.fTests[]
this.fTests[] elements == orig(test)
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.ISBNValidatorTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements has only one value
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names[].getClass().getName() one of { [], [java.lang.String] }
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
orig(this.fTests[]) == orig(names[])
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
orig(m) has only one value
orig(names[]) == []
orig(names[].getClass().getName()) == []
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] contains no nulls and has only one value, of length 1
names[] elements has only one value
names[] elements != null
names[].getClass().getName() == [java.lang.String]
names[].getClass().getName() elements == java.lang.String.class
size(this.fTests[]) == 1
orig(size(names[])) one of { 0, 1 }
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
theClass has only one value
name has only one value
name.toString == "testIsValid"
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
name.toString == "testIsValid"
return has only one value
return.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.ISBNValidatorTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest]
return == false
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(this.fTests[] == [])  <==>  (return == true)
(this.fTests[] == [])  <==>  (this.fTests[].getClass().getName() == [])
(this.fTests[] == [])  ==>  (orig(m) has only one value)
(this.fTests[] contains no nulls and has only one value, of length 1)  <==>  (return == false)
(this.fTests[] contains no nulls and has only one value, of length 1)  <==>  (size(this.fTests[]) == 1)
(this.fTests[] contains no nulls and has only one value, of length 1)  <==>  (this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest])
(this.fTests[] contains no nulls and has only one value, of length 1)  ==>  (this.fTests[] elements has only one value)
(this.fTests[] contains no nulls and has only one value, of length 1)  ==>  (this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class)
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.ISBNValidatorTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest]
return == false
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.ISBNValidatorTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest]
return == false
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(this.fTests[] == [])  <==>  (return == true)
(this.fTests[] == [])  <==>  (this.fTests[].getClass().getName() == [])
(this.fTests[] == [])  ==>  (orig(m) has only one value)
(this.fTests[] contains no nulls and has only one value, of length 1)  <==>  (return == false)
(this.fTests[] contains no nulls and has only one value, of length 1)  <==>  (size(this.fTests[]) == 1)
(this.fTests[] contains no nulls and has only one value, of length 1)  <==>  (this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest])
(this.fTests[] contains no nulls and has only one value, of length 1)  ==>  (this.fTests[] elements has only one value)
(this.fTests[] contains no nulls and has only one value, of length 1)  ==>  (this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class)
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.ISBNValidatorTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.ISBNValidatorTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[].getClass().getName() == [org.apache.commons.validator.ISBNValidatorTest]
return == false
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(this.fTests[])-1
size(this.fTests[]) == size(result.fListeners[])
size(this.fTests[])-1 == size(result.fFailures[])
size(this.fTests[])-1 == size(result.fErrors[])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) == 1
this.fTests[] elements == this.fTests[result.fRunTests]
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(this.fTests[]))
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(this.fTests[])-1
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
orig(result.fRunTests) == orig(size(result.fFailures[]))
orig(result.fRunTests) == orig(size(result.fErrors[]))
orig(result.fRunTests) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
result.fListeners[result.fRunTests-1] == result.fListeners[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == orig(result.fListeners[result.fRunTests])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
this.fTests[] elements == this.fTests[result.fRunTests-1]
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
result.fRunTests == size(this.fTests[])-1
size(this.fTests[]) == size(result.fListeners[])
size(this.fTests[])-1 == size(result.fFailures[])
size(this.fTests[])-1 == size(result.fErrors[])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) == 1
test in this.fTests[]
this.fTests[] elements == test
this.fTests[] elements == this.fTests[result.fRunTests]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(this.fTests[]))
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(test) == this.fTests[result.fRunTests-1]
orig(result.fRunTests) == size(this.fTests[])-1
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
orig(result.fRunTests) == orig(size(result.fFailures[]))
orig(result.fRunTests) == orig(size(result.fErrors[]))
orig(result.fRunTests) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
result.fListeners[result.fRunTests-1] == result.fListeners[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == orig(result.fListeners[result.fRunTests])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
orig(test) in this.fTests[]
this.fTests[] elements == orig(test)
this.fTests[] elements == this.fTests[result.fRunTests-1]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn one of { 0, 1 }
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 1
runTime == 531
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
return has only one value
return.toString == "0.531"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
this.fColumn == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fListeners[])
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 531
result.fListeners[] elements == this
this in result.fListeners[]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 1
booBoos.getClass().getName() == java.util.Vector$1.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fListeners[])
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fListeners[] elements == this
this in result.fListeners[]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fListeners[])
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fListeners[] elements == this
this in result.fListeners[]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fListeners[])
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fListeners[] elements == this
this in result.fListeners[]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 1
runTime == 531
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
this.fColumn == 0
test has only one value
test.getClass().getName() == org.apache.commons.validator.ISBNValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == 1
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 1 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn <= junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn < junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.ISBNValidator:::OBJECT
this has only one value
===========================================================================
org.apache.commons.validator.ISBNValidator.ISBNValidator():::EXIT
===========================================================================
org.apache.commons.validator.ISBNValidator.isValid(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.ISBNValidator.isValid(java.lang.String):::EXIT
isbn.toString == orig(isbn.toString)
===========================================================================
org.apache.commons.validator.ISBNValidator.isValid(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.ISBNValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.ISBNValidatorTest:::CLASS
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_RAW has only one value
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_RAW.toString == "1930110995"
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_DASHES has only one value
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_DASHES.toString == "1-930110-99-5"
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_SPACES has only one value
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_SPACES.toString == "1 930110 99 5"
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_X has only one value
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_X.toString == "0-201-63385-X"
org.apache.commons.validator.ISBNValidatorTest.INVALID_ISBN has only one value
org.apache.commons.validator.ISBNValidatorTest.INVALID_ISBN.toString == "068-556-98-45"
===========================================================================
org.apache.commons.validator.ISBNValidatorTest:::OBJECT
this has only one value
this.fName has only one value
this.fName.toString == "testIsValid"
===========================================================================
org.apache.commons.validator.ISBNValidatorTest.ISBNValidatorTest(java.lang.String):::ENTER
name has only one value
name.toString == "testIsValid"
===========================================================================
org.apache.commons.validator.ISBNValidatorTest.ISBNValidatorTest(java.lang.String):::EXIT
this.fName == orig(name)
name.toString == "testIsValid"
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.validator.ISBNValidatorTest.testIsValid():::ENTER
===========================================================================
org.apache.commons.validator.ISBNValidatorTest.testIsValid():::EXIT
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_RAW == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_RAW)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_DASHES == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_DASHES)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_SPACES == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_SPACES)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_X == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_X)
org.apache.commons.validator.ISBNValidatorTest.INVALID_ISBN == orig(org.apache.commons.validator.ISBNValidatorTest.INVALID_ISBN)
this.fName == orig(this.fName)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_RAW.toString == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_RAW.toString)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_DASHES.toString == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_DASHES.toString)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_SPACES.toString == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_SPACES.toString)
org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_X.toString == orig(org.apache.commons.validator.ISBNValidatorTest.VALID_ISBN_X.toString)
org.apache.commons.validator.ISBNValidatorTest.INVALID_ISBN.toString == orig(org.apache.commons.validator.ISBNValidatorTest.INVALID_ISBN.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.daikon.ISBNValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.ISBNValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.routines.CodeValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.CodeValidator:::OBJECT
this.minLength == this.maxLength
this.regexValidator != null
this.regexValidator.patterns != null
this.regexValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.regexValidator.patterns[] elements != null
this.regexValidator.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.regexValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.minLength one of { 10, 13 }
this.checkdigit != null
size(this.regexValidator.patterns[]) == 1
org.apache.commons.validator.routines.CodeValidator.serialVersionUID > this.minLength
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < this.minLength
this.regexValidator.patterns.getClass().getName() != this.checkdigit.getClass().getName()
this.minLength > size(this.regexValidator.patterns[])
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::ENTER
minLength == maxLength
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
minLength one of { 10, 13 }
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::EXIT
this.minLength == orig(minLength)
this.minLength == orig(maxLength)
this.checkdigit == orig(checkdigit)
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
this.checkdigit.getClass().getName() == orig(checkdigit.getClass().getName())
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::ENTER
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
length one of { 10, 13 }
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::EXIT
this.minLength == orig(length)
this.checkdigit == orig(checkdigit)
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
this.checkdigit.getClass().getName() == orig(checkdigit.getClass().getName())
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::ENTER
this has only one value
this.regexValidator has only one value
this.regexValidator.patterns has only one value
this.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.regexValidator.patterns[] elements has only one value
this.minLength == 10
this.checkdigit has only one value
this.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT205
return == true
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT205;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT206
return == false
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT206;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT
this.regexValidator == orig(this.regexValidator)
this.regexValidator.patterns == orig(this.regexValidator.patterns)
this.regexValidator.patterns[] == orig(this.regexValidator.patterns[])
this.minLength == orig(this.minLength)
this.minLength == orig(this.maxLength)
this.checkdigit == orig(this.checkdigit)
this.regexValidator has only one value
this.regexValidator.patterns has only one value
this.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.regexValidator.patterns[] elements has only one value
this.minLength == 10
this.checkdigit has only one value
this.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
this.regexValidator.patterns.getClass().getName() == orig(this.regexValidator.patterns.getClass().getName())
this.checkdigit.getClass().getName() == orig(this.checkdigit.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::ENTER
this has only one value
this.regexValidator has only one value
this.regexValidator.patterns has only one value
this.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.regexValidator.patterns[] elements has only one value
this.minLength == 10
this.checkdigit has only one value
this.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT219
return == orig(input)
return == null
orig(input) == null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT224
input.toString == ""
return == null
orig(input) has only one value
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT231
return == null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT246
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT
this.regexValidator == orig(this.regexValidator)
this.regexValidator.patterns == orig(this.regexValidator.patterns)
this.regexValidator.patterns[] == orig(this.regexValidator.patterns[])
this.minLength == orig(this.minLength)
this.minLength == orig(this.maxLength)
this.checkdigit == orig(this.checkdigit)
this.regexValidator has only one value
this.regexValidator.patterns has only one value
this.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.regexValidator.patterns[] elements has only one value
this.minLength == 10
this.checkdigit has only one value
this.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
return.getClass().getName() == java.lang.String.class
this.regexValidator.patterns.getClass().getName() == orig(this.regexValidator.patterns.getClass().getName())
this.checkdigit.getClass().getName() == orig(this.checkdigit.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator:::CLASS
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.SEP has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP != null
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == "(?:\\-|\\s)"
org.apache.commons.validator.routines.ISBNValidator.GROUP has only one value
org.apache.commons.validator.routines.ISBNValidator.GROUP != null
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == "(\\d{1,5})"
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER has only one value
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER != null
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == "(\\d{1,7})"
org.apache.commons.validator.routines.ISBNValidator.TITLE has only one value
org.apache.commons.validator.routines.ISBNValidator.TITLE != null
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == "(\\d{1,6})"
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX != null
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$"
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX != null
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == true
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == false
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == 10
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == 13
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength == 10
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength == 10
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength == 13
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength == 13
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.GROUP.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.TITLE.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.TITLE.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString > org.apache.commons.validator.routines.ISBNValidator.TITLE.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.ISBNValidator:::OBJECT
this == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == this.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == this.isbn13Validator.checkdigit
this.isbn10Validator.minLength == this.isbn10Validator.maxLength
this.isbn13Validator.minLength == this.isbn13Validator.maxLength
size(this.isbn10Validator.regexValidator.patterns[]) == size(this.isbn13Validator.regexValidator.patterns[])
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator != null
this.isbn10Validator != null
this.isbn10Validator.regexValidator != null
this.isbn10Validator.regexValidator.patterns != null
this.isbn10Validator.regexValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.isbn10Validator.regexValidator.patterns[] elements != null
this.isbn10Validator.regexValidator.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.isbn10Validator.regexValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.isbn10Validator.minLength == 10
this.isbn10Validator.checkdigit has only one value
this.isbn10Validator.checkdigit != null
this.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
this.isbn13Validator != null
this.isbn13Validator.regexValidator != null
this.isbn13Validator.regexValidator.patterns != null
this.isbn13Validator.regexValidator.patterns[] elements != null
this.isbn13Validator.minLength == 13
this.isbn13Validator.checkdigit has only one value
this.isbn13Validator.checkdigit != null
this.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
size(this.isbn10Validator.regexValidator.patterns[]) == 1
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != this.isbn10Validator.regexValidator.patterns.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == this.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != this.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() != this.isbn10Validator.regexValidator.patterns.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() != this.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == this.isbn13Validator.checkdigit.getClass().getName()
this.isbn10Validator.regexValidator.patterns.getClass().getName() != this.isbn10Validator.checkdigit.getClass().getName()
this.isbn10Validator.regexValidator.patterns.getClass().getName() == this.isbn13Validator.regexValidator.patterns.getClass().getName()
this.isbn10Validator.regexValidator.patterns.getClass().getName() != this.isbn13Validator.checkdigit.getClass().getName()
this.isbn10Validator.checkdigit.getClass().getName() != this.isbn13Validator.checkdigit.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.ISBNValidator():::EXIT
this.isbn10Validator has only one value
this.isbn10Validator.regexValidator has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator has only one value
this.isbn13Validator.regexValidator has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
this.convert == true
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.ISBNValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.ISBNValidator(boolean):::EXIT
this.convert == orig(convert)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.getInstance():::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == return
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == return.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == return.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == return.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == return.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == return.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == return.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == return.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == return.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == return.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == return.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == return.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == return.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::ENTER
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
this has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(this.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(this.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(this.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return)
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return
this.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
return == orig(this.convert)
return == true
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
return == false
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::OBJECT
this.patterns != null
this.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.patterns[] elements != null
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::ENTER
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::EXIT
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::ENTER
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
caseSensitive == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::EXIT
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::ENTER
regexs.getClass().getName() == java.lang.String[].class
regexs[].toString elements one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regexs[].toString one of { [^(978|979)(?:(\d{10})|(?:(?:\-|\s)(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9])))$], [^(?:(\d{9}[0-9X])|(?:(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9X])))$] }
caseSensitive == true
size(regexs[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::EXIT
regexs[] == orig(regexs[])
size(this.patterns[]) == orig(size(regexs[]))
regexs[].toString elements one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regexs[].toString one of { [^(978|979)(?:(\d{10})|(?:(?:\-|\s)(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9])))$], [^(?:(\d{9}[0-9X])|(?:(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9X])))$] }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::ENTER
this has only one value
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
value != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::EXIT193
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::EXIT196
return == null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 1
this.patterns[] elements has only one value
return.toString one of { "020163385X", "1930110995" }
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit:::CLASS
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit:::OBJECT
this has only one value
this.modulus == 10
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13CheckDigit():::EXIT
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit:::CLASS
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT has only one value
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT != null
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit:::OBJECT
this has only one value
this.modulus == 11
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10CheckDigit():::EXIT
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::ENTER
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > character
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > rightPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > character
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus < character
this.modulus > leftPos
this.modulus > rightPos
character > leftPos
character > rightPos
leftPos != rightPos
leftPos + rightPos - 11 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::EXIT90
return == orig(leftPos)
return == 10
orig(character) == 88
orig(rightPos) == 1
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::EXIT92
return - orig(character) + 48 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::EXIT
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT)
this.modulus == orig(this.modulus)
(return == 10)  <==>  (orig(character) == 88)
(return == 10)  ==>  (orig(leftPos) == 10)
(return == 10)  ==>  (orig(rightPos) == 1)
(return == 10)  ==>  (return == orig(leftPos))
return >= 0
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > return
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName() == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName())
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus > return
this.modulus < orig(character)
this.modulus > orig(leftPos)
this.modulus > orig(rightPos)
return < orig(character)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.weightedValue(int, int, int):::ENTER
charValue >= 0
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > charValue
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > rightPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > charValue
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus > charValue
this.modulus > leftPos
this.modulus > rightPos
leftPos != rightPos
leftPos + rightPos - 11 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.weightedValue(int, int, int):::EXIT
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT)
this.modulus == orig(this.modulus)
return >= 0
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > return
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName() == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName())
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus != return
this.modulus > orig(charValue)
this.modulus > orig(leftPos)
this.modulus > orig(rightPos)
return >= orig(charValue)
return % orig(rightPos) == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit:::CLASS
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit:::OBJECT
this.modulus one of { 10, 11 }
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > this.modulus
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.ModulusCheckDigit(int):::ENTER
modulus one of { 10, 11 }
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.ModulusCheckDigit(int):::EXIT
this.modulus == orig(modulus)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.calculateModulus(java.lang.String, boolean):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
this.modulus == 11
code.toString one of { "020163385X", "1930110995" }
includesCheckDigit == true
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.calculateModulus(java.lang.String, boolean):::EXIT
this.modulus == orig(this.modulus)
this.modulus == 11
code.toString one of { "020163385X", "1930110995" }
return == 0
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
this.modulus == 11
code.toString one of { "020163385X", "1930110995" }
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT73
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT73;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT
this.modulus == orig(this.modulus)
this.modulus == 11
code.toString one of { "020163385X", "1930110995" }
return == true
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.toInt(char, int, int):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
this.modulus == 11
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > character
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus < character
this.modulus > leftPos
this.modulus > rightPos
character > leftPos
character > rightPos
leftPos != rightPos
leftPos + rightPos - 11 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.toInt(char, int, int):::EXIT
this.modulus == orig(this.modulus)
this.modulus == 11
return >= 0
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus > return
this.modulus < orig(character)
this.modulus > orig(leftPos)
this.modulus > orig(rightPos)
return - orig(character) + 48 == 0
===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message != null
expected != null
actual != null
message.toString > expected.toString
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
message.toString > expected.toString
message.toString == orig(message.toString)
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::ENTER
message != null
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
this.val$test != null
this.val$test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.val$test.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1 != null
$hidden$1.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
$hidden$1.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
$hidden$1.fName != null
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
size(return[]) == 1
this.fRunTests >= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
test.fName != null
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164;condition="return == true"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 12
return == true
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.routines.ISBNValidatorTest"
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 12
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 12
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 12
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest]
names[] contains no nulls and has only one value, of length 12
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 12
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
return != null
return.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
this.fTests[] contains no nulls and has only one value, of length 12
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest]
return == false
size(this.fTests[]) == 12
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  <==>  (size(this.fTests[]) == 12)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 12)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest])
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 12
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest]
return == false
size(this.fTests[]) == 12
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
this.fTests[] contains no nulls and has only one value, of length 12
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest]
return == false
size(this.fTests[]) == 12
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  <==>  (size(this.fTests[]) == 12)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 12)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest])
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.ISBNValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 12
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest]
return == false
size(this.fTests[]) == 12
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 12 }
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 12
result.fStop == false
size(this.fTests[]) one of { 1, 12 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 12 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 12 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 13 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 12 == 0
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 12 }
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest, org.apache.commons.validator.routines.ISBNValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) one of { 1, 12 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 12
runTime == 1535
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 12
return has only one value
return.toString == "1.535"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 12
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 1535
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 12
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 12
booBoos.getClass().getName() == java.util.Vector$1.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 12
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 12
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 12
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 12
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 12
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 12
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 12
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 12
runTime == 1535
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 12
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.validator.routines.ISBNValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 12 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 12
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 12
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 12
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 12
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 12
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.daikon.ISBNValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.ISBNValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.routines.CodeValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.CodeValidator:::OBJECT
this.minLength == this.maxLength
this.regexValidator != null
this.regexValidator.patterns != null
this.regexValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.regexValidator.patterns[] elements != null
this.regexValidator.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.regexValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.minLength one of { 10, 13 }
this.checkdigit != null
size(this.regexValidator.patterns[]) == 1
org.apache.commons.validator.routines.CodeValidator.serialVersionUID > this.minLength
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < this.minLength
this.regexValidator.patterns.getClass().getName() != this.checkdigit.getClass().getName()
this.minLength > size(this.regexValidator.patterns[])
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::ENTER
minLength == maxLength
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
minLength one of { 10, 13 }
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::EXIT
this.minLength == orig(minLength)
this.minLength == orig(maxLength)
this.checkdigit == orig(checkdigit)
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
this.checkdigit.getClass().getName() == orig(checkdigit.getClass().getName())
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::ENTER
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
length one of { 10, 13 }
===========================================================================
org.apache.commons.validator.routines.CodeValidator.CodeValidator(java.lang.String, int, org.apache.commons.validator.routines.checkdigit.CheckDigit):::EXIT
this.minLength == orig(length)
this.checkdigit == orig(checkdigit)
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
this.checkdigit.getClass().getName() == orig(checkdigit.getClass().getName())
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.CodeValidator.getCheckDigit():::ENTER
this has only one value
this.regexValidator has only one value
this.regexValidator.patterns has only one value
this.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.regexValidator.patterns[] elements has only one value
this.minLength == 13
this.checkdigit has only one value
this.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
===========================================================================
org.apache.commons.validator.routines.CodeValidator.getCheckDigit():::EXIT
this.regexValidator == orig(this.regexValidator)
this.regexValidator.patterns == orig(this.regexValidator.patterns)
this.regexValidator.patterns[] == orig(this.regexValidator.patterns[])
this.minLength == orig(this.minLength)
this.minLength == orig(this.maxLength)
this.checkdigit == return
return == orig(this.checkdigit)
this.regexValidator has only one value
this.regexValidator.patterns has only one value
this.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.regexValidator.patterns[] elements has only one value
this.minLength == 13
return has only one value
return.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
this.regexValidator.patterns.getClass().getName() != return.getClass().getName()
this.regexValidator.patterns.getClass().getName() == orig(this.regexValidator.patterns.getClass().getName())
this.checkdigit.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.checkdigit.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT205
return == true
orig(input) != null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT205;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT206
return == false
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT206;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT
this.regexValidator == orig(this.regexValidator)
this.regexValidator.patterns == orig(this.regexValidator.patterns)
this.regexValidator.patterns[] == orig(this.regexValidator.patterns[])
this.minLength == orig(this.minLength)
this.minLength == orig(this.maxLength)
this.checkdigit == orig(this.checkdigit)
(return == true)  ==>  (orig(input) != null)
this.regexValidator.patterns.getClass().getName() == orig(this.regexValidator.patterns.getClass().getName())
this.checkdigit.getClass().getName() == orig(this.checkdigit.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT;condition="return == true"
return == true
orig(input) != null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT219
return == orig(input)
return == null
orig(input) == null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT224
input.toString one of { "", "   " }
return == null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT231
return == null
orig(input) != null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT243
return == null
orig(input) != null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT246
return != null
orig(input) != null
===========================================================================
org.apache.commons.validator.routines.CodeValidator.validate(java.lang.String):::EXIT
this.regexValidator == orig(this.regexValidator)
this.regexValidator.patterns == orig(this.regexValidator.patterns)
this.regexValidator.patterns[] == orig(this.regexValidator.patterns[])
this.minLength == orig(this.minLength)
this.minLength == orig(this.maxLength)
this.checkdigit == orig(this.checkdigit)
return.getClass().getName() == java.lang.String.class
this.regexValidator.patterns.getClass().getName() != return.getClass().getName()
this.regexValidator.patterns.getClass().getName() == orig(this.regexValidator.patterns.getClass().getName())
this.checkdigit.getClass().getName() != return.getClass().getName()
this.checkdigit.getClass().getName() == orig(this.checkdigit.getClass().getName())
input.toString == orig(input.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator:::CLASS
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.SEP has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP != null
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == "(?:\\-|\\s)"
org.apache.commons.validator.routines.ISBNValidator.GROUP has only one value
org.apache.commons.validator.routines.ISBNValidator.GROUP != null
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == "(\\d{1,5})"
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER has only one value
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER != null
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == "(\\d{1,7})"
org.apache.commons.validator.routines.ISBNValidator.TITLE has only one value
org.apache.commons.validator.routines.ISBNValidator.TITLE != null
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == "(\\d{1,6})"
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX != null
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$"
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX != null
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == true
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == false
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == 10
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == 13
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength == 10
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength == 10
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength == 13
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength == 13
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.GROUP.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.TITLE.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.TITLE.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString > org.apache.commons.validator.routines.ISBNValidator.TITLE.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName() != org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.ISBNValidator:::OBJECT
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == this.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == this.isbn13Validator.checkdigit
this.isbn10Validator.minLength == this.isbn10Validator.maxLength
this.isbn13Validator.minLength == this.isbn13Validator.maxLength
size(this.isbn10Validator.regexValidator.patterns[]) == size(this.isbn13Validator.regexValidator.patterns[])
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator != null
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator has only one value
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator != null
this.isbn10Validator != null
this.isbn10Validator.regexValidator != null
this.isbn10Validator.regexValidator.patterns != null
this.isbn10Validator.regexValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.isbn10Validator.regexValidator.patterns[] elements != null
this.isbn10Validator.regexValidator.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.isbn10Validator.regexValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.isbn10Validator.minLength == 10
this.isbn10Validator.checkdigit has only one value
this.isbn10Validator.checkdigit != null
this.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
this.isbn13Validator != null
this.isbn13Validator.regexValidator != null
this.isbn13Validator.regexValidator.patterns != null
this.isbn13Validator.regexValidator.patterns[] elements != null
this.isbn13Validator.minLength == 13
this.isbn13Validator.checkdigit has only one value
this.isbn13Validator.checkdigit != null
this.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
size(this.isbn10Validator.regexValidator.patterns[]) == 1
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != this.isbn10Validator.regexValidator.patterns.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == this.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() != this.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() != this.isbn10Validator.regexValidator.patterns.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() != this.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == this.isbn13Validator.checkdigit.getClass().getName()
this.isbn10Validator.regexValidator.patterns.getClass().getName() != this.isbn10Validator.checkdigit.getClass().getName()
this.isbn10Validator.regexValidator.patterns.getClass().getName() == this.isbn13Validator.regexValidator.patterns.getClass().getName()
this.isbn10Validator.regexValidator.patterns.getClass().getName() != this.isbn13Validator.checkdigit.getClass().getName()
this.isbn10Validator.checkdigit.getClass().getName() != this.isbn13Validator.checkdigit.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.ISBNValidator():::EXIT
this.isbn10Validator has only one value
this.isbn10Validator.regexValidator has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator has only one value
this.isbn13Validator.regexValidator has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
this.convert == true
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.ISBNValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.ISBNValidator(boolean):::EXIT
this.convert == orig(convert)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.convertToISBN13(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
this has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
isbn10.toString one of { "020163385X", "1930110995" }
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.convertToISBN13(java.lang.String):::EXIT238
return == orig(isbn10)
return == null
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.convertToISBN13(java.lang.String):::EXIT251
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.convertToISBN13(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(this.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(this.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(this.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
(return == null)  <==>  (orig(isbn10) == null)
(return == null)  ==>  (return == orig(isbn10))
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
isbn10.toString one of { "020163385X", "1930110995" }
return.toString one of { "9780201633856", "9781930110991" }
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
isbn10.toString == orig(isbn10.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.getInstance():::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == return
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == return.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == return.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == return.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == return.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == return.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == return.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == return.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == return.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == return.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == return.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == return.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == return.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.getInstance(boolean):::ENTER
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == convert
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.getInstance(boolean):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == return
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == return.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == return.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == return.isbn10Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == return.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == return.isbn10Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == return.isbn13Validator.minLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == return.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == return.isbn13Validator.checkdigit
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == return.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == return.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == return.isbn10Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == return.isbn13Validator.checkdigit.getClass().getName()
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
this has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT147
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
return == false
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT147;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT148
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return
this.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
return == orig(this.convert)
return == true
orig(code) != null
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT148;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(this.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(this.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(this.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return)
(return == true)  ==>  (orig(code) != null)
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return
this.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
return == orig(this.convert)
return == true
orig(code) != null
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
return == false
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
this has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(this.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(this.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(this.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString)
(return == true)  ==>  (orig(code) != null)
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return
this.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
return == orig(this.convert)
return == true
orig(code) != null
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN10(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
return == false
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN13(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
this has only one value
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN13(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == this.isbn10Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(this.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == this.isbn13Validator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(this.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == this.convert
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(this.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == this.isbn10Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == this.isbn13Validator.regexValidator
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
(return == false)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString)
(return == true)  ==>  (orig(code) != null)
this.isbn10Validator.regexValidator.patterns has only one value
this.isbn10Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn10Validator.regexValidator.patterns[] elements has only one value
this.isbn13Validator.regexValidator.patterns has only one value
this.isbn13Validator.regexValidator.patterns[] contains no nulls and has only one value, of length 1
this.isbn13Validator.regexValidator.patterns[] elements has only one value
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN13(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == return
this.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
return == orig(this.convert)
return == true
orig(code) != null
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.isValidISBN13(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == return
return == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
return == false
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.validate(java.lang.String):::ENTER
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.validate(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator == orig(this.isbn10Validator)
this.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator == orig(this.isbn13Validator)
this.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
this.convert == orig(this.convert)
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > return.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > return.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString <= return.toString
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.validateISBN10(java.lang.String):::ENTER
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.validateISBN10(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator == orig(this.isbn10Validator)
this.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator == orig(this.isbn13Validator)
this.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
this.convert == orig(this.convert)
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
return.toString one of { "020163385X", "1930110995" }
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > return.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > return.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString <= return.toString
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.validateISBN13(java.lang.String):::ENTER
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
===========================================================================
org.apache.commons.validator.routines.ISBNValidator.validateISBN13(java.lang.String):::EXIT
org.apache.commons.validator.routines.ISBNValidator.SEP == orig(org.apache.commons.validator.routines.ISBNValidator.SEP)
org.apache.commons.validator.routines.ISBNValidator.GROUP == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER)
org.apache.commons.validator.routines.ISBNValidator.TITLE == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.convert)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == this.isbn10Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.minLength == orig(this.isbn10Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit == orig(this.isbn10Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == this.isbn13Validator.maxLength
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.minLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.minLength == orig(this.isbn13Validator.maxLength)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit == orig(this.isbn13Validator.checkdigit)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.regexValidator)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.regexValidator)
this.isbn10Validator == orig(this.isbn10Validator)
this.isbn10Validator.regexValidator == orig(this.isbn10Validator.regexValidator)
this.isbn10Validator.regexValidator.patterns == orig(this.isbn10Validator.regexValidator.patterns)
this.isbn10Validator.regexValidator.patterns[] == orig(this.isbn10Validator.regexValidator.patterns[])
this.isbn13Validator == orig(this.isbn13Validator)
this.isbn13Validator.regexValidator == orig(this.isbn13Validator.regexValidator)
this.isbn13Validator.regexValidator.patterns == orig(this.isbn13Validator.regexValidator.patterns)
this.isbn13Validator.regexValidator.patterns[] == orig(this.isbn13Validator.regexValidator.patterns[])
this.convert == orig(this.convert)
size(this.isbn10Validator.regexValidator.patterns[]) == orig(size(this.isbn13Validator.regexValidator.patterns[]))
return.toString one of { "9780201633856", "9781930110991" }
org.apache.commons.validator.routines.ISBNValidator.SEP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.SEP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.SEP.toString)
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.GROUP.toString == orig(org.apache.commons.validator.routines.ISBNValidator.GROUP.toString)
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString == orig(org.apache.commons.validator.routines.ISBNValidator.PUBLISHER.toString)
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString < return.toString
org.apache.commons.validator.routines.ISBNValidator.TITLE.toString == orig(org.apache.commons.validator.routines.ISBNValidator.TITLE.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString > return.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN10_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString != code.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString > return.toString
org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN13_REGEX.toString)
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn10Validator.checkdigit.getClass().getName() == orig(this.isbn10Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR_NO_CONVERT.isbn13Validator.checkdigit.getClass().getName())
org.apache.commons.validator.routines.ISBNValidator.ISBN_VALIDATOR.isbn13Validator.checkdigit.getClass().getName() == orig(this.isbn13Validator.checkdigit.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn10Validator.regexValidator.patterns.getClass().getName())
this.isbn10Validator.regexValidator.patterns.getClass().getName() == orig(this.isbn13Validator.regexValidator.patterns.getClass().getName())
code.toString <= return.toString
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest:::OBJECT
size(this.invalidISBN10Format[]) == size(this.invalidISBN13Format[])-1
this.validISBN10Format != null
this.validISBN10Format.getClass().getName() == java.lang.String[].class
this.validISBN10Format[] contains no nulls and has only one value, of length 6
this.validISBN10Format[] elements != null
this.validISBN10Format[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.validISBN10Format[].getClass().getName() elements == java.lang.String.class
this.validISBN10Format[].toString == [1234567890, 123456789X, 12345-1234567-123456-X, 12345 1234567 123456 X, 1-2-3-4, 1 2 3 4]
this.invalidISBN10Format != null
this.invalidISBN10Format[] contains no nulls and has only one value, of length 20
this.invalidISBN10Format[] elements != null
this.invalidISBN10Format[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.invalidISBN10Format[].getClass().getName() elements == java.lang.String.class
this.invalidISBN10Format[].toString == [,    , 1, 123456789, 12345678901, 12345678X0, 123456-1234567-123456-X, 12345-12345678-123456-X, 12345-1234567-1234567-X, 12345-1234567-123456-X2, --1 930110 99 5, 1 930110 99 5--, 1 930110-99 5-, 1.2.3.4, 1=2=3=4, 1_2_3_4, 123456789Y, dsasdsadsa, I love sparrows!, 068-556-98-45]
this.validISBN13Format != null
this.validISBN13Format[] contains no nulls and has only one value, of length 10
this.validISBN13Format[] elements != null
this.validISBN13Format[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.validISBN13Format[].getClass().getName() elements == java.lang.String.class
this.validISBN13Format[].toString == [9781234567890, 9791234567890, 978-12345-1234567-123456-1, 979-12345-1234567-123456-1, 978 12345 1234567 123456 1, 979 12345 1234567 123456 1, 978-1-2-3-4, 979-1-2-3-4, 978 1 2 3 4, 979 1 2 3 4]
this.invalidISBN13Format != null
this.invalidISBN13Format[] contains no nulls and has only one value, of length 21
this.invalidISBN13Format[] elements != null
this.invalidISBN13Format[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.invalidISBN13Format[].getClass().getName() elements == java.lang.String.class
this.invalidISBN13Format[].toString == [,    , 1, 978123456789, 97812345678901, 978-123456-1234567-123456-1, 978-12345-12345678-123456-1, 978-12345-1234567-1234567-1, 978-12345-1234567-123456-12, --978 1 930110 99 1, 978 1 930110 99 1--, 978 1 930110-99 1-, 123-4-567890-12-8, 978.1.2.3.4, 978=1=2=3=4, 978_1_2_3_4, 978123456789X, 978-0-201-63385-X, dsasdsadsadsa, I love sparrows!, 979-1-234-567-89-6]
this.fName != null
size(this.validISBN10Format[]) == 6
size(this.validISBN13Format[]) == 10
size(this.invalidISBN13Format[]) == 21
this.validISBN10Format.getClass().getName() == this.invalidISBN10Format.getClass().getName()
this.validISBN10Format.getClass().getName() == this.validISBN13Format.getClass().getName()
this.validISBN10Format.getClass().getName() == this.invalidISBN13Format.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.ISBNValidatorTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.ISBNValidatorTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testConversionErrors():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testConversionErrors"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testConversionErrors():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testConversionErrors"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testInvalid():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testInvalid"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testInvalid():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testInvalid"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testInvalidISBN10Format():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testInvalidISBN10Format"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testInvalidISBN10Format():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testInvalidISBN10Format"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testInvalidISBN13Format():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testInvalidISBN13Format"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testInvalidISBN13Format():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testInvalidISBN13Format"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testIsValidISBN10():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testIsValidISBN10"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testIsValidISBN10():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testIsValidISBN10"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testIsValidISBN13():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testIsValidISBN13"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testIsValidISBN13():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testIsValidISBN13"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testNull():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testNull"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testNull():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testNull"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidISBN10Format():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidISBN10Format"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidISBN10Format():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidISBN10Format"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidISBN13Format():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidISBN13Format"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidISBN13Format():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidISBN13Format"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidateISBN10():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidateISBN10"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidateISBN10():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidateISBN10"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidateISBN10Convert():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidateISBN10Convert"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidateISBN10Convert():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidateISBN10Convert"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidateISBN13():::ENTER
this has only one value
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidateISBN13"
===========================================================================
org.apache.commons.validator.routines.ISBNValidatorTest.testValidateISBN13():::EXIT
this.validISBN10Format == orig(this.validISBN10Format)
this.validISBN10Format[] == orig(this.validISBN10Format[])
this.invalidISBN10Format == orig(this.invalidISBN10Format)
this.invalidISBN10Format[] == orig(this.invalidISBN10Format[])
this.validISBN13Format == orig(this.validISBN13Format)
this.validISBN13Format[] == orig(this.validISBN13Format[])
this.invalidISBN13Format == orig(this.invalidISBN13Format)
this.invalidISBN13Format[] == orig(this.invalidISBN13Format[])
this.fName == orig(this.fName)
size(this.invalidISBN10Format[]) == orig(size(this.invalidISBN13Format[]))-1
this.validISBN10Format has only one value
this.invalidISBN10Format has only one value
this.validISBN13Format has only one value
this.invalidISBN13Format has only one value
this.fName has only one value
this.fName.toString == "testValidateISBN13"
this.validISBN10Format.getClass().getName() == orig(this.validISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN10Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.validISBN13Format.getClass().getName())
this.validISBN10Format.getClass().getName() == orig(this.invalidISBN13Format.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::OBJECT
this.patterns != null
this.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.patterns[] elements != null
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::ENTER
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::EXIT
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::ENTER
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
caseSensitive == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::EXIT
regex.toString one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::ENTER
regexs.getClass().getName() == java.lang.String[].class
regexs[].toString elements one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regexs[].toString one of { [^(978|979)(?:(\d{10})|(?:(?:\-|\s)(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9])))$], [^(?:(\d{9}[0-9X])|(?:(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9X])))$] }
caseSensitive == true
size(regexs[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::EXIT
regexs[] == orig(regexs[])
size(this.patterns[]) == orig(size(regexs[]))
regexs[].toString elements one of { "^(978|979)(?:(\\d{10})|(?:(?:\\-|\\s)(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9])))$", "^(?:(\\d{9}[0-9X])|(?:(\\d{1,5})(?:\\-|\\s)(\\d{1,7})(?:\\-|\\s)(\\d{1,6})(?:\\-|\\s)([0-9X])))$" }
regexs[].toString one of { [^(978|979)(?:(\d{10})|(?:(?:\-|\s)(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9])))$], [^(?:(\d{9}[0-9X])|(?:(\d{1,5})(?:\-|\s)(\d{1,7})(?:\-|\s)(\d{1,6})(?:\-|\s)([0-9X])))$] }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::ENTER
value != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::EXIT193
return != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::EXIT196
return == null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.validate(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString <= return.toString
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.CheckDigitException:::CLASS
===========================================================================
org.apache.commons.validator.routines.checkdigit.CheckDigitException:::OBJECT
this has only one value
===========================================================================
org.apache.commons.validator.routines.checkdigit.CheckDigitException.CheckDigitException(java.lang.String):::ENTER
msg has only one value
msg.toString == "Invalid Character[4] = 'X'"
===========================================================================
org.apache.commons.validator.routines.checkdigit.CheckDigitException.CheckDigitException(java.lang.String):::EXIT
msg.toString == "Invalid Character[4] = 'X'"
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit:::CLASS
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT has only one value
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT != null
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT has only one value
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT != null
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] == [3, 1]
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] elements one of { 1, 3 }
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] sorted by >
size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[]) == 2
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] elements < org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.serialVersionUID
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] elements < org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] elements >= size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])-1
size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])-1 in org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[]
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit:::OBJECT
this has only one value
this.modulus == 10
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] elements < this.modulus
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13CheckDigit():::EXIT
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.weightedValue(int, int, int):::ENTER
charValue >= 0
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.serialVersionUID > charValue
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.serialVersionUID > rightPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > charValue
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus > charValue
charValue != leftPos
leftPos + rightPos - 14 == 0
leftPos >= size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])-1
rightPos >= size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])-1
===========================================================================
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.weightedValue(int, int, int):::EXIT
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT == orig(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT)
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT == orig(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT)
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[] == orig(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])
this.modulus == orig(this.modulus)
return >= 0
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.serialVersionUID > return
org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT.getClass().getName() == orig(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.EAN13_CHECK_DIGIT.getClass().getName())
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus != return
this.modulus > orig(charValue)
return >= orig(charValue)
return != orig(leftPos)
orig(leftPos) >= size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])-1
orig(rightPos) >= size(org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.POSITION_WEIGHT[])-1
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit:::CLASS
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT has only one value
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT != null
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName() == org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.class
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit:::OBJECT
this has only one value
this.modulus == 11
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10CheckDigit():::EXIT
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::ENTER
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > character
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > rightPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > character
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus < character
this.modulus > leftPos
this.modulus > rightPos
character > leftPos
character > rightPos
leftPos != rightPos
leftPos + rightPos - 11 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::EXIT90
return == orig(leftPos)
return == 10
orig(character) == 88
orig(rightPos) == 1
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::EXIT92
return - orig(character) + 48 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.toInt(char, int, int):::EXIT
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT)
this.modulus == orig(this.modulus)
(return == 10)  <==>  (orig(character) == 88)
(return == 10)  ==>  (orig(leftPos) == 10)
(return == 10)  ==>  (orig(leftPos) > orig(rightPos))
(return == 10)  ==>  (orig(rightPos) == 1)
(return == 10)  ==>  (return == orig(leftPos))
(return == 10)  ==>  (return > orig(rightPos))
return >= 0
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > return
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName() == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName())
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus > return
this.modulus < orig(character)
this.modulus > orig(leftPos)
this.modulus > orig(rightPos)
return < orig(character)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.weightedValue(int, int, int):::ENTER
charValue >= 0
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > charValue
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > rightPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > charValue
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus > charValue
this.modulus > leftPos
this.modulus > rightPos
leftPos != rightPos
leftPos + rightPos - 11 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.weightedValue(int, int, int):::EXIT
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT)
this.modulus == orig(this.modulus)
return >= 0
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.serialVersionUID > return
org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName() == orig(org.apache.commons.validator.routines.checkdigit.ISBN10CheckDigit.ISBN10_CHECK_DIGIT.getClass().getName())
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus != return
this.modulus > orig(charValue)
this.modulus > orig(leftPos)
this.modulus > orig(rightPos)
return >= orig(charValue)
return % orig(rightPos) == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit:::CLASS
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit:::OBJECT
this.modulus one of { 10, 11 }
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > this.modulus
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.ModulusCheckDigit(int):::ENTER
modulus one of { 10, 11 }
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.ModulusCheckDigit(int):::EXIT
this.modulus == orig(modulus)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.calculate(java.lang.String):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
this.modulus == 10
code.toString one of { "978020163385", "978193011099" }
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.calculate(java.lang.String):::EXIT
this.modulus == orig(this.modulus)
this.modulus == 10
code.toString one of { "978020163385", "978193011099" }
return.toString one of { "1", "6" }
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.calculateModulus(java.lang.String, boolean):::ENTER
code != null
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.calculateModulus(java.lang.String, boolean):::EXIT
this.modulus == orig(this.modulus)
return >= 0
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus > return
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::ENTER
code != null
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT73
return == true
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT73;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT74
return == false
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT74;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT
this.modulus == orig(this.modulus)
code.toString == orig(code.toString)
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.isValid(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.toCheckDigit(int):::ENTER
this has only one value
this.getClass().getName() == org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit.class
this.modulus == 10
charValue one of { 1, 6 }
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.toCheckDigit(int):::EXIT
this.modulus == orig(this.modulus)
this.modulus == 10
return.toString one of { "1", "6" }
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.toInt(char, int, int):::ENTER
leftPos >= 1
rightPos >= 1
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > character
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > leftPos
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > rightPos
this.modulus < character
character > leftPos
character > rightPos
3 * this.modulus + leftPos + rightPos - 44 == 0
===========================================================================
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.toInt(char, int, int):::EXIT
this.modulus == orig(this.modulus)
return >= 0
org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit.serialVersionUID > return
this.modulus > return
this.modulus < orig(character)
return - orig(character) + 48 == 0
3 * this.modulus + orig(leftPos) + orig(rightPos) - 44 == 0
