===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message != null
expected != null
expected.getClass().getName() == java.lang.Boolean.class
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
this.val$test != null
this.val$test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
this.val$test.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
size(return[]) == 1
this.fRunTests >= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164;condition="return == true"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return == true
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.routines.UrlValidatorTest"
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 9
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 9
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT107
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 5
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest]
names[] contains no nulls and has only one value, of length 5
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
orig(m) has only one value
size(this.fTests[]) == 5
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
size(this.fTests[]) one of { 0, 1, 9 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
return == false
size(this.fTests[]) one of { 0, 1, 9 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 1, 9 })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 1, 9 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
return == false
size(this.fTests[]) one of { 0, 1, 9 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 1, 9 })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.UrlValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 1, 9 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 9
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 10 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 9 == 0
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 9 }
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest, org.apache.commons.validator.routines.UrlValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) one of { 1, 9 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 9
runTime == 367190
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
return has only one value
return.toString == "367.19"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 367190
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 9
booBoos.getClass().getName() == java.util.Vector$1.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 9
runTime == 367190
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.validator.routines.UrlValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 9 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 9
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 9
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.ResultPair:::OBJECT
this.item != null
===========================================================================
org.apache.commons.validator.ResultPair.ResultPair(java.lang.String, boolean):::ENTER
item != null
===========================================================================
org.apache.commons.validator.ResultPair.ResultPair(java.lang.String, boolean):::EXIT
this.item == orig(item)
this.valid == orig(valid)
this.item.toString == item.toString
item.toString == orig(item.toString)
===========================================================================
org.apache.commons.validator.daikon.UrlValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.UrlValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.routines.DomainValidator:::CLASS
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName()
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]) == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*"
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX != null
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == "\\p{Alpha}{2,}"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == java.lang.String[].class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString == [arpa, root]
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[].toString elements one of { "arpa", "root" }
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] contains no nulls and has only one value, of length 20
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString == [aero, asia, biz, cat, com, coop, info, jobs, mobi, museum, name, net, org, pro, tel, travel, gov, edu, mil, int]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] contains no nulls and has only one value, of length 249
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString == [ac, ad, ae, af, ag, ai, al, am, an, ao, aq, ar, as, at, au, aw, ax, az, ba, bb, bd, be, bf, bg, bh, bi, bj, bm, bn, bo, br, bs, bt, bv, bw, by, bz, ca, cc, cd, cf, cg, ch, ci, ck, cl, cm, cn, co, cr, cu, cv, cx, cy, cz, de, dj, dk, dm, do, dz, ec, ee, eg, er, es, et, eu, fi, fj, fk, fm, fo, fr, ga, gb, gd, ge, gf, gg, gh, gi, gl, gm, gn, gp, gq, gr, gs, gt, gu, gw, gy, hk, hm, hn, hr, ht, hu, id, ie, il, im, in, io, iq, ir, is, it, je, jm, jo, jp, ke, kg, kh, ki, km, kn, kp, kr, kw, ky, kz, la, lb, lc, li, lk, lr, ls, lt, lu, lv, ly, ma, mc, md, me, mg, mh, mk, ml, mm, mn, mo, mp, mq, mr, ms, mt, mu, mv, mw, mx, my, mz, na, nc, ne, nf, ng, ni, nl, no, np, nr, nu, nz, om, pa, pe, pf, pg, ph, pk, pl, pm, pn, pr, ps, pt, pw, py, qa, re, ro, rs, ru, rw, sa, sb, sc, sd, se, sg, sh, si, sj, sk, sl, sm, sn, so, sr, st, su, sv, sy, sz, tc, td, tf, tg, th, tj, tk, tl, tm, tn, to, tp, tr, tt, tv, tw, tz, ua, ug, uk, um, us, uy, uz, va, vc, ve, vg, vi, vn, vu, wf, ws, ye, yt, yu, za, zm, zw]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString == [localhost, localdomain]
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[].toString elements one of { "localdomain", "localhost" }
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == java.util.Arrays$ArrayList.class
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] contains no nulls and has only one value, of length 20
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] contains no nulls and has only one value, of length 249
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST has only one value
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST != null
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] contains no nulls and has only one value, of length 2
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == true
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == 2
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == 20
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == 249
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]) == 1
size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() (elementwise)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() (elementwise)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[].getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[].getClass().getName() (elementwise)
===========================================================================
org.apache.commons.validator.routines.DomainValidator:::OBJECT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == this.domainRegex.patterns[].getClass().getName()
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.domainRegex.patterns[])
size(this.domainRegex.patterns[]) == size(this.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements has only one value
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] elements != null
this.domainRegex != null
this.domainRegex.patterns != null
this.domainRegex.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.domainRegex.patterns[] elements != null
this.domainRegex.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.domainRegex.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.hostnameRegex != null
this.hostnameRegex.patterns != null
this.hostnameRegex.patterns[] elements != null
size(this.domainRegex.patterns[]) == 1
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() != this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() != this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[].getClass().getName() == this.domainRegex.patterns[].getClass().getName() (elementwise)
this.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.DomainValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.DomainValidator(boolean):::EXIT
this.allowLocal == orig(allowLocal)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
str != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT208
===========================================================================
org.apache.commons.validator.routines.DomainValidator.chompLeadingDot(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(str)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
return != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < str.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
str.toString == return.toString
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT115
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT117
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == return.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == return.hostnameRegex.patterns[]
===========================================================================
org.apache.commons.validator.routines.DomainValidator.getInstance(boolean):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
return.allowLocal == orig(allowLocal)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(return.domainRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(return.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return.allowLocal == false)  <==>  (return.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == false)  <==>  (return.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == return)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return.allowLocal)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == return.domainRegex)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == return.domainRegex.patterns)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == return.hostnameRegex)
(return.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == return.hostnameRegex.patterns)
(return.allowLocal == true)  <==>  (return.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == true)  <==>  (return.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == return)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return.allowLocal)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == return.domainRegex)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == return.domainRegex.patterns)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == return.hostnameRegex)
(return.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == return.hostnameRegex.patterns)
return != null
return.domainRegex != null
return.domainRegex.patterns != null
return.domainRegex.patterns[] elements != null
return.hostnameRegex != null
return.hostnameRegex.patterns != null
return.hostnameRegex.patterns[] elements != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.domainRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == return.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
domain != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT135
(return == false)  ==>  (domain.toString == "broke.hostname")
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (orig(domain) has only one value)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
(return == false)  ==>  (this.allowLocal == true)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT135;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT135;condition="not(return == true)"
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
this.allowLocal == true
domain.toString == "broke.hostname"
orig(this) has only one value
orig(domain) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT138
this.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(this.allowLocal)
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT138;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT141
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT141;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString != domain.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
domain.toString == orig(domain.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
ccTld != null
ccTld.toString one of { "au", "cc", "hostname" }
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(this.allowLocal == false)  <==>  (ccTld.toString one of { "au", "cc" })
(this.allowLocal == false)  <==>  (return == true)
(this.allowLocal == false)  <==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(this.allowLocal == false)  <==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(this.allowLocal == false)  ==>  (ccTld.toString in org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString)
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this))
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex)
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns)
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[])
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex)
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns)
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(this.allowLocal == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
(this.allowLocal == false)  ==>  (this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
(this.allowLocal == true)  <==>  (ccTld.toString == "hostname")
(this.allowLocal == true)  <==>  (return == false)
(this.allowLocal == true)  <==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(this.allowLocal == true)  <==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this))
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex)
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns)
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[])
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex)
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns)
(this.allowLocal == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(this.allowLocal == true)  ==>  (orig(ccTld) has only one value)
(this.allowLocal == true)  ==>  (this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
ccTld.toString one of { "au", "cc", "hostname" }
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < ccTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
ccTld.toString == orig(ccTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT;condition="return == true"
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
this.allowLocal == false
ccTld.toString one of { "au", "cc" }
return == true
orig(this) has only one value
ccTld.toString in org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidCountryCodeTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
this.allowLocal == true
ccTld.toString == "hostname"
return == false
orig(this) has only one value
orig(ccTld) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
gTld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(gTld.toString one of { "au", "cc", "hostname" })  <==>  (return == false)
(gTld.toString one of { "au", "cc", "hostname" })  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(gTld.toString one of { "com", "org" })  <==>  (return == true)
(gTld.toString one of { "com", "org" })  ==>  (gTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString)
(gTld.toString one of { "com", "org" })  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < gTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
gTld.toString == orig(gTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
gTld.toString one of { "com", "org" }
return == true
gTld.toString in org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[].toString
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidGenericTld(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
gTld.toString one of { "au", "cc", "hostname" }
return == false
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
iTld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
return == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < iTld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
iTld.toString == orig(iTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidInfrastructureTld(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
this has only one value
this.allowLocal == true
iTld.toString one of { "hostname", "org" }
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
this.allowLocal == orig(this.allowLocal)
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
this.allowLocal == true
iTld.toString one of { "hostname", "org" }
return == false
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
iTld.toString == orig(iTld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidLocalTld(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::ENTER
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
tld != null
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT155
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
this.allowLocal == true
tld.toString == "hostname"
return == false
orig(this) has only one value
orig(tld) has only one value
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT155;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT156
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT156;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX)
this.allowLocal == orig(this.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[])
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST)
org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[] == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[])
this.domainRegex == orig(this.domainRegex)
this.domainRegex.patterns == orig(this.domainRegex.patterns)
this.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
this.hostnameRegex == orig(this.hostnameRegex)
this.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
this.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == size(this.hostnameRegex.patterns[])
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.domainRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS[])-1 == orig(size(this.hostnameRegex.patterns[]))
size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST[]))
size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS[]) == orig(size(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST[]))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this))
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[])
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns)
(return == false)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[])
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(tld) has only one value)
(return == false)  ==>  (this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
(return == false)  ==>  (this.allowLocal == true)
(return == false)  ==>  (this.domainRegex has only one value)
(return == false)  ==>  (this.domainRegex.patterns has only one value)
(return == false)  ==>  (this.domainRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.domainRegex.patterns[] elements has only one value)
(return == false)  ==>  (this.hostnameRegex has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns has only one value)
(return == false)  ==>  (this.hostnameRegex.patterns[] contains no nulls and has only one value, of length 1)
(return == false)  ==>  (this.hostnameRegex.patterns[] elements has only one value)
(return == false)  ==>  (tld.toString == "hostname")
(return == true)  ==>  (org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.TOP_LABEL_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString < tld.toString
org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_NAME_REGEX.toString)
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLDS.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLDS.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.GENERIC_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.COUNTRY_CODE_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.INFRASTRUCTURE_TLD_LIST.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.LOCAL_TLD_LIST.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == this.hostnameRegex.patterns.getClass().getName()
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.domainRegex.patterns.getClass().getName())
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.domainRegex.patterns.getClass().getName() == orig(this.hostnameRegex.patterns.getClass().getName())
tld.toString == orig(tld.toString)
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT;condition="return == true"
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal == return
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
return == true
===========================================================================
org.apache.commons.validator.routines.DomainValidator.isValidTld(java.lang.String):::EXIT;condition="not(return == true)"
this.allowLocal == org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal
this.allowLocal == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.allowLocal)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal == return
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL == orig(this)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == this.domainRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex == orig(this.domainRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == this.hostnameRegex
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex == orig(this.hostnameRegex)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == this.domainRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns == orig(this.domainRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == this.domainRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.domainRegex.patterns[] == orig(this.domainRegex.patterns[])
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == this.hostnameRegex.patterns
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns == orig(this.hostnameRegex.patterns)
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == this.hostnameRegex.patterns[]
org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR_WITH_LOCAL.hostnameRegex.patterns[] == orig(this.hostnameRegex.patterns[])
return == orig(org.apache.commons.validator.routines.DomainValidator.DOMAIN_VALIDATOR.allowLocal)
this.allowLocal == true
tld.toString == "hostname"
return == false
orig(this) has only one value
orig(tld) has only one value
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator:::CLASS
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX has only one value
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX != null
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$"
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR != null
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator != null
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns != null
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == java.util.regex.Pattern[].class
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] contains no nulls and has only one value, of length 1
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] elements has only one value
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] elements != null
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() == [java.util.regex.Pattern]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator:::OBJECT
this == org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == this.ipv4Validator
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == this.ipv4Validator.patterns
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() == this.ipv4Validator.patterns[].getClass().getName()
this has only one value
this.ipv4Validator has only one value
this.ipv4Validator != null
this.ipv4Validator.patterns has only one value
this.ipv4Validator.patterns != null
this.ipv4Validator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.ipv4Validator.patterns[] contains no nulls and has only one value, of length 1
this.ipv4Validator.patterns[] elements has only one value
this.ipv4Validator.patterns[] elements != null
this.ipv4Validator.patterns[].getClass().getName() == [java.util.regex.Pattern]
this.ipv4Validator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.ipv4Validator.patterns[]) == 1
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == this.ipv4Validator.patterns.getClass().getName()
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[] (elementwise)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] is the reverse of this.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[].getClass().getName() == this.ipv4Validator.patterns[].getClass().getName() (elementwise)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.InetAddressValidator():::EXIT
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.getInstance():::EXIT
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == return
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == return.ipv4Validator
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == return.ipv4Validator.patterns
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == return.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[])
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == return.ipv4Validator.patterns.getClass().getName()
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::ENTER
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
inetAddress != null
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString != inetAddress.toString
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(this.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(this.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[])
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(this.ipv4Validator.patterns[])
(return == true)  ==>  (inetAddress.toString one of { "0.0.0.0", "255.255.255.255" })
(return == true)  ==>  (org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString > inetAddress.toString)
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString != inetAddress.toString
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName())
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(this.ipv4Validator.patterns.getClass().getName())
inetAddress.toString == orig(inetAddress.toString)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT;condition="return == true"
inetAddress.toString one of { "0.0.0.0", "255.255.255.255" }
return == true
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString > inetAddress.toString
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::ENTER
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
inet4Address != null
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString != inet4Address.toString
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT75
return == false
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT75;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT93
inet4Address.toString == "256.256.256.256"
return == false
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString > inet4Address.toString
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT93;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT98
inet4Address.toString one of { "0.0.0.0", "255.255.255.255" }
return == true
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString > inet4Address.toString
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT98;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator == orig(this.ipv4Validator)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns == orig(this.ipv4Validator.patterns)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == this.ipv4Validator.patterns[]
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[])
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns[] == orig(this.ipv4Validator.patterns[])
(return == true)  ==>  (inet4Address.toString one of { "0.0.0.0", "255.255.255.255" })
(return == true)  ==>  (org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString > inet4Address.toString)
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString != inet4Address.toString
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString == orig(org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString)
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName())
org.apache.commons.validator.routines.InetAddressValidator.VALIDATOR.ipv4Validator.patterns.getClass().getName() == orig(this.ipv4Validator.patterns.getClass().getName())
inet4Address.toString == orig(inet4Address.toString)
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT;condition="return == true"
inet4Address.toString one of { "0.0.0.0", "255.255.255.255" }
return == true
org.apache.commons.validator.routines.InetAddressValidator.IPV4_REGEX.toString > inet4Address.toString
===========================================================================
org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.RegexValidator:::OBJECT
this.patterns != null
this.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.patterns[] elements != null
this.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
this.patterns[].getClass().getName() one of { [java.util.regex.Pattern], [java.util.regex.Pattern, java.util.regex.Pattern] }
size(this.patterns[]) one of { 1, 2 }
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < size(this.patterns[])-1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::ENTER
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String):::EXIT
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
size(this.patterns[]) == 1
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::ENTER
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
caseSensitive == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String, boolean):::EXIT
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
regex.toString one of { "\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*", "^(?:\\p{Alnum}(?>[\\p{Alnum}-]*\\p{Alnum})*\\.)+(\\p{Alpha}{2,})$", "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$" }
size(this.patterns[]) == 1
regex.toString == orig(regex.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[]):::ENTER
regexs has only one value
regexs.getClass().getName() == java.lang.String[].class
regexs[] contains no nulls and has only one value, of length 2
regexs[].toString == [localhost, .*\.my-testing]
regexs[].toString elements one of { ".*\\.my-testing", "localhost" }
size(regexs[]) == 2
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[]):::EXIT
regexs[] == orig(regexs[])
size(this.patterns[]) == orig(size(regexs[]))
this.patterns has only one value
this.patterns[] contains no nulls and has only one value, of length 2
this.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern]
regexs[] contains no nulls and has only one value, of length 2
regexs[].toString == [localhost, .*\.my-testing]
regexs[].toString elements one of { ".*\\.my-testing", "localhost" }
size(this.patterns[]) == 2
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::ENTER
regexs.getClass().getName() == java.lang.String[].class
caseSensitive == true
size(regexs[]) one of { 1, 2 }
===========================================================================
org.apache.commons.validator.routines.RegexValidator.RegexValidator(java.lang.String[], boolean):::EXIT
regexs[] == orig(regexs[])
size(this.patterns[]) == orig(size(regexs[]))
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::ENTER
value != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT134
return == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT134;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT137
value.toString one of { "broke.my-test", "first.my-testing", "www.apache.org" }
return == false
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT137;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
(return == false)  ==>  (value.toString one of { "broke.my-test", "first.my-testing", "www.apache.org" })
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.routines.RegexValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
value.toString one of { "broke.my-test", "first.my-testing", "www.apache.org" }
return == false
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::ENTER
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
value != null
size(this.patterns[]) == 1
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT160
return != null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT163
return == null
===========================================================================
org.apache.commons.validator.routines.RegexValidator.match(java.lang.String):::EXIT
this.patterns == orig(this.patterns)
this.patterns[] == orig(this.patterns[])
this.patterns[].getClass().getName() == [java.util.regex.Pattern]
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(this.patterns[]) == 1
size(return[]) one of { 1, 4 }
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < size(return[])-1
this.patterns.getClass().getName() != return.getClass().getName()
this.patterns.getClass().getName() == orig(this.patterns.getClass().getName())
value.toString == orig(value.toString)
size(this.patterns[]) <= size(return[])
size(this.patterns[]) != size(return[])-1
size(this.patterns[])-1 <= size(return[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidator:::CLASS
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_HOST_IP
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS == org.apache.commons.validator.routines.UrlValidator.PARSE_URL_AUTHORITY
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA == size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES-1]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME-1]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT-1]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA-1]
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == "\\p{Alnum}\\-\\."
org.apache.commons.validator.routines.UrlValidator.URL_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.URL_REGEX != null
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == "^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?"
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX != null
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == "^\\p{Alpha}[\\p{Alnum}\\+\\-\\.]*"
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == "^([\\p{Alnum}\\-\\.]*)(:\\d*)?(.*)?"
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX != null
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == "^(/[-\\w:@&?=+,.!/~*'%$_;\\(\\)]*)?$"
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX != null
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == "^(.*)$"
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX != null
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == "^\\p{ASCII}+$"
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX has only one value
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX != null
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == "^:(\\d{1,5})$"
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN has only one value
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN != null
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES has only one value
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES != null
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == java.lang.String[].class
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] contains no nulls and has only one value, of length 3
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] elements != null
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[].toString == [http, https, ftp]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[].toString elements one of { "ftp", "http", "https" }
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR has only one value
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR != null
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == 0
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes has only one value
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == java.util.HashSet.class
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == null
size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]) == 3
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] has only one value
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator:::OBJECT
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == size(this.authorityValidator.patterns[])-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == size(this.authorityValidator.patterns[])
size(this.authorityValidator.patterns[]) == size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES-1]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME-1]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT-1]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[this.options]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options]
this.options >= 0
this.authorityValidator.patterns has only one value
this.authorityValidator.patterns != null
this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2
this.authorityValidator.patterns[] elements != null
this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern]
this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(this.authorityValidator.patterns[]) == 2
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
org.apache.commons.validator.routines.UrlValidator.serialVersionUID > this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS >= this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_PATH != this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_FRAGMENT > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA != this.options
this.options > org.apache.commons.validator.routines.RegexValidator.serialVersionUID
this.options >= org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options % size(this.authorityValidator.patterns[]) == 0
this.options < size(this.authorityValidator.patterns[])-1
this.options != size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
this.allowedSchemes.getClass().getName() != this.authorityValidator.patterns.getClass().getName()
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName()
this.authorityValidator.patterns.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName()
this.authorityValidator.patterns.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator():::EXIT
this.options == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options]
this.options == 0
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(java.lang.String[]):::ENTER
schemes.getClass().getName() == java.lang.String[].class
schemes[] contains no nulls and has only one value, of length 2
schemes[].toString == [http, https]
schemes[].toString elements one of { "http", "https" }
size(schemes[]) == 2
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(java.lang.String[]):::EXIT
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == size(schemes[])-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(schemes[]))
this.options == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
schemes[] == orig(schemes[])
size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1 == orig(size(schemes[]))
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == schemes[this.options]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(schemes[post(this.options)])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == schemes[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.options == 0
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
schemes[] contains no nulls and has only one value, of length 2
schemes[].toString == [http, https]
schemes[].toString elements one of { "http", "https" }
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(schemes.getClass().getName())
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] in org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] in org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] in schemes[]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] in schemes[]
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(java.lang.String[], long):::ENTER
schemes.getClass().getName() == java.lang.String[].class
options one of { 0, 4, 8 }
size(schemes[]) == 2
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(java.lang.String[], long):::EXIT
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == size(schemes[])-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(schemes[]))
this.options == orig(options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
schemes[] == orig(schemes[])
size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1 == orig(size(schemes[]))
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == schemes[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT-1]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == schemes[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options]
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.options one of { 0, 4, 8 }
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(schemes.getClass().getName())
schemes[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] in org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] in schemes[]
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(java.lang.String[], org.apache.commons.validator.routines.RegexValidator, long):::ENTER
schemes.getClass().getName() == java.lang.String[].class
authorityValidator.patterns has only one value
authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
authorityValidator.patterns[] contains no nulls and has only one value, of length 2
authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern]
authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
options >= 0
size(schemes[]) == 2
size(authorityValidator.patterns[]) == 2
authorityValidator.patterns[options] has only one value
schemes.getClass().getName() in authorityValidator.patterns[].getClass().getName()
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(java.lang.String[], org.apache.commons.validator.routines.RegexValidator, long):::EXIT
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == size(authorityValidator.patterns[])-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == orig(size(schemes[]))-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == size(authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(schemes[]))
this.options == orig(options)
this.authorityValidator == orig(authorityValidator)
this.authorityValidator.patterns == authorityValidator.patterns
this.authorityValidator.patterns[] == authorityValidator.patterns[]
authorityValidator.patterns == orig(authorityValidator.patterns)
authorityValidator.patterns[] == orig(authorityValidator.patterns[])
size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1 == size(authorityValidator.patterns[])
size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1 == orig(size(schemes[]))
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)-1])
orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)]) == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)]) == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)]) == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)-1]) == orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.allowedSchemes != null
authorityValidator.patterns has only one value
authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
authorityValidator.patterns[] contains no nulls and has only one value, of length 2
authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern]
authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
size(authorityValidator.patterns[]) == 2
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)-1]) has only one value
this.authorityValidator.patterns.getClass().getName() == authorityValidator.patterns.getClass().getName()
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(schemes.getClass().getName())
orig(schemes[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES)-1]) in org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]
authorityValidator.patterns.getClass().getName() == orig(authorityValidator.patterns.getClass().getName())
orig(schemes.getClass().getName()) in authorityValidator.patterns[].getClass().getName()
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] in orig(schemes[])
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(long):::ENTER
options one of { 0, 2, 8 }
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(long):::EXIT
this.options == orig(options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.options one of { 0, 2, 8 }
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(org.apache.commons.validator.routines.RegexValidator, long):::ENTER
authorityValidator has only one value
authorityValidator.patterns has only one value
authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
authorityValidator.patterns[] contains no nulls and has only one value, of length 2
authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern]
authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
options == 0
size(authorityValidator.patterns[]) == 2
authorityValidator.patterns[options] has only one value
===========================================================================
org.apache.commons.validator.routines.UrlValidator.UrlValidator(org.apache.commons.validator.routines.RegexValidator, long):::EXIT
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == size(authorityValidator.patterns[])-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == orig(size(authorityValidator.patterns[]))-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == size(authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(authorityValidator.patterns[]))
this.options == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options == orig(options)
this.authorityValidator == orig(authorityValidator)
this.authorityValidator.patterns == authorityValidator.patterns
this.authorityValidator.patterns[] == authorityValidator.patterns[]
authorityValidator.patterns == orig(authorityValidator.patterns)
authorityValidator.patterns[] == orig(authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(options)]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES-1]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES-1]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME-1]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME-1]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT-1]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT-1]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[this.options]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == authorityValidator.patterns[this.options]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(authorityValidator.patterns[post(this.options)])
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(options)]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == authorityValidator.patterns[orig(options)]
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(authorityValidator.patterns[post(options)])
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(authorityValidator.patterns[options])
this.options == 0
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator has only one value
authorityValidator.patterns has only one value
authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class
authorityValidator.patterns[] contains no nulls and has only one value, of length 2
authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern]
authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
this.authorityValidator.patterns.getClass().getName() == authorityValidator.patterns.getClass().getName()
authorityValidator.patterns.getClass().getName() == orig(authorityValidator.patterns.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.UrlValidator.countToken(java.lang.String, java.lang.String):::ENTER
this.allowedSchemes != null
token != null
token.toString one of { "..", "/", "//" }
target != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > target.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.countToken(java.lang.String, java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
this.allowedSchemes != null
token.toString one of { "..", "/", "//" }
return >= 0
org.apache.commons.validator.routines.UrlValidator.serialVersionUID > return
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS > return
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > return
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_PATH > return
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY > return
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_FRAGMENT > return
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA >= return
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > token.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > target.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < return
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options <= return
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
token.toString == orig(token.toString)
target.toString == orig(target.toString)
return <= size(this.authorityValidator.patterns[])
return != size(this.authorityValidator.patterns[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::ENTER
this.allowedSchemes != null
flag one of { 1, 2, 4 }
org.apache.commons.validator.routines.UrlValidator.serialVersionUID > flag
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= flag
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS >= flag
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > flag
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_PATH > flag
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY > flag
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_FRAGMENT > flag
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA != flag
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < flag
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options < flag
flag <= size(this.authorityValidator.patterns[])
flag >= size(this.authorityValidator.patterns[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT499
return == true
orig(flag) one of { 1, 2 }
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES >= orig(flag)
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS > orig(flag)
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY != this.options
this.options != orig(flag)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT499;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT500
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 2, 7 }
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options >= orig(flag)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT500;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options)
(return == false)  ==>  (orig(flag) one of { 1, 2, 4 })
(return == false)  ==>  (this.authorityValidator == null)
(return == false)  ==>  (this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
(return == false)  ==>  (this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
(return == false)  ==>  (this.options >= orig(flag))
(return == false)  ==>  (this.options one of { 1, 2, 7 })
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES >= orig(flag))
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS > orig(flag))
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY != this.options)
(return == true)  ==>  (orig(flag) <= size(this.authorityValidator.patterns[]))
(return == true)  ==>  (orig(flag) >= size(this.authorityValidator.patterns[])-1)
(return == true)  ==>  (orig(flag) one of { 1, 2 })
(return == true)  ==>  (this.allowedSchemes.getClass().getName() != this.authorityValidator.patterns.getClass().getName())
(return == true)  ==>  (this.authorityValidator.patterns has only one value)
(return == true)  ==>  (this.authorityValidator.patterns.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
(return == true)  ==>  (this.authorityValidator.patterns.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
(return == true)  ==>  (this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class)
(return == true)  ==>  (this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2)
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern])
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value)
(return == true)  ==>  (this.options != orig(flag))
(return == true)  ==>  (this.options % size(this.authorityValidator.patterns[]) == 0)
(return == true)  ==>  (this.options < size(this.authorityValidator.patterns[])-1)
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options < orig(flag)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
orig(flag) <= size(this.authorityValidator.patterns[])
orig(flag) >= size(this.authorityValidator.patterns[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT;condition="return == true"
return == true
orig(flag) one of { 1, 2 }
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES >= orig(flag)
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS > orig(flag)
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY != this.options
this.options != orig(flag)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOff(long):::EXIT;condition="not(return == true)"
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 2, 7 }
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options >= orig(flag)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::ENTER
flag one of { 1, 8 }
org.apache.commons.validator.routines.UrlValidator.serialVersionUID > flag
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= flag
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != flag
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != flag
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS >= flag
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_PATH != flag
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY != flag
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_FRAGMENT > flag
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA != flag
org.apache.commons.validator.routines.RegexValidator.serialVersionUID < flag
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options < flag
flag != size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
flag != size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT487
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]))-1
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA == orig(size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]))
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7, 8 }
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
return == true
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options % orig(flag) == 0
this.options >= orig(flag)
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT487;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT488
return == false
this.options != orig(flag)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT488;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  ==>  (this.authorityValidator.patterns has only one value)
(return == false)  ==>  (this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class)
(return == false)  ==>  (this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2)
(return == false)  ==>  (this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern])
(return == false)  ==>  (this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class)
(return == false)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value)
(return == false)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value)
(return == false)  ==>  (this.options != orig(flag))
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(return == true)  ==>  (this.allowedSchemes.getClass().getName() == java.util.HashSet.class)
(return == true)  ==>  (this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
(return == true)  ==>  (this.authorityValidator == null)
(return == true)  ==>  (this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
(return == true)  ==>  (this.options != size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1)
(return == true)  ==>  (this.options % orig(flag) == 0)
(return == true)  ==>  (this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
(return == true)  ==>  (this.options >= orig(flag))
(return == true)  ==>  (this.options one of { 1, 7, 8 })
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options < orig(flag)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
orig(flag) != size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
orig(flag) != size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT;condition="return == true"
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]))-1
org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA == orig(size(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[]))
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7, 8 }
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
return == true
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options % orig(flag) == 0
this.options >= orig(flag)
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isOn(long):::EXIT;condition="not(return == true)"
return == false
this.options != orig(flag)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::ENTER
this.allowedSchemes != null
value != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString != value.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT296
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 0, 1, 7 }
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT296;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT305
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < value.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT305;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT310
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7, 8 }
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < value.toString
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT310;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT318
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == orig(this.options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
orig(this) has only one value
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < value.toString
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT318;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT321
return == true
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < value.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT321;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < value.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < value.toString)
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString != value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT;condition="return == true"
return == true
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < value.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < value.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::ENTER
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString != authority.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT359
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7 }
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
orig(authority) == null
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT359;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT365
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == orig(size(this.authorityValidator.patterns[]))-1
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES == orig(size(this.authorityValidator.patterns[]))
this.options == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(this.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(this.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options])
this.options == 0
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator has only one value
authority.toString one of { "first.my-testing", "localhost", "sup3r.my-testing" }
return == true
orig(this) has only one value
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
this.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT365;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT384
return == false
orig(authority) != null
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT384;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT391
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7, 8 }
this.authorityValidator == null
return == false
orig(authority) != null
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT391;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT397
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7 }
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
orig(authority) != null
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT397;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT400
return == true
orig(authority) != null
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT400;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(return == true)  ==>  (orig(authority) != null)
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString != authority.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
authority.toString == orig(authority.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT;condition="return == true"
return == true
orig(authority) != null
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidAuthority(java.lang.String):::EXIT;condition="not(return == true)"
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::ENTER
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > fragment.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT453
return == true
orig(fragment) == null
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT453;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT456
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == orig(this.options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
orig(this) has only one value
orig(fragment) != null
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT456;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  <==>  (orig(fragment) != null)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES < this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS < this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA < this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_URL_PATH < this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > fragment.toString)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > fragment.toString)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.allowedSchemes has only one value)
(return == false)  ==>  (this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
(return == false)  ==>  (this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class)
(return == false)  ==>  (this.authorityValidator == null)
(return == false)  ==>  (this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
(return == false)  ==>  (this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
(return == true)  <==>  (orig(fragment) == null)
(return == true)  ==>  (this.authorityValidator.patterns has only one value)
(return == true)  ==>  (this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class)
(return == true)  ==>  (this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2)
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern])
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value)
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > fragment.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
fragment.toString == orig(fragment.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT;condition="return == true"
return == true
orig(fragment) == null
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidFragment(java.lang.String):::EXIT;condition="not(return == true)"
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY == orig(this.options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
orig(this) has only one value
orig(fragment) != null
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::ENTER
this.allowedSchemes != null
path != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > path.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT414
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS == this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS == orig(this.options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
path.toString == "/C:\\some.file"
return == false
orig(this) has only one value
orig(path) has only one value
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
this.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT414;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT419
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES == orig(this.options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
path.toString one of { "/..//file", "/test1//file" }
return == false
orig(this) has only one value
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT419;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT426
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7 }
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT426;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT430
return == true
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT430;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(return == false)  ==>  (this.authorityValidator == null)
(return == false)  ==>  (this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
(return == false)  ==>  (this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
(return == false)  ==>  (this.options one of { 1, 7, 8 })
(return == true)  ==>  (this.authorityValidator.patterns has only one value)
(return == true)  ==>  (this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class)
(return == true)  ==>  (this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2)
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern])
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value)
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > path.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
path.toString == orig(path.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidPath(java.lang.String):::EXIT;condition="not(return == true)"
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7, 8 }
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::ENTER
this.allowedSchemes != null
query.toString one of { "action=edit&mode=up", "action=view" }
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < query.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::EXIT440
orig(query) == null
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::EXIT440;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::EXIT443
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7 }
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
orig(query) != null
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::EXIT443;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < query.toString)
(orig(query) != null)  ==>  (query.toString one of { "action=edit&mode=up", "action=view" })
(orig(query) != null)  ==>  (this.allowedSchemes has only one value)
(orig(query) != null)  ==>  (this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
(orig(query) != null)  ==>  (this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class)
(orig(query) != null)  ==>  (this.authorityValidator == null)
(orig(query) != null)  ==>  (this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
(orig(query) != null)  ==>  (this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
(orig(query) != null)  ==>  (this.options one of { 1, 7 })
(orig(query) == null)  ==>  (this.authorityValidator.patterns has only one value)
(orig(query) == null)  ==>  (this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class)
(orig(query) == null)  ==>  (this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2)
(orig(query) == null)  ==>  (this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern])
(orig(query) == null)  ==>  (this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class)
(orig(query) == null)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value)
(orig(query) == null)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value)
this.allowedSchemes != null
query.toString one of { "action=edit&mode=up", "action=view" }
return == true
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < query.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
query.toString == orig(query.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidQuery(java.lang.String):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::ENTER
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString != scheme.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT334
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7 }
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
return == false
orig(scheme) == null
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT334;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT338
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 1, 7 }
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.Collections$EmptySet.class
this.authorityValidator == null
scheme.toString == "3ht"
return == false
orig(scheme) != null
org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES <= this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString > scheme.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString > scheme.toString
this.options > org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.allowedSchemes.getClass().getName() != org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT338;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT344
this.options == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options
this.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(this.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(this.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[this.options])
this.options == 0
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < scheme.toString
this.allowedSchemes.getClass().getName() == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName()
this.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT344;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT348
return == true
orig(scheme) != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < scheme.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT348;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX)
org.apache.commons.validator.routines.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.URL_PATTERN)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX)
org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX)
org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX)
org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX)
org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.ASCII_PATTERN)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX)
org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.routines.UrlValidator.PORT_PATTERN)
this.options == orig(this.options)
this.allowedSchemes == orig(this.allowedSchemes)
this.authorityValidator == orig(this.authorityValidator)
this.authorityValidator.patterns == orig(this.authorityValidator.patterns)
this.authorityValidator.patterns[] == orig(this.authorityValidator.patterns[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(this.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(this.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.authorityValidator.patterns[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[this.options])
this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)]
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options)])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.options])
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES[post(org.apache.commons.validator.routines.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options)
(return == false)  ==>  (org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options)
(return == false)  ==>  (this.authorityValidator == null)
(return == false)  ==>  (this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
(return == false)  ==>  (this.options one of { 0, 1, 7 })
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < scheme.toString)
(return == true)  ==>  (org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < scheme.toString)
(return == true)  ==>  (orig(scheme) != null)
(return == true)  ==>  (this.authorityValidator.patterns has only one value)
(return == true)  ==>  (this.authorityValidator.patterns.getClass().getName() == java.util.regex.Pattern[].class)
(return == true)  ==>  (this.authorityValidator.patterns[] contains no nulls and has only one value, of length 2)
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() == [java.util.regex.Pattern, java.util.regex.Pattern])
(return == true)  ==>  (this.authorityValidator.patterns[].getClass().getName() elements == java.util.regex.Pattern.class)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value)
(return == true)  ==>  (this.authorityValidator.patterns[org.apache.commons.validator.routines.UrlValidator.ALLOW_ALL_SCHEMES] has only one value)
(return == true)  ==>  (this.options % size(this.authorityValidator.patterns[]) == 0)
this.allowedSchemes != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString)
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString != scheme.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString == orig(org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString)
this.allowedSchemes.getClass().getName() == orig(this.allowedSchemes.getClass().getName())
this.authorityValidator.patterns.getClass().getName() == orig(this.authorityValidator.patterns.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_SCHEMES.getClass().getName())
org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.allowedSchemes.getClass().getName())
scheme.toString == orig(scheme.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT;condition="return == true"
return == true
orig(scheme) != null
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_CHARS_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.URL_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.SCHEME_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.AUTHORITY_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.PATH_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.QUERY_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.LEGAL_ASCII_REGEX.toString < scheme.toString
org.apache.commons.validator.routines.UrlValidator.PORT_REGEX.toString < scheme.toString
===========================================================================
org.apache.commons.validator.routines.UrlValidator.isValidScheme(java.lang.String):::EXIT;condition="not(return == true)"
this.authorityValidator == org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator
this.authorityValidator == orig(org.apache.commons.validator.routines.UrlValidator.DEFAULT_URL_VALIDATOR.authorityValidator)
this.options one of { 0, 1, 7 }
this.authorityValidator == null
return == false
org.apache.commons.validator.routines.UrlValidator.ALLOW_2_SLASHES != this.options
org.apache.commons.validator.routines.UrlValidator.NO_FRAGMENTS != this.options
org.apache.commons.validator.routines.UrlValidator.ALLOW_LOCAL_URLS > this.options
org.apache.commons.validator.routines.UrlValidator.PARSE_URL_QUERY >= this.options
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest:::OBJECT
this.printStatus == this.printIndex
size(this.testUrlScheme[]) == size(this.testPath[])-1
size(this.testUrlQuery[]) == size(this.testScheme[])-1
size(this.testUrlParts[]) == size(this.testUrlPartsOptions[])
size(this.testUrlParts[]) == size(this.testPartsIndex[])
size(this.testUrlParts[])-1 == size(this.testScheme[])
size(this.testUrlPartsOptions[])-1 == size(this.testScheme[])
size(this.testPartsIndex[])-1 == size(this.testScheme[])
this.printStatus == false
this.testUrlScheme != null
this.testUrlScheme.getClass().getName() == org.apache.commons.validator.ResultPair[].class
this.testUrlScheme[] elements != null
this.testUrlScheme[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testUrlScheme[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testUrlScheme[].item contains no nulls and has only one value, of length 9
this.testUrlScheme[].item elements != null
this.testUrlScheme[].item.toString == [http://, ftp://, h3t://, 3ht://, http:/, http:, http/, ://, ]
this.testUrlScheme[].valid == [1, 1, 1, 0, 0, 0, 0, 0, 1]
this.testUrlAuthority != null
this.testUrlAuthority[] elements != null
this.testUrlAuthority[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testUrlAuthority[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testUrlAuthority[].item contains no nulls and has only one value, of length 19
this.testUrlAuthority[].item elements != null
this.testUrlAuthority[].item.toString == [www.google.com, go.com, go.au, 0.0.0.0, 255.255.255.255, 256.256.256.256, 255.com, 1.2.3.4.5, 1.2.3.4., 1.2.3, .1.2.3.4, go.a, go.a1a, go.cc, go.1aa, aaa., .aaa, aaa, ]
this.testUrlAuthority[].valid == [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
this.testUrlPort != null
this.testUrlPort[] elements != null
this.testUrlPort[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testUrlPort[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testUrlPort[].item contains no nulls and has only one value, of length 7
this.testUrlPort[].item elements != null
this.testUrlPort[].item.toString == [:80, :65535, :0, , :-1, :65636, :65a]
this.testUrlPort[].valid == [1, 1, 1, 1, 0, 1, 0]
this.testPath != null
this.testPath[] elements != null
this.testPath[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testPath[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testPath[].item contains no nulls and has only one value, of length 10
this.testPath[].item elements != null
this.testPath[].item.toString == [/test1, /t123, /$23, /.., /../, /test1/, , /test1/file, /..//file, /test1//file]
this.testPath[].valid == [1, 1, 1, 0, 0, 1, 1, 1, 0, 0]
this.testUrlPathOptions != null
this.testUrlPathOptions[] elements != null
this.testUrlPathOptions[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testUrlPathOptions[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testUrlPathOptions[].item contains no nulls and has only one value, of length 15
this.testUrlPathOptions[].item elements != null
this.testUrlPathOptions[].item.toString == [/test1, /t123, /$23, /.., /../, /test1/, /#, , /test1/file, /t123/file, /$23/file, /../file, /..//file, /test1//file, /#/file]
this.testUrlPathOptions[].valid == [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0]
this.testUrlQuery != null
this.testUrlQuery[] elements != null
this.testUrlQuery[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testUrlQuery[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testUrlQuery[].item contains no nulls and has only one value, of length 3
this.testUrlQuery[].item elements != null
this.testUrlQuery[].item.toString == [?action=view, ?action=edit&mode=up, ]
this.testUrlQuery[].item.toString elements one of { "", "?action=edit&mode=up", "?action=view" }
this.testUrlQuery[].valid == [1, 1, 1]
this.testUrlQuery[].valid elements == true
this.testUrlQuery[].valid elements != null
this.testUrlParts != null
this.testUrlParts.getClass().getName() == java.lang.Object[].class
this.testUrlParts[] elements != null
this.testUrlParts[].getClass().getName() == [org.apache.commons.validator.ResultPair[], org.apache.commons.validator.ResultPair[], org.apache.commons.validator.ResultPair[], org.apache.commons.validator.ResultPair[], org.apache.commons.validator.ResultPair[]]
this.testUrlParts[].getClass().getName() elements == org.apache.commons.validator.ResultPair[].class
this.testUrlPartsOptions != null
this.testUrlPartsOptions[] elements != null
this.testPartsIndex != null
this.testPartsIndex[] elements one of { 0, 8 }
this.testPartsIndex[] one of { [0, 0, 0, 0, 0], [8, 0, 0, 0, 0] }
this.testPartsIndex[] sorted by >=
this.testScheme != null
this.testScheme[] elements != null
this.testScheme[].getClass().getName() == [org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair, org.apache.commons.validator.ResultPair]
this.testScheme[].getClass().getName() elements == org.apache.commons.validator.ResultPair.class
this.testScheme[].item contains no nulls and has only one value, of length 4
this.testScheme[].item elements != null
this.testScheme[].item.toString == [http, ftp, httpd, telnet]
this.testScheme[].valid == [1, 0, 0, 0]
this.fName != null
size(this.testUrlAuthority[]) == 19
size(this.testUrlPort[]) == 7
size(this.testPath[]) == 10
size(this.testUrlPathOptions[]) == 15
size(this.testUrlParts[]) == 5
this.printStatus in this.testUrlScheme[].valid
this.printStatus in this.testUrlAuthority[].valid
this.printStatus in this.testUrlPort[].valid
this.printStatus in this.testPath[].valid
this.printStatus in this.testUrlPathOptions[].valid
this.printStatus in this.testScheme[].valid
this.testUrlScheme.getClass().getName() == this.testUrlAuthority.getClass().getName()
this.testUrlScheme.getClass().getName() == this.testUrlPort.getClass().getName()
this.testUrlScheme.getClass().getName() == this.testPath.getClass().getName()
this.testUrlScheme.getClass().getName() == this.testUrlPathOptions.getClass().getName()
this.testUrlScheme.getClass().getName() == this.testUrlQuery.getClass().getName()
this.testUrlScheme.getClass().getName() != this.testUrlParts.getClass().getName()
this.testUrlScheme.getClass().getName() in this.testUrlParts[].getClass().getName()
this.testUrlScheme.getClass().getName() == this.testScheme.getClass().getName()
this.testUrlParts.getClass().getName() == this.testUrlPartsOptions.getClass().getName()
this.testPartsIndex[] elements <= size(this.testUrlScheme[])-1
this.testPartsIndex[] elements < size(this.testUrlAuthority[])-1
this.testPartsIndex[] elements < size(this.testUrlPathOptions[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.UrlValidatorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.UrlValidatorTest(java.lang.String):::EXIT
this.fName == orig(testName)
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.fName.toString == testName.toString
testName.toString == orig(testName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.incrementTestPartsIndex(int[], java.lang.Object[]):::ENTER
size(testPartsIndex[]) == size(testParts[])
testPartsIndex has only one value
testPartsIndex != null
testPartsIndex[] elements >= 0
testParts != null
testParts.getClass().getName() == java.lang.Object[].class
testParts[] elements != null
size(testPartsIndex[]) == 5
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.incrementTestPartsIndex(int[], java.lang.Object[]):::EXIT
testPartsIndex[] > orig(testPartsIndex[]) (lexically)
testPartsIndex[] >= orig(testPartsIndex[]) (lexically)
testParts[] == orig(testParts[])
(return == false)  ==>  (orig(testPartsIndex[]) one of { [7, 18, 6, 9, 2], [7, 18, 6, 14, 2] })
(return == false)  ==>  (testPartsIndex[] == [8, 0, 0, 0, 0])
(return == false)  ==>  (testPartsIndex[] elements one of { 0, 8 })
(return == true)  ==>  (orig(testPartsIndex[]) elements >= 0)
testPartsIndex[] elements >= 0
testParts[] elements != null
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.incrementTestPartsIndex(int[], java.lang.Object[]):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.incrementTestPartsIndex(int[], java.lang.Object[]):::EXIT;condition="not(return == true)"
testPartsIndex[] == [8, 0, 0, 0, 0]
testPartsIndex[] elements one of { 0, 8 }
return == false
orig(testPartsIndex[]) one of { [7, 18, 6, 9, 2], [7, 18, 6, 14, 2] }
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.setUp():::ENTER
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.setUp():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.testPartsIndex[] <= orig(this.testPartsIndex[]) (elementwise)
this.fName.toString == orig(this.fName.toString)
orig(this.testPartsIndex[]) elements <= size(this.testUrlScheme[])-1
orig(this.testPartsIndex[]) elements < size(this.testUrlAuthority[])-1
orig(this.testPartsIndex[]) elements < size(this.testUrlPathOptions[])-1
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testIsValid():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testIsValid"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testIsValid():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [8, 0, 0, 0, 0]
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testIsValid"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
size(this.testUrlScheme[])-1 in this.testPartsIndex[]
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testIsValid(java.lang.Object[], long):::ENTER
size(this.testUrlParts[]) == size(testObjects[])
size(this.testScheme[]) == size(testObjects[])-1
this.testUrlScheme[options].valid == this.testUrlScheme[options-1].valid
this.testUrlScheme[options].valid == this.testUrlAuthority[options].valid
this.testUrlScheme[options].valid == this.testUrlPort[options-1].valid
this.testUrlScheme[options].valid == this.testUrlPathOptions[options-1].valid
this.testUrlAuthority[options-1].valid == this.testPath[options].valid
this.testPath[options].valid == this.testPath[options-1].valid
this.testPath[options].valid == this.testUrlPathOptions[options].valid
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testIsValid"
options one of { 1, 7 }
this.testPath[options].valid == true
this.testPath[options].valid in this.testUrlScheme[].valid
this.testPath[options].valid in this.testUrlPort[].valid
this.testUrlPathOptions[options].item in this.testPath[].item
this.testUrlScheme[options].valid in this.testPath[].valid
this.testPath[options].item in this.testUrlPathOptions[].item
this.testPath[options-1].item in this.testUrlPathOptions[].item
this.testPath[options].valid in this.testUrlQuery[].valid
this.testUrlQuery[].valid elements == this.testPath[options].valid
this.testUrlParts.getClass().getName() == testObjects.getClass().getName()
this.testUrlScheme[options].valid in this.testScheme[].valid
this.testPath[options].valid in this.testScheme[].valid
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testIsValid(java.lang.Object[], long):::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
testObjects[] == orig(testObjects[])
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testUrlParts[]) == orig(size(testObjects[]))
size(this.testScheme[]) == size(testObjects[])-1
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
size(this.testScheme[]) == orig(size(testObjects[]))-1
this.testUrlScheme[orig(options)].valid == this.testUrlScheme[orig(options)-1].valid
this.testUrlScheme[orig(options)].valid == this.testUrlAuthority[orig(options)].valid
this.testUrlScheme[orig(options)].valid == this.testUrlPort[orig(options)-1].valid
this.testUrlScheme[orig(options)].valid == this.testUrlPathOptions[orig(options)-1].valid
this.testUrlScheme[orig(options)].valid == orig(this.testUrlScheme[post(options)-1].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlAuthority[post(options)].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlPort[post(options)-1].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlPathOptions[post(options)-1].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlScheme[options-1].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlAuthority[options].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlPort[options-1].valid)
this.testUrlScheme[orig(options)].valid == orig(this.testUrlPathOptions[options-1].valid)
this.testUrlAuthority[orig(options)-1].valid == this.testPath[orig(options)].valid
this.testPath[orig(options)].valid == this.testPath[orig(options)-1].valid
this.testPath[orig(options)].valid == this.testUrlPathOptions[orig(options)].valid
this.testPath[orig(options)].valid == orig(this.testUrlAuthority[post(options)-1].valid)
this.testPath[orig(options)].valid == orig(this.testPath[post(options)-1].valid)
this.testPath[orig(options)].valid == orig(this.testUrlPathOptions[post(options)].valid)
this.testPath[orig(options)].valid == orig(this.testUrlAuthority[options-1].valid)
this.testPath[orig(options)].valid == orig(this.testPath[options-1].valid)
this.testPath[orig(options)].valid == orig(this.testUrlPathOptions[options].valid)
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [8, 0, 0, 0, 0]
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testIsValid"
this.testPath[orig(options)].valid == true
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testPath[orig(options)].valid in this.testUrlScheme[].valid
this.testPath[orig(options)].valid in this.testUrlPort[].valid
this.testUrlPathOptions[orig(options)].item in this.testPath[].item
this.testUrlScheme[orig(options)].valid in this.testPath[].valid
this.testPath[orig(options)].item in this.testUrlPathOptions[].item
this.testPath[orig(options)-1].item in this.testUrlPathOptions[].item
this.testPath[orig(options)].valid in this.testUrlQuery[].valid
this.testUrlQuery[].valid elements == this.testPath[orig(options)].valid
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.testUrlParts.getClass().getName() == orig(testObjects.getClass().getName())
size(this.testUrlScheme[])-1 in this.testPartsIndex[]
this.testUrlScheme[orig(options)].valid in this.testScheme[].valid
this.testPath[orig(options)].valid in this.testScheme[].valid
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testIsValidScheme():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testIsValidScheme"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testIsValidScheme():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testIsValidScheme"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidateUrl():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidateUrl"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidateUrl():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidateUrl"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator202():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator202"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator202():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator202"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator204():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator204"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator204():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator204"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator218():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator218"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator218():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator218"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator248():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator248"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator248():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator248"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator276():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator276"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator276():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator276"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator288():::ENTER
this has only one value
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator288"
===========================================================================
org.apache.commons.validator.routines.UrlValidatorTest.testValidator288():::EXIT
this.printStatus == orig(this.printStatus)
this.printStatus == orig(this.printIndex)
this.testUrlScheme == orig(this.testUrlScheme)
this.testUrlScheme[] == orig(this.testUrlScheme[])
this.testUrlScheme[].item == orig(this.testUrlScheme[].item)
this.testUrlScheme[].valid == orig(this.testUrlScheme[].valid)
this.testUrlAuthority == orig(this.testUrlAuthority)
this.testUrlAuthority[] == orig(this.testUrlAuthority[])
this.testUrlAuthority[].item == orig(this.testUrlAuthority[].item)
this.testUrlAuthority[].valid == orig(this.testUrlAuthority[].valid)
this.testUrlPort == orig(this.testUrlPort)
this.testUrlPort[] == orig(this.testUrlPort[])
this.testUrlPort[].item == orig(this.testUrlPort[].item)
this.testUrlPort[].valid == orig(this.testUrlPort[].valid)
this.testPath == orig(this.testPath)
this.testPath[] == orig(this.testPath[])
this.testPath[].item == orig(this.testPath[].item)
this.testPath[].valid == orig(this.testPath[].valid)
this.testUrlPathOptions == orig(this.testUrlPathOptions)
this.testUrlPathOptions[] == orig(this.testUrlPathOptions[])
this.testUrlPathOptions[].item == orig(this.testUrlPathOptions[].item)
this.testUrlPathOptions[].valid == orig(this.testUrlPathOptions[].valid)
this.testUrlQuery == orig(this.testUrlQuery)
this.testUrlQuery[] == orig(this.testUrlQuery[])
this.testUrlQuery[].item == orig(this.testUrlQuery[].item)
this.testUrlQuery[].valid == orig(this.testUrlQuery[].valid)
this.testUrlParts == orig(this.testUrlParts)
this.testUrlParts[] == orig(this.testUrlParts[])
this.testUrlPartsOptions == orig(this.testUrlPartsOptions)
this.testUrlPartsOptions[] == orig(this.testUrlPartsOptions[])
this.testPartsIndex == orig(this.testPartsIndex)
this.testPartsIndex[] == orig(this.testPartsIndex[])
this.testScheme == orig(this.testScheme)
this.testScheme[] == orig(this.testScheme[])
this.testScheme[].item == orig(this.testScheme[].item)
this.testScheme[].valid == orig(this.testScheme[].valid)
this.fName == orig(this.fName)
size(this.testUrlScheme[]) == orig(size(this.testPath[]))-1
size(this.testUrlQuery[]) == orig(size(this.testScheme[]))-1
size(this.testUrlParts[]) == orig(size(this.testUrlPartsOptions[]))
size(this.testUrlParts[]) == orig(size(this.testPartsIndex[]))
size(this.testScheme[]) == orig(size(this.testUrlParts[]))-1
size(this.testScheme[]) == orig(size(this.testUrlPartsOptions[]))-1
size(this.testScheme[]) == orig(size(this.testPartsIndex[]))-1
this.testUrlScheme has only one value
this.testUrlScheme[] contains no nulls and has only one value, of length 9
this.testUrlAuthority has only one value
this.testUrlAuthority[] contains no nulls and has only one value, of length 19
this.testUrlPort has only one value
this.testUrlPort[] contains no nulls and has only one value, of length 7
this.testPath has only one value
this.testPath[] contains no nulls and has only one value, of length 10
this.testUrlPathOptions has only one value
this.testUrlPathOptions[] contains no nulls and has only one value, of length 15
this.testUrlQuery has only one value
this.testUrlQuery[] contains no nulls and has only one value, of length 3
this.testUrlParts has only one value
this.testUrlParts[] contains no nulls and has only one value, of length 5
this.testUrlPartsOptions has only one value
this.testUrlPartsOptions[] contains no nulls and has only one value, of length 5
this.testPartsIndex has only one value
this.testPartsIndex[] == [0, 0, 0, 0, 0]
this.testPartsIndex[] elements == 0
this.testScheme has only one value
this.testScheme[] contains no nulls and has only one value, of length 4
this.fName has only one value
this.fName.toString == "testValidator288"
this.testUrlScheme.getClass().getName() == orig(this.testUrlScheme.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlAuthority.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPort.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testPath.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlPathOptions.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testUrlQuery.getClass().getName())
this.testUrlScheme.getClass().getName() == orig(this.testScheme.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlParts.getClass().getName())
this.testUrlParts.getClass().getName() == orig(this.testUrlPartsOptions.getClass().getName())
this.fName.toString == orig(this.fName.toString)
