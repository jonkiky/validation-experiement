===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message.toString one of { "Format Type A", "Format Type B" }
expected == 0
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
message.toString one of { "Format Type A", "Format Type B" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message != null
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message.toString one of { "DE Locale, DE Format", "Pattern #,#0.00", "US Locale, US Format" }
expected.toString one of { "1,234.5", "1.234,5", "12,34.50" }
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
message.toString one of { "DE Locale, DE Format", "Pattern #,#0.00", "US Locale, US Format" }
expected.toString one of { "1,234.5", "1.234,5", "12,34.50" }
message.toString == orig(message.toString)
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::ENTER
message != null
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
this.val$test != null
this.val$test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.val$test.fName != null
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
size(return[]) == 1
this.fRunTests >= size(return[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164;condition="return == true"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 11
return == true
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.routines.BigDecimalValidatorTest"
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 11
this.fTests[].getClass().getName() == [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 11
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
size(this.fTests[]) one of { 0, 2, 11 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
return == false
size(this.fTests[]) one of { 0, 2, 11 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 2, 11 })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 2, 11 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
return == false
size(this.fTests[]) one of { 0, 2, 11 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 2, 11 })
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 2, 11 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 11 }
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 11
result.fStop == false
size(this.fTests[]) one of { 1, 11 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 11 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 11 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 12 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 11 == 0
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 11 }
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest, org.apache.commons.validator.routines.BigDecimalValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) one of { 1, 11 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 11
runTime == 504
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 11
return has only one value
return.toString == "0.504"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 11
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 504
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 11
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 11
booBoos.getClass().getName() == java.util.Vector$1.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 11
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 11
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 11
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 11
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 11
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 11
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 11
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 11
runTime == 504
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 11
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 11 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 11
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 11
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 11
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 11
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 11
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.daikon.BigDecimalValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.BigDecimalValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator:::OBJECT
this.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidator.class
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.AbstractFormatValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.AbstractFormatValidator(boolean):::EXIT
this.strict == orig(strict)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.lang.String):::ENTER
this has only one value
this.strict == true
value has only one value
value.getClass().getName() == java.math.BigDecimal.class
pattern has only one value
pattern.toString == "#,#0.00"
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.lang.String):::EXIT
this.strict == orig(this.strict)
this.strict == true
pattern.toString == "#,#0.00"
return has only one value
return.toString == "12,34.50"
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.lang.String, java.util.Locale):::ENTER
this has only one value
this.strict == true
value has only one value
value.getClass().getName() == java.math.BigDecimal.class
pattern.toString == "#,#0.00"
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.lang.String, java.util.Locale):::EXIT
this.strict == orig(this.strict)
this.strict == true
pattern.toString == "#,#0.00"
return.toString one of { "1,234.5", "1.234,5", "12,34.50" }
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.text.Format):::ENTER
this has only one value
this.strict == true
value has only one value
value.getClass().getName() == java.math.BigDecimal.class
formatter.getClass().getName() == java.text.DecimalFormat.class
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.text.Format):::EXIT
this.strict == orig(this.strict)
this.strict == true
return.toString one of { "1,234.5", "1.234,5", "12,34.50" }
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.util.Locale):::ENTER
this has only one value
this.strict == true
value has only one value
value.getClass().getName() == java.math.BigDecimal.class
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.format(java.lang.Object, java.util.Locale):::EXIT
this.strict == orig(this.strict)
this.strict == true
return.toString one of { "1,234.5", "1.234,5" }
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isStrict():::ENTER
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isStrict():::EXIT
this.strict == return
return == orig(this.strict)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isStrict():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isStrict():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String):::ENTER
this has only one value
this.strict == true
value.toString one of { "12,345", "XXXX" }
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String):::EXIT
this.strict == orig(this.strict)
(value.toString == "12,345")  <==>  (return == true)
(value.toString == "12,345")  ==>  (this.strict == return)
(value.toString == "XXXX")  <==>  (return == false)
this.strict == true
value.toString one of { "12,345", "XXXX" }
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String):::EXIT;condition="return == true"
this.strict == return
return == orig(this.strict)
value.toString == "12,345"
return == true
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String):::EXIT;condition="not(return == true)"
value.toString == "XXXX"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.lang.String):::ENTER
this has only one value
this.strict == true
value.toString one of { "1,23,45", "XXXX" }
pattern has only one value
pattern.toString == "0,00,00"
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.lang.String):::EXIT
this.strict == orig(this.strict)
(value.toString == "1,23,45")  <==>  (return == true)
(value.toString == "1,23,45")  ==>  (this.strict == return)
(value.toString == "XXXX")  <==>  (return == false)
this.strict == true
value.toString one of { "1,23,45", "XXXX" }
pattern.toString == "0,00,00"
value.toString == orig(value.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.lang.String):::EXIT;condition="return == true"
this.strict == return
return == orig(this.strict)
value.toString == "1,23,45"
return == true
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
value.toString == "XXXX"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.util.Locale):::ENTER
this has only one value
this.strict == true
value.toString one of { "12.345", "XXXX" }
locale has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.util.Locale):::EXIT
this.strict == orig(this.strict)
(value.toString == "12.345")  <==>  (return == true)
(value.toString == "12.345")  ==>  (this.strict == return)
(value.toString == "XXXX")  <==>  (return == false)
this.strict == true
value.toString one of { "12.345", "XXXX" }
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.util.Locale):::EXIT;condition="return == true"
this.strict == return
return == orig(this.strict)
value.toString == "12.345"
return == true
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.isValid(java.lang.String, java.util.Locale):::EXIT;condition="not(return == true)"
value.toString == "XXXX"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.parse(java.lang.String, java.text.Format):::ENTER
value != null
formatter != null
formatter.getClass().getName() == java.text.DecimalFormat.class
this.getClass().getName() != formatter.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.parse(java.lang.String, java.text.Format):::EXIT186
value.toString one of { "X", "X12", "XXXX" }
return == null
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.parse(java.lang.String, java.text.Format):::EXIT190
this.strict == true
return == null
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.parse(java.lang.String, java.text.Format):::EXIT197
return != null
===========================================================================
org.apache.commons.validator.routines.AbstractFormatValidator.parse(java.lang.String, java.text.Format):::EXIT
this.strict == orig(this.strict)
return.getClass().getName() == java.math.BigDecimal.class
value.toString == orig(value.toString)
return.getClass().getName() != orig(this.getClass().getName())
return.getClass().getName() != orig(formatter.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator:::CLASS
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator:::OBJECT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.formatType
this.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidator.class
this.allowFractions == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.AbstractNumberValidator(boolean, int, boolean):::ENTER
formatType == 0
allowFractions == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.AbstractNumberValidator(boolean, int, boolean):::EXIT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == orig(formatType)
this.allowFractions == orig(allowFractions)
this.strict == orig(strict)
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.determineScale(java.text.NumberFormat):::ENTER
format != null
format.getClass().getName() == java.text.DecimalFormat.class
this.getClass().getName() != format.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.determineScale(java.text.NumberFormat):::EXIT217
this.strict == false
return == -1
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.determineScale(java.text.NumberFormat):::EXIT220
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == return
this.allowFractions == this.strict
this.allowFractions == orig(this.strict)
orig(this) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.determineScale(java.text.NumberFormat):::EXIT225
this.allowFractions == this.strict
this.allowFractions == orig(this.strict)
return == -1
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.determineScale(java.text.NumberFormat):::EXIT238
this.allowFractions == this.strict
this.allowFractions == orig(this.strict)
return one of { 0, 2 }
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT <= return
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.determineScale(java.text.NumberFormat):::EXIT
this.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
return one of { -1, 0, 2 }
org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT != return
org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT >= return
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.getFormat(java.lang.String, java.util.Locale):::ENTER
pattern.toString one of { "#,###.###", "#,#0.00", "0,00,00" }
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.getFormat(java.lang.String, java.util.Locale):::EXIT
this.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
pattern.toString one of { "#,###.###", "#,#0.00", "0,00,00" }
return != null
return.getClass().getName() == java.text.DecimalFormat.class
pattern.toString == orig(pattern.toString)
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.getFormat(java.util.Locale):::ENTER
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.getFormat(java.util.Locale):::EXIT
this.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
return != null
return.getClass().getName() == java.text.DecimalFormat.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.getFormatType():::ENTER
this has only one value
this.strict == false
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.getFormatType():::EXIT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == return
this.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
this.strict == false
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isAllowFractions():::ENTER
this.allowFractions == this.strict
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isAllowFractions():::EXIT
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isAllowFractions():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::ENTER
this.allowFractions == this.strict
this has only one value
value.getClass().getName() == java.lang.Integer.class
min has only one value
max has only one value
value.getClass().getName() == min.getClass().getName()
value.getClass().getName() == max.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT114
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT114;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT115
return == false
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT115;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT
this.allowFractions == this.strict
this.allowFractions == orig(this.allowFractions)
this.allowFractions == orig(this.strict)
(return == true)  ==>  (this.allowFractions == return)
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT;condition="return == true"
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isInRange(java.lang.Number, java.lang.Number, java.lang.Number):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isValid(java.lang.String, java.lang.String, java.util.Locale):::ENTER
pattern.toString one of { "#,###.###", "0,00,00" }
value.toString != pattern.toString
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isValid(java.lang.String, java.lang.String, java.util.Locale):::EXIT
this.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
(return == true)  ==>  (orig(value) != null)
(return == true)  ==>  (this.allowFractions == return)
(return == true)  ==>  (value.toString > pattern.toString)
pattern.toString one of { "#,###.###", "0,00,00" }
value.toString != pattern.toString
value.toString == orig(value.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isValid(java.lang.String, java.lang.String, java.util.Locale):::EXIT;condition="return == true"
this.allowFractions == return
return == orig(this.allowFractions)
return == true
orig(value) != null
value.toString > pattern.toString
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.isValid(java.lang.String, java.lang.String, java.util.Locale):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::ENTER
this.allowFractions == this.strict
this has only one value
value.getClass().getName() == java.lang.Integer.class
max has only one value
this.getClass().getName() != value.getClass().getName()
value.getClass().getName() == max.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT143
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT143;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT144
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT144;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT
this.allowFractions == this.strict
this.allowFractions == orig(this.allowFractions)
this.allowFractions == orig(this.strict)
(return == false)  ==>  (orig(value) has only one value)
(return == true)  ==>  (this.allowFractions == return)
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT;condition="return == true"
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.maxValue(java.lang.Number, java.lang.Number):::EXIT;condition="not(return == true)"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::ENTER
this.allowFractions == this.strict
this has only one value
value.getClass().getName() == java.lang.Integer.class
min has only one value
this.getClass().getName() != value.getClass().getName()
value.getClass().getName() == min.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT127
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT127;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT128
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT128;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT
this.allowFractions == this.strict
this.allowFractions == orig(this.allowFractions)
this.allowFractions == orig(this.strict)
(return == false)  ==>  (orig(value) has only one value)
(return == true)  ==>  (this.allowFractions == return)
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT;condition="return == true"
this.allowFractions == return
this.strict == return
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.minValue(java.lang.Number, java.lang.Number):::EXIT;condition="not(return == true)"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.parse(java.lang.String, java.lang.String, java.util.Locale):::ENTER
pattern.toString one of { "#,###.###", "0,00,00" }
value.toString != pattern.toString
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.parse(java.lang.String, java.lang.String, java.util.Locale):::EXIT162
value.toString == ""
pattern.toString == "#,###.###"
return == null
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.parse(java.lang.String, java.lang.String, java.util.Locale):::EXIT165
orig(value) != null
value.toString > pattern.toString
===========================================================================
org.apache.commons.validator.routines.AbstractNumberValidator.parse(java.lang.String, java.lang.String, java.util.Locale):::EXIT
this.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
(value.toString > pattern.toString)  ==>  (orig(value) != null)
(value.toString > pattern.toString)  ==>  (pattern.toString one of { "#,###.###", "0,00,00" })
(value.toString > pattern.toString)  ==>  (return.getClass().getName() != orig(this.getClass().getName()))
(value.toString > pattern.toString)  ==>  (return.getClass().getName() == java.math.BigDecimal.class)
pattern.toString one of { "#,###.###", "0,00,00" }
return.getClass().getName() == java.math.BigDecimal.class
value.toString != pattern.toString
value.toString == orig(value.toString)
pattern.toString == orig(pattern.toString)
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest:::OBJECT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.validator.formatType
this.validator.allowFractions == this.strictValidator.allowFractions
this.validator.allowFractions == this.strictValidator.strict
this.validator.formatType == this.strictValidator.formatType
this.max == this.maxPlusOne
this.max == this.min
this.max == this.minMinusOne
this.testNumber == this.localeExpected
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[this.validator.formatType]
this.testStringUS == this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringDE == this.localeValue
size(this.invalid[]) == size(this.valid[])-1
size(this.invalid[]) == size(this.validCompare[])-1
size(this.invalid[]) == size(this.validStrict[])-1
size(this.invalid[]) == size(this.validStrictCompare[])-1
size(this.valid[]) == size(this.validCompare[])
size(this.valid[]) == size(this.validStrict[])
size(this.valid[]) == size(this.validStrictCompare[])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[this.validator.formatType] == this.invalidStrict[this.validator.formatType]
this.invalid[this.validator.formatType] == this.invalidStrict[this.strictValidator.formatType]
this.valid[this.validator.formatType] == this.validStrict[this.validator.formatType]
this.valid[this.validator.formatType] == this.validStrict[this.strictValidator.formatType]
this.validCompare[this.validator.formatType] == this.validStrictCompare[this.validator.formatType]
this.validCompare[this.validator.formatType] == this.validStrictCompare[this.strictValidator.formatType]
this.validator.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidator.class
this.validator.allowFractions == true
this.validator.formatType == 0
this.validator.strict == false
this.max == null
this.invalid.getClass().getName() == java.lang.String[].class
this.invalid[] has only one value, of length 4
this.invalid[].getClass().getName() == [null, java.lang.String, java.lang.String, java.lang.String]
this.invalid[].toString == [null, , X, X12]
this.valid[] contains no nulls and has only one value, of length 5
this.valid[] elements != null
this.valid[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.valid[].getClass().getName() elements == java.lang.String.class
this.valid[].toString == [0, 1234.5, 1,234.5, 1,234.5, 1234.5X]
this.validCompare.getClass().getName() == java.lang.Number[].class
this.validCompare[] elements != null
this.validCompare[].getClass().getName() == [java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal]
this.validCompare[].getClass().getName() elements == java.math.BigDecimal.class
this.invalidStrict[] has only one value, of length 7
this.invalidStrict[].getClass().getName() == [null, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.invalidStrict[].toString == [null, , X, X12, 12X, 1X2, 1.234X]
this.validStrict[] contains no nulls and has only one value, of length 5
this.validStrict[] elements != null
this.validStrict[].toString == [0, 1234.5, 1,234.5, .1, 12345.678990]
this.validStrictCompare[] elements != null
this.testPattern.toString == "#,###.###"
this.testNumber.getClass().getName() == java.math.BigDecimal.class
this.testStringUS.toString == "1,234.5"
this.testStringDE.toString == "1.234,5"
this.localePattern.toString == "#.###,#"
this.fName != null
size(this.valid[]) == 5
size(this.invalidStrict[]) == 7
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == null
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] != null
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] != null
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] has only one value
this.invalid[this.validator.formatType] == null
this.valid[this.validator.formatType] has only one value
this.validator.getClass().getName() == this.strictValidator.getClass().getName()
this.validator.getClass().getName() != this.invalid.getClass().getName()
this.validator.getClass().getName() != this.validCompare.getClass().getName()
this.validator.getClass().getName() != this.testNumber.getClass().getName()
this.invalid.getClass().getName() == this.valid.getClass().getName()
this.invalid.getClass().getName() != this.validCompare.getClass().getName()
this.invalid.getClass().getName() == this.invalidStrict.getClass().getName()
this.invalid.getClass().getName() == this.validStrict.getClass().getName()
this.invalid.getClass().getName() != this.testNumber.getClass().getName()
this.testStringUS in this.valid[]
this.testStringUS.toString in this.valid[].toString
this.validCompare.getClass().getName() == this.validStrictCompare.getClass().getName()
this.validCompare.getClass().getName() != this.testNumber.getClass().getName()
this.testNumber in this.validCompare[]
this.testZero in this.validCompare[]
this.testNumber.getClass().getName() in this.validCompare[].getClass().getName()
this.testStringUS in this.validStrict[]
this.testStringUS.toString in this.validStrict[].toString
this.testNumber in this.validStrictCompare[]
this.testZero in this.validStrictCompare[]
this.testPattern.toString < this.testStringUS.toString
this.testPattern.toString < this.testStringDE.toString
this.testPattern.toString < this.localePattern.toString
this.testPattern.toString < this.fName.toString
this.testNumber.getClass().getName() == this.testZero.getClass().getName()
this.testNumber.getClass().getName() == this.localeExpected.getClass().getName()
this.testStringUS.toString < this.testStringDE.toString
this.testStringUS.toString > this.localePattern.toString
this.testStringUS.toString < this.fName.toString
this.testStringDE.toString == this.localeValue.toString
this.testStringDE.toString > this.localePattern.toString
this.testStringDE.toString < this.fName.toString
this.localePattern.toString < this.fName.toString
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.BaseNumberValidatorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.BaseNumberValidatorTest(java.lang.String):::EXIT
this.validator == this.strictValidator
this.max == this.testNumber
this.max == this.testZero
this.max == this.localeExpected
this.invalid == this.valid
this.invalid == this.invalidStrict
this.invalid == this.validStrict
this.validCompare == this.validStrictCompare
this.testPattern == this.testStringUS
this.testPattern == this.testStringDE
this.testPattern == this.localeValue
this.testPattern == this.localePattern
this.fName == orig(name)
this.validator == null
this.invalid == null
this.validCompare == null
this.testPattern == null
this.testLocale == null
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.setUp():::ENTER
this.validator == this.strictValidator
this.max == this.testNumber
this.max == this.testZero
this.max == this.localeExpected
this.invalid == this.valid
this.invalid == this.invalidStrict
this.invalid == this.validStrict
this.validCompare == this.validStrictCompare
this.testPattern == this.testStringUS
this.testPattern == this.testStringDE
this.testPattern == this.localeValue
this.testPattern == this.localePattern
this.validator == null
this.invalid == null
this.validCompare == null
this.testPattern == null
this.testLocale == null
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.setUp():::EXIT
this.validator == this.strictValidator
this.validator == orig(this.validator)
this.validator == orig(this.strictValidator)
this.max == this.testNumber
this.max == this.testZero
this.max == this.localeExpected
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.max == orig(this.testNumber)
this.max == orig(this.testZero)
this.max == orig(this.localeExpected)
this.invalid == this.valid
this.invalid == this.invalidStrict
this.invalid == this.validStrict
this.invalid == orig(this.invalid)
this.invalid == orig(this.valid)
this.invalid == orig(this.invalidStrict)
this.invalid == orig(this.validStrict)
this.validCompare == this.validStrictCompare
this.validCompare == orig(this.validCompare)
this.validCompare == orig(this.validStrictCompare)
this.testPattern == this.testStringUS
this.testPattern == this.testStringDE
this.testPattern == this.localeValue
this.testPattern == this.localePattern
this.testPattern == orig(this.testPattern)
this.testPattern == orig(this.testStringUS)
this.testPattern == orig(this.testStringDE)
this.testPattern == orig(this.localeValue)
this.testPattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
this.validator == null
this.invalid == null
this.validCompare == null
this.testPattern == null
this.testLocale == null
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.tearDown():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.testPattern has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.tearDown():::EXIT
this.validator == this.strictValidator
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator == null
this.testPattern has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.invalid.getClass().getName() != orig(this.validator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() != orig(this.validator.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() != orig(this.validator.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testFormat():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testFormat"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testFormat():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testFormat"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testFormatType():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testFormatType"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testFormatType():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testFormatType"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testInvalidNotStrict():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testInvalidNotStrict"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testInvalidNotStrict():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testInvalidNotStrict"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testInvalidStrict():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testInvalidStrict"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testInvalidStrict():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testInvalidStrict"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testRangeMinMax():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testRangeMinMax"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testRangeMinMax():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testRangeMinMax"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidNotStrict():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidNotStrict"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidNotStrict():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidNotStrict"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidStrict():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidStrict"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidStrict():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidStrict"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidateLocale():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidateLocale"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidateLocale():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidateLocale"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidateMinMax():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidateMinMax"
===========================================================================
org.apache.commons.validator.routines.BaseNumberValidatorTest.testValidateMinMax():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testValidateMinMax"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator:::CLASS
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.formatType
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR has only one value
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR != null
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == true
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.formatType == 0
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator:::OBJECT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.formatType
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.allowFractions
this.allowFractions == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.BigDecimalValidator():::EXIT
this.allowFractions == this.strict
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.BigDecimalValidator(boolean):::ENTER
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.BigDecimalValidator(boolean):::EXIT
this.strict == orig(strict)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.BigDecimalValidator(boolean, int, boolean):::ENTER
formatType == 0
allowFractions == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.BigDecimalValidator(boolean, int, boolean):::EXIT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == orig(formatType)
this.allowFractions == orig(allowFractions)
this.strict == orig(strict)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.getInstance():::ENTER
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.getInstance():::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == return.formatType
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return.allowFractions
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::ENTER
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
min == 10.0
max == 20.0
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT191
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict == return
this.allowFractions == return
this.strict == return
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT191;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT192
return == false
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT192;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
(return == true)  ==>  (org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT;condition="return == true"
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict == return
this.allowFractions == return
this.strict == return
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.isInRange(java.math.BigDecimal, double, double):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::ENTER
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
max == 20.0
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT215
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict == return
this.allowFractions == return
this.strict == return
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT215;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT216
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT216;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
(return == false)  ==>  (orig(value) has only one value)
(return == true)  ==>  (org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT;condition="return == true"
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict == return
this.allowFractions == return
this.strict == return
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.maxValue(java.math.BigDecimal, double):::EXIT;condition="not(return == true)"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::ENTER
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
min == 10.0
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT203
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict == return
this.allowFractions == return
this.strict == return
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT203;condition="return == true"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT204
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT204;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
(return == false)  ==>  (orig(value) has only one value)
(return == true)  ==>  (org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT;condition="return == true"
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == return
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict == return
this.allowFractions == return
this.strict == return
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
return == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
return == orig(this.allowFractions)
return == orig(this.strict)
return == true
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.minValue(java.math.BigDecimal, double):::EXIT;condition="not(return == true)"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.processParsedValue(java.lang.Object, java.text.Format):::ENTER
value != null
formatter != null
formatter.getClass().getName() == java.text.DecimalFormat.class
value.getClass().getName() != formatter.getClass().getName()
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.processParsedValue(java.lang.Object, java.text.Format):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
this.strict == orig(this.strict)
return != null
return.getClass().getName() == java.math.BigDecimal.class
return.getClass().getName() != orig(value.getClass().getName())
return.getClass().getName() != orig(formatter.getClass().getName())
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String):::ENTER
this == org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
value.toString one of { "12,345", "XXXX" }
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
value.toString one of { "12,345", "XXXX" }
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String, java.lang.String):::ENTER
this == org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
value.toString one of { "1,23,45", "XXXX" }
pattern has only one value
pattern.toString == "0,00,00"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String, java.lang.String):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
value.toString one of { "1,23,45", "XXXX" }
pattern.toString == "0,00,00"
value.toString == orig(value.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String, java.lang.String, java.util.Locale):::ENTER
this == org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
value.toString one of { "1,23,45", "1.23.45" }
pattern has only one value
pattern.toString == "0,00,00"
locale has only one value
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String, java.lang.String, java.util.Locale):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
value.toString one of { "1,23,45", "1.23.45" }
pattern.toString == "0,00,00"
value.toString == orig(value.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String, java.util.Locale):::ENTER
this == org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
this has only one value
value.toString one of { "12.345", "XXXX" }
locale has only one value
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidator.validate(java.lang.String, java.util.Locale):::EXIT
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(this)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == this.strict
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.strict)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.allowFractions)
org.apache.commons.validator.routines.BigDecimalValidator.VALIDATOR.allowFractions == orig(this.strict)
value.toString one of { "12.345", "XXXX" }
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest:::OBJECT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.validator.formatType
this.validator.allowFractions == this.strictValidator.allowFractions
this.validator.allowFractions == this.strictValidator.strict
this.validator.formatType == this.strictValidator.formatType
this.max == this.maxPlusOne
this.max == this.min
this.max == this.minMinusOne
this.testNumber == this.localeExpected
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testStringUS == this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringDE == this.localeValue
size(this.invalid[]) == size(this.valid[])-1
size(this.invalid[]) == size(this.validCompare[])-1
size(this.invalid[]) == size(this.validStrict[])-1
size(this.invalid[]) == size(this.validStrictCompare[])-1
size(this.valid[]) == size(this.validCompare[])
size(this.valid[]) == size(this.validStrict[])
size(this.valid[]) == size(this.validStrictCompare[])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.validator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[this.strictValidator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.validator.formatType]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[this.strictValidator.formatType]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrictCompare[this.validator.formatType]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrictCompare[this.strictValidator.formatType]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.validator.getClass().getName() == org.apache.commons.validator.routines.BigDecimalValidator.class
this.validator.allowFractions == true
this.validator.formatType == 0
this.validator.strict == false
this.max == null
this.invalid.getClass().getName() == java.lang.String[].class
this.invalid[] has only one value, of length 4
this.invalid[].getClass().getName() == [null, java.lang.String, java.lang.String, java.lang.String]
this.invalid[].toString == [null, , X, X12]
this.valid[] contains no nulls and has only one value, of length 5
this.valid[] elements != null
this.valid[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.valid[].getClass().getName() elements == java.lang.String.class
this.valid[].toString == [0, 1234.5, 1,234.5, 1,234.5, 1234.5X]
this.validCompare.getClass().getName() == java.lang.Number[].class
this.validCompare[] elements != null
this.validCompare[].getClass().getName() == [java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal]
this.validCompare[].getClass().getName() elements == java.math.BigDecimal.class
this.invalidStrict[] has only one value, of length 7
this.invalidStrict[].getClass().getName() == [null, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.invalidStrict[].toString == [null, , X, X12, 12X, 1X2, 1.234X]
this.validStrict[] contains no nulls and has only one value, of length 5
this.validStrict[] elements != null
this.validStrict[].toString == [0, 1234.5, 1,234.5, .1, 12345.678990]
this.validStrictCompare[] elements != null
this.testPattern.toString == "#,###.###"
this.testNumber.getClass().getName() == java.math.BigDecimal.class
this.testStringUS.toString == "1,234.5"
this.testStringDE.toString == "1.234,5"
this.localePattern.toString == "#.###,#"
this.fName != null
size(this.valid[]) == 5
size(this.invalidStrict[]) == 7
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == null
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] != null
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] has only one value
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] != null
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] has only one value
this.validator.getClass().getName() == this.strictValidator.getClass().getName()
this.validator.getClass().getName() != this.invalid.getClass().getName()
this.validator.getClass().getName() != this.validCompare.getClass().getName()
this.validator.getClass().getName() != this.testNumber.getClass().getName()
this.invalid.getClass().getName() == this.valid.getClass().getName()
this.invalid.getClass().getName() != this.validCompare.getClass().getName()
this.invalid.getClass().getName() == this.invalidStrict.getClass().getName()
this.invalid.getClass().getName() == this.validStrict.getClass().getName()
this.invalid.getClass().getName() != this.testNumber.getClass().getName()
this.testStringUS in this.valid[]
this.testStringUS.toString in this.valid[].toString
this.validCompare.getClass().getName() == this.validStrictCompare.getClass().getName()
this.validCompare.getClass().getName() != this.testNumber.getClass().getName()
this.testNumber in this.validCompare[]
this.testZero in this.validCompare[]
this.testNumber.getClass().getName() in this.validCompare[].getClass().getName()
this.testStringUS in this.validStrict[]
this.testStringUS.toString in this.validStrict[].toString
this.testNumber in this.validStrictCompare[]
this.testZero in this.validStrictCompare[]
this.testPattern.toString < this.testStringUS.toString
this.testPattern.toString < this.testStringDE.toString
this.testPattern.toString < this.localePattern.toString
this.testPattern.toString < this.fName.toString
this.testNumber.getClass().getName() == this.testZero.getClass().getName()
this.testNumber.getClass().getName() == this.localeExpected.getClass().getName()
this.testStringUS.toString < this.testStringDE.toString
this.testStringUS.toString > this.localePattern.toString
this.testStringUS.toString < this.fName.toString
this.testStringDE.toString == this.localeValue.toString
this.testStringDE.toString > this.localePattern.toString
this.testStringDE.toString < this.fName.toString
this.localePattern.toString < this.fName.toString
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.BigDecimalValidatorTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.BigDecimalValidatorTest(java.lang.String):::EXIT
this.validator == this.strictValidator
this.max == this.testNumber
this.max == this.testZero
this.max == this.localeExpected
this.invalid == this.valid
this.invalid == this.invalidStrict
this.invalid == this.validStrict
this.validCompare == this.validStrictCompare
this.testPattern == this.testStringUS
this.testPattern == this.testStringDE
this.testPattern == this.localeValue
this.testPattern == this.localePattern
this.fName == orig(name)
this.validator == null
this.invalid == null
this.validCompare == null
this.testPattern == null
this.testLocale == null
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.setUp():::ENTER
this.validator == this.strictValidator
this.max == this.testNumber
this.max == this.testZero
this.max == this.localeExpected
this.invalid == this.valid
this.invalid == this.invalidStrict
this.invalid == this.validStrict
this.validCompare == this.validStrictCompare
this.testPattern == this.testStringUS
this.testPattern == this.testStringDE
this.testPattern == this.localeValue
this.testPattern == this.localePattern
this.validator == null
this.invalid == null
this.validCompare == null
this.testPattern == null
this.testLocale == null
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.setUp():::EXIT
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.max == orig(this.testNumber)
this.max == orig(this.testZero)
this.max == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validCompare[this.validator.formatType]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.fName == orig(this.fName)
orig(this.testPattern) == this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
orig(this.testPattern) == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
orig(this.testPattern) == this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
orig(this.testPattern) == this.invalidStrict[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
orig(this.testPattern) == this.invalid[this.validator.formatType]
orig(this.testPattern) == this.invalidStrict[this.validator.formatType]
orig(this.testPattern) == this.invalid[this.strictValidator.formatType]
orig(this.testPattern) == this.invalidStrict[this.strictValidator.formatType]
this.testPattern has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.testBigDecimalRangeMinMax():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validCompare[this.validator.formatType]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testBigDecimalRangeMinMax"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.testBigDecimalRangeMinMax():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validCompare[this.validator.formatType]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testBigDecimalRangeMinMax"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.testBigDecimalValidatorMethods():::ENTER
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validCompare[this.validator.formatType]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this has only one value
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testBigDecimalValidatorMethods"
===========================================================================
org.apache.commons.validator.routines.BigDecimalValidatorTest.testBigDecimalValidatorMethods():::EXIT
this.validator == orig(this.validator)
org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT == this.strictValidator.formatType
this.validator.allowFractions == orig(this.validator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.allowFractions)
this.validator.allowFractions == orig(this.strictValidator.strict)
this.validator.strict == orig(this.validator.strict)
this.strictValidator == orig(this.strictValidator)
this.max == orig(this.max)
this.max == orig(this.maxPlusOne)
this.max == orig(this.min)
this.max == orig(this.minMinusOne)
this.invalid == orig(this.invalid)
this.invalid[] == orig(this.invalid[])
this.valid == orig(this.valid)
this.valid[] == orig(this.valid[])
this.validCompare == orig(this.validCompare)
this.validCompare[] == orig(this.validCompare[])
this.invalidStrict == orig(this.invalidStrict)
this.invalidStrict[] == orig(this.invalidStrict[])
this.validStrict == orig(this.validStrict)
this.validStrict[] == orig(this.validStrict[])
this.validStrictCompare == orig(this.validStrictCompare)
this.validStrictCompare[] == orig(this.validStrictCompare[])
this.testPattern == orig(this.testPattern)
this.testNumber == orig(this.testNumber)
this.testNumber == orig(this.localeExpected)
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testNumber == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT-1]
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testNumber == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.testZero == orig(this.testZero)
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.testZero == this.validCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == this.validStrictCompare[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT-1]
this.testZero == orig(this.validCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == orig(this.validStrictCompare[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.testZero == this.validCompare[this.validator.formatType]
this.testZero == this.validStrictCompare[this.validator.formatType]
this.testZero == orig(this.validCompare[post(this.validator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.validator.formatType)])
this.testZero == this.validCompare[this.strictValidator.formatType]
this.testZero == this.validStrictCompare[this.strictValidator.formatType]
this.testZero == orig(this.validCompare[post(this.strictValidator.formatType)])
this.testZero == orig(this.validStrictCompare[post(this.strictValidator.formatType)])
this.testZero == this.validCompare[orig(this.validator.formatType)]
this.testZero == this.validCompare[orig(this.strictValidator.formatType)]
this.testZero == this.validStrictCompare[orig(this.validator.formatType)]
this.testZero == this.validStrictCompare[orig(this.strictValidator.formatType)]
this.testZero == orig(this.validCompare[this.validator.formatType])
this.testZero == orig(this.validStrictCompare[this.validator.formatType])
this.testZero == orig(this.validCompare[this.strictValidator.formatType])
this.testZero == orig(this.validStrictCompare[this.strictValidator.formatType])
this.testStringUS == orig(this.testStringUS)
this.testStringUS == this.validStrict[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT]
this.testStringUS == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringUS == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.testStringDE == orig(this.testStringDE)
this.testStringDE == orig(this.localeValue)
this.localePattern == orig(this.localePattern)
this.testLocale == orig(this.testLocale)
this.fName == orig(this.fName)
size(this.invalid[]) == orig(size(this.valid[]))-1
size(this.invalid[]) == orig(size(this.validCompare[]))-1
size(this.invalid[]) == orig(size(this.validStrict[]))-1
size(this.invalid[]) == orig(size(this.validStrictCompare[]))-1
size(this.valid[]) == orig(size(this.validCompare[]))
size(this.valid[]) == orig(size(this.validStrict[]))
size(this.valid[]) == orig(size(this.validStrictCompare[]))
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.validator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[post(this.strictValidator.formatType)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.validator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.invalidStrict[orig(this.strictValidator.formatType)]
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.validator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.invalidStrict[this.strictValidator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.validator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[post(this.strictValidator.formatType)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.validator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == this.validStrict[orig(this.strictValidator.formatType)]
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.validator.formatType])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.STANDARD_FORMAT] == orig(this.validStrict[this.strictValidator.formatType])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT)])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.valid[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.valid[org.apache.commons.validator.routines.AbstractNumberValidator.CURRENCY_FORMAT] == orig(this.validStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)-1])
this.invalid[org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT] == orig(this.invalidStrict[post(org.apache.commons.validator.routines.AbstractNumberValidator.PERCENT_FORMAT)])
this.validator has only one value
this.strictValidator has only one value
this.invalid has only one value
this.valid has only one value
this.validCompare has only one value
this.validCompare[] contains no nulls and has only one value, of length 5
this.invalidStrict has only one value
this.validStrict has only one value
this.validStrictCompare has only one value
this.validStrictCompare[] contains no nulls and has only one value, of length 5
this.testPattern has only one value
this.testNumber has only one value
this.testZero has only one value
this.testStringUS has only one value
this.testStringDE has only one value
this.localePattern has only one value
this.testLocale has only one value
this.fName has only one value
this.fName.toString == "testBigDecimalValidatorMethods"
this.validator.getClass().getName() == orig(this.validator.getClass().getName())
this.validator.getClass().getName() == orig(this.strictValidator.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalid.getClass().getName())
this.invalid.getClass().getName() == orig(this.valid.getClass().getName())
this.invalid.getClass().getName() == orig(this.invalidStrict.getClass().getName())
this.invalid.getClass().getName() == orig(this.validStrict.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validCompare.getClass().getName())
this.validCompare.getClass().getName() == orig(this.validStrictCompare.getClass().getName())
this.testPattern.toString == orig(this.testPattern.toString)
this.testNumber.getClass().getName() == orig(this.testNumber.getClass().getName())
this.testNumber.getClass().getName() == orig(this.testZero.getClass().getName())
this.testNumber.getClass().getName() == orig(this.localeExpected.getClass().getName())
this.testStringUS.toString == orig(this.testStringUS.toString)
this.testStringDE.toString == orig(this.testStringDE.toString)
this.testStringDE.toString == orig(this.localeValue.toString)
this.localePattern.toString == orig(this.localePattern.toString)
this.fName.toString == orig(this.fName.toString)
