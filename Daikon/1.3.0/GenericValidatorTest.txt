===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
this.fName != null
this.fName.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
name.toString one of { "testMaxLength", "testMinLength" }
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests one of { 0, 1 }
result.fStop == false
size(result.fListeners[]) == 1
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests one of { 1, 2 }
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
this.val$test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
this.val$test.fName.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
$hidden$1.fName.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
$hidden$1.fName.toString one of { "testMaxLength", "testMinLength" }
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests one of { 0, 1, 2 }
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fRunTests one of { 1, 2 }
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
size(return[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
return has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 0, 1 }
test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
test.fName.toString one of { "testMaxLength", "testMinLength" }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
test.fName.toString one of { "testMaxLength", "testMinLength" }
size(this.fListeners[]) == 1
test.fName.toString == orig(test.fName.toString)
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 0, 1 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 0, 1 }
return == false
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 0, 1 }
test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests one of { 1, 2 }
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT164;condition="return == true"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 2
return == true
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.GenericValidatorTest"
size(this.fTests[]) one of { 0, 1, 2 }
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 2 }
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest]
names[] contains no nulls and has only one value, of length 2
names[].getClass().getName() == [java.lang.String, java.lang.String]
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
orig(this.fTests[]) elements has only one value
orig(this.fTests[].getClass().getName()) one of { [], [org.apache.commons.validator.GenericValidatorTest] }
orig(names[]) elements has only one value
orig(names[].getClass().getName()) one of { [], [java.lang.String] }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fTests[].getClass().getName() one of { [org.apache.commons.validator.GenericValidatorTest], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 1, 2 }
orig(size(names[])) one of { 0, 1, 2 }
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
theClass has only one value
name.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
name.toString one of { "testMaxLength", "testMinLength" }
return.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] }
return == true
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest]
return == false
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest])  <==>  (return == false)
(this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest])  <==>  (size(this.fTests[]) == 2)
(this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest])  ==>  (this.fTests[] contains no nulls and has only one value, of length 2)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] })  <==>  (return == true)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] })  <==>  (size(this.fTests[]) one of { 0, 1 })
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] })  ==>  (this.fTests[] elements has only one value)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] }
return == true
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest]
return == false
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] }
return == true
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest]
return == false
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest])  <==>  (return == false)
(this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest])  <==>  (size(this.fTests[]) == 2)
(this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest])  ==>  (this.fTests[] contains no nulls and has only one value, of length 2)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] })  <==>  (return == true)
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] })  <==>  (size(this.fTests[]) one of { 0, 1 })
(this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] })  ==>  (this.fTests[] elements has only one value)
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.GenericValidatorTest.class
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] elements has only one value
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.GenericValidatorTest] }
return == true
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 2
this.fTests[].getClass().getName() == [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest]
return == false
size(this.fTests[]) == 2
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 2 }
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 2
result.fStop == false
size(this.fTests[]) one of { 1, 2 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests one of { 0, 1 }
result.fStop == false
size(this.fTests[]) one of { 1, 2 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests one of { 1, 2 }
result.fStop == false
size(this.fTests[]) one of { 1, 2 }
size(result.fListeners[]) == 1
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) one of { 1, 2 }
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.GenericValidatorTest, org.apache.commons.validator.GenericValidatorTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) one of { 1, 2 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn one of { 0, 1, 2 }
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 2
runTime == 1056
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
return has only one value
return.toString == "1.056"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
this.fColumn one of { 1, 2 }
test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn one of { 1, 2 }
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 1056
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 2
booBoos.getClass().getName() == java.util.Vector$1.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 2
runTime == 1056
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
this.fColumn one of { 0, 1 }
test.getClass().getName() == org.apache.commons.validator.GenericValidatorTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn one of { 1, 2 }
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 2 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn <= junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.textui.TestRunner.EXCEPTION_EXIT == return.fRunTests
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.textui.TestRunner.EXCEPTION_EXIT == return.fRunTests
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.textui.TestRunner.EXCEPTION_EXIT == return.fRunTests
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.CreditCardValidator$Amex:::CLASS
org.apache.commons.validator.CreditCardValidator$Amex.PREFIX has only one value
org.apache.commons.validator.CreditCardValidator$Amex.PREFIX.toString == "34,37,"
===========================================================================
org.apache.commons.validator.CreditCardValidator$Amex:::OBJECT
this has only one value
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Amex.Amex(org.apache.commons.validator.CreditCardValidator):::ENTER
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Amex.Amex(org.apache.commons.validator.CreditCardValidator):::EXIT
org.apache.commons.validator.CreditCardValidator.this == orig(org.apache.commons.validator.CreditCardValidator.this)
org.apache.commons.validator.CreditCardValidator.this.cardTypes == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes)
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName())
===========================================================================
org.apache.commons.validator.CreditCardValidator$Discover:::CLASS
org.apache.commons.validator.CreditCardValidator$Discover.PREFIX has only one value
org.apache.commons.validator.CreditCardValidator$Discover.PREFIX.toString == "6011"
===========================================================================
org.apache.commons.validator.CreditCardValidator$Discover:::OBJECT
this has only one value
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Discover.Discover(org.apache.commons.validator.CreditCardValidator):::ENTER
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Discover.Discover(org.apache.commons.validator.CreditCardValidator):::EXIT
org.apache.commons.validator.CreditCardValidator.this == orig(org.apache.commons.validator.CreditCardValidator.this)
org.apache.commons.validator.CreditCardValidator.this.cardTypes == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes)
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName())
===========================================================================
org.apache.commons.validator.CreditCardValidator$Mastercard:::CLASS
org.apache.commons.validator.CreditCardValidator$Mastercard.PREFIX has only one value
org.apache.commons.validator.CreditCardValidator$Mastercard.PREFIX.toString == "51,52,53,54,55,"
===========================================================================
org.apache.commons.validator.CreditCardValidator$Mastercard:::OBJECT
this has only one value
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Mastercard.Mastercard(org.apache.commons.validator.CreditCardValidator):::ENTER
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Mastercard.Mastercard(org.apache.commons.validator.CreditCardValidator):::EXIT
org.apache.commons.validator.CreditCardValidator.this == orig(org.apache.commons.validator.CreditCardValidator.this)
org.apache.commons.validator.CreditCardValidator.this.cardTypes == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes)
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName())
===========================================================================
org.apache.commons.validator.CreditCardValidator$Visa:::CLASS
org.apache.commons.validator.CreditCardValidator$Visa.PREFIX has only one value
org.apache.commons.validator.CreditCardValidator$Visa.PREFIX.toString == "4"
===========================================================================
org.apache.commons.validator.CreditCardValidator$Visa:::OBJECT
this has only one value
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Visa.Visa(org.apache.commons.validator.CreditCardValidator):::ENTER
org.apache.commons.validator.CreditCardValidator.this has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes has only one value
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator$Visa.Visa(org.apache.commons.validator.CreditCardValidator):::EXIT
org.apache.commons.validator.CreditCardValidator.this == orig(org.apache.commons.validator.CreditCardValidator.this)
org.apache.commons.validator.CreditCardValidator.this.cardTypes == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes)
org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName() == orig(org.apache.commons.validator.CreditCardValidator.this.cardTypes.getClass().getName())
===========================================================================
org.apache.commons.validator.CreditCardValidator:::CLASS
===========================================================================
org.apache.commons.validator.CreditCardValidator:::OBJECT
this has only one value
this.cardTypes has only one value
this.cardTypes.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.validator.CreditCardValidator.CreditCardValidator():::EXIT
===========================================================================
org.apache.commons.validator.CreditCardValidator.CreditCardValidator(int):::ENTER
options == 15
===========================================================================
org.apache.commons.validator.CreditCardValidator.CreditCardValidator(int):::EXIT
===========================================================================
org.apache.commons.validator.GenericValidator:::CLASS
org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES == org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP
org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES == org.apache.commons.validator.CreditCardValidator.AMEX
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.CreditCardValidator.VISA
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == size(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[])-1
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS == org.apache.commons.validator.UrlValidator.PARSE_URL_AUTHORITY
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS == org.apache.commons.validator.CreditCardValidator.MASTERCARD
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == org.apache.commons.validator.UrlValidator.SCHEME_CHARS
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == org.apache.commons.validator.UrlValidator.ALPHA_PATTERN
org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA == size(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options.flags == org.apache.commons.validator.CreditCardValidator.NONE
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES-1]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME-1]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT-1]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.VISA-1]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES-1] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA-1]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP-1] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE] == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.AMEX-1]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR has only one value
org.apache.commons.validator.GenericValidator.URL_VALIDATOR != null
org.apache.commons.validator.UrlValidator.ALPHA_CHARS has only one value
org.apache.commons.validator.UrlValidator.ALPHA_CHARS != null
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == "a-zA-Z"
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS has only one value
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS != null
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString == "a-zA-Z\\d"
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS has only one value
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS != null
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString == ";/@&=,.?:+$"
org.apache.commons.validator.UrlValidator.VALID_CHARS has only one value
org.apache.commons.validator.UrlValidator.VALID_CHARS != null
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString == "[^\\s;/@&=,.?:+$]"
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS has only one value
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS != null
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString == "a-zA-Z\\d\\-\\."
org.apache.commons.validator.UrlValidator.ATOM has only one value
org.apache.commons.validator.UrlValidator.ATOM != null
org.apache.commons.validator.UrlValidator.ATOM.toString == "[^\\s;/@&=,.?:+$]+"
org.apache.commons.validator.UrlValidator.URL_PATTERN has only one value
org.apache.commons.validator.UrlValidator.URL_PATTERN != null
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString == "/^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/"
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN has only one value
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN != null
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == "/^[a-zA-Z]/"
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN has only one value
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN != null
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString == "/^([a-zA-Z\\d\\-\\.]*)(:\\d*)?(.*)?/"
org.apache.commons.validator.UrlValidator.PATH_PATTERN has only one value
org.apache.commons.validator.UrlValidator.PATH_PATTERN != null
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString == "/^(/[-\\w:@&?=+,.!/~*'%$]*)?$/"
org.apache.commons.validator.UrlValidator.QUERY_PATTERN has only one value
org.apache.commons.validator.UrlValidator.QUERY_PATTERN != null
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString == "/^(.*)$/"
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN has only one value
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN != null
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString == "/^[\\000-\\177]+$/"
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN has only one value
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN != null
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString == "/^(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})$/"
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN has only one value
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN != null
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString == "/^[^\\s;/@&=,.?:+$]+(\\.[^\\s;/@&=,.?:+$]+)*$/"
org.apache.commons.validator.UrlValidator.PORT_PATTERN has only one value
org.apache.commons.validator.UrlValidator.PORT_PATTERN != null
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString == "/^:(\\d{1,5})$/"
org.apache.commons.validator.UrlValidator.ATOM_PATTERN has only one value
org.apache.commons.validator.UrlValidator.ATOM_PATTERN != null
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString == "/([^\\s;/@&=,.?:+$]+)/"
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options has only one value
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options != null
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes has only one value
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes != null
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName() == java.util.HashSet.class
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes has only one value
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes != null
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName() == java.lang.String[].class
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[] contains no nulls and has only one value, of length 3
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[] elements != null
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[].getClass().getName() elements == java.lang.String.class
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[].toString == [http, https, ftp]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[].toString elements one of { "ftp", "http", "https" }
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR has only one value
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR != null
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes has only one value
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes != null
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName() == java.util.ArrayList.class
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] has only one value
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE] has only one value
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString < org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.VALID_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == org.apache.commons.validator.UrlValidator.SCHEME_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString < org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.URL_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.VALID_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString < org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.URL_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.UrlValidator.VALID_CHARS.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString < org.apache.commons.validator.UrlValidator.ATOM.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.URL_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString < org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString < org.apache.commons.validator.UrlValidator.ATOM.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.URL_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.URL_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.URL_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == org.apache.commons.validator.UrlValidator.ALPHA_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString > org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString > org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString > org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString > org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString > org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName() != org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName()
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName() != org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName()
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName() != org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName()
===========================================================================
org.apache.commons.validator.GenericValidator.adjustForLineEnding(java.lang.String, int):::ENTER
value has only one value
value != null
value.toString == "12345\n\r"
lineEndLength one of { 0, 1, 2 }
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES >= lineEndLength
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS > lineEndLength
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > value.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PARSE_URL_PATH > lineEndLength
org.apache.commons.validator.UrlValidator.PARSE_URL_QUERY > lineEndLength
org.apache.commons.validator.UrlValidator.PARSE_URL_FRAGMENT > lineEndLength
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString < value.toString
org.apache.commons.validator.CreditCardValidator.NONE <= lineEndLength
org.apache.commons.validator.CreditCardValidator.DISCOVER > lineEndLength
===========================================================================
org.apache.commons.validator.GenericValidator.adjustForLineEnding(java.lang.String, int):::EXIT
org.apache.commons.validator.GenericValidator.URL_VALIDATOR == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == orig(org.apache.commons.validator.UrlValidator.ALPHA_CHARS)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == orig(org.apache.commons.validator.UrlValidator.SCHEME_CHARS)
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS == orig(org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS)
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.UrlValidator.SPECIAL_CHARS)
org.apache.commons.validator.UrlValidator.VALID_CHARS == orig(org.apache.commons.validator.UrlValidator.VALID_CHARS)
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS)
org.apache.commons.validator.UrlValidator.ATOM == orig(org.apache.commons.validator.UrlValidator.ATOM)
org.apache.commons.validator.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.UrlValidator.URL_PATTERN)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.UrlValidator.ALPHA_PATTERN)
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN == orig(org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN)
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN == orig(org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN)
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN == orig(org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN)
org.apache.commons.validator.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.UrlValidator.PORT_PATTERN)
org.apache.commons.validator.UrlValidator.ATOM_PATTERN == orig(org.apache.commons.validator.UrlValidator.ATOM_PATTERN)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[])
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR)
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.CreditCardValidator.VISA)-1])
orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES)-1]) == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP)-1]) == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.CreditCardValidator.AMEX)-1])
value.toString == "12345\n\r"
return one of { -2, -1, 0 }
org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES > return
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES > return
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS > return
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.SCHEME_CHARS.toString)
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString)
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.VALID_CHARS.toString)
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString)
org.apache.commons.validator.UrlValidator.ATOM.toString > value.toString
org.apache.commons.validator.UrlValidator.ATOM.toString == orig(org.apache.commons.validator.UrlValidator.ATOM.toString)
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.URL_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PARSE_URL_PATH > return
org.apache.commons.validator.UrlValidator.PARSE_URL_QUERY > return
org.apache.commons.validator.UrlValidator.PARSE_URL_FRAGMENT > return
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_PATTERN.toString)
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString)
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString)
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString)
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString)
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString)
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName())
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName())
org.apache.commons.validator.CreditCardValidator.NONE >= return
org.apache.commons.validator.CreditCardValidator.DISCOVER > return
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName())
value.toString == orig(value.toString)
return < orig(lineEndLength)
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::ENTER
value has only one value
value != null
value.toString == "12345\n\r"
lineEndLength one of { 0, 1, 2 }
org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES < max
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES >= lineEndLength
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS <= max
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS > lineEndLength
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > value.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PARSE_URL_PATH > lineEndLength
org.apache.commons.validator.UrlValidator.PARSE_URL_QUERY >= max
org.apache.commons.validator.UrlValidator.PARSE_URL_QUERY > lineEndLength
org.apache.commons.validator.UrlValidator.PARSE_URL_FRAGMENT > max
org.apache.commons.validator.UrlValidator.PARSE_URL_FRAGMENT > lineEndLength
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA < max
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString < value.toString
org.apache.commons.validator.CreditCardValidator.NONE < max
org.apache.commons.validator.CreditCardValidator.NONE <= lineEndLength
org.apache.commons.validator.CreditCardValidator.DISCOVER > max
org.apache.commons.validator.CreditCardValidator.DISCOVER > lineEndLength
max > lineEndLength
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT292
return == true
orig(max) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT292;condition="return == true"
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT293
return == false
orig(max) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT293;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT
org.apache.commons.validator.GenericValidator.URL_VALIDATOR == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == orig(org.apache.commons.validator.UrlValidator.ALPHA_CHARS)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == orig(org.apache.commons.validator.UrlValidator.SCHEME_CHARS)
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS == orig(org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS)
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.UrlValidator.SPECIAL_CHARS)
org.apache.commons.validator.UrlValidator.VALID_CHARS == orig(org.apache.commons.validator.UrlValidator.VALID_CHARS)
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS)
org.apache.commons.validator.UrlValidator.ATOM == orig(org.apache.commons.validator.UrlValidator.ATOM)
org.apache.commons.validator.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.UrlValidator.URL_PATTERN)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.UrlValidator.ALPHA_PATTERN)
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN == orig(org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN)
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN == orig(org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN)
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN == orig(org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN)
org.apache.commons.validator.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.UrlValidator.PORT_PATTERN)
org.apache.commons.validator.UrlValidator.ATOM_PATTERN == orig(org.apache.commons.validator.UrlValidator.ATOM_PATTERN)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[])
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR)
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.CreditCardValidator.VISA)-1])
orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES)-1]) == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP)-1]) == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.CreditCardValidator.AMEX)-1])
(return == false)  ==>  (orig(max) one of { 4, 5, 6 })
(return == true)  ==>  (orig(max) one of { 5, 6, 7 })
value.toString == "12345\n\r"
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.SCHEME_CHARS.toString)
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString)
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.VALID_CHARS.toString)
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString)
org.apache.commons.validator.UrlValidator.ATOM.toString > value.toString
org.apache.commons.validator.UrlValidator.ATOM.toString == orig(org.apache.commons.validator.UrlValidator.ATOM.toString)
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.URL_PATTERN.toString)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_PATTERN.toString)
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString)
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString)
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString)
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString)
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString)
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName())
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName())
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT;condition="return == true"
return == true
orig(max) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.validator.GenericValidator.maxLength(java.lang.String, int, int):::EXIT;condition="not(return == true)"
return == false
orig(max) one of { 4, 5, 6 }
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::ENTER
value has only one value
value != null
value.toString == "12345\n\r"
lineEndLength one of { 0, 1, 2 }
org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES < min
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES >= lineEndLength
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS < min
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS > lineEndLength
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ATOM.toString > value.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PARSE_URL_PATH <= min
org.apache.commons.validator.UrlValidator.PARSE_URL_PATH > lineEndLength
org.apache.commons.validator.UrlValidator.PARSE_URL_QUERY > lineEndLength
org.apache.commons.validator.UrlValidator.PARSE_URL_FRAGMENT > min
org.apache.commons.validator.UrlValidator.PARSE_URL_FRAGMENT > lineEndLength
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA < min
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString < value.toString
org.apache.commons.validator.CreditCardValidator.NONE < min
org.apache.commons.validator.CreditCardValidator.NONE <= lineEndLength
org.apache.commons.validator.CreditCardValidator.DISCOVER >= min
org.apache.commons.validator.CreditCardValidator.DISCOVER > lineEndLength
min > lineEndLength
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT316
return == true
orig(min) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT316;condition="return == true"
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT317
return == false
orig(min) one of { 6, 7, 8 }
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT317;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT
org.apache.commons.validator.GenericValidator.URL_VALIDATOR == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == orig(org.apache.commons.validator.UrlValidator.ALPHA_CHARS)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == orig(org.apache.commons.validator.UrlValidator.SCHEME_CHARS)
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS == orig(org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS)
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS == orig(org.apache.commons.validator.UrlValidator.SPECIAL_CHARS)
org.apache.commons.validator.UrlValidator.VALID_CHARS == orig(org.apache.commons.validator.UrlValidator.VALID_CHARS)
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS)
org.apache.commons.validator.UrlValidator.ATOM == orig(org.apache.commons.validator.UrlValidator.ATOM)
org.apache.commons.validator.UrlValidator.URL_PATTERN == orig(org.apache.commons.validator.UrlValidator.URL_PATTERN)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.UrlValidator.SCHEME_PATTERN)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == orig(org.apache.commons.validator.UrlValidator.ALPHA_PATTERN)
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN)
org.apache.commons.validator.UrlValidator.PATH_PATTERN == orig(org.apache.commons.validator.UrlValidator.PATH_PATTERN)
org.apache.commons.validator.UrlValidator.QUERY_PATTERN == orig(org.apache.commons.validator.UrlValidator.QUERY_PATTERN)
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN == orig(org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN)
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN == orig(org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN)
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN == orig(org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN)
org.apache.commons.validator.UrlValidator.PORT_PATTERN == orig(org.apache.commons.validator.UrlValidator.PORT_PATTERN)
org.apache.commons.validator.UrlValidator.ATOM_PATTERN == orig(org.apache.commons.validator.UrlValidator.ATOM_PATTERN)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.options)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[])
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR)
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT)-1])
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.CreditCardValidator.VISA)-1])
orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES)-1]) == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA)-1])
orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP)-1]) == org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE]
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[org.apache.commons.validator.CreditCardValidator.NONE] == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes[post(org.apache.commons.validator.CreditCardValidator.AMEX)-1])
(return == false)  ==>  (orig(min) one of { 6, 7, 8 })
(return == true)  ==>  (orig(min) one of { 5, 6, 7 })
value.toString == "12345\n\r"
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString)
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.SCHEME_CHARS.toString)
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString)
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString)
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.VALID_CHARS.toString)
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString > value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString)
org.apache.commons.validator.UrlValidator.ATOM.toString > value.toString
org.apache.commons.validator.UrlValidator.ATOM.toString == orig(org.apache.commons.validator.UrlValidator.ATOM.toString)
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.URL_PATTERN.toString)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString)
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.ALPHA_PATTERN.toString)
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString)
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString)
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString)
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString)
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString)
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString)
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString < value.toString
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString == orig(org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString)
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.allowedSchemes.getClass().getName())
org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.URL_VALIDATOR.defaultSchemes.getClass().getName())
org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName() == orig(org.apache.commons.validator.GenericValidator.CREDIT_CARD_VALIDATOR.cardTypes.getClass().getName())
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT;condition="return == true"
return == true
orig(min) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.validator.GenericValidator.minLength(java.lang.String, int, int):::EXIT;condition="not(return == true)"
return == false
orig(min) one of { 6, 7, 8 }
===========================================================================
org.apache.commons.validator.GenericValidatorTest:::OBJECT
this.fName.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
org.apache.commons.validator.GenericValidatorTest.GenericValidatorTest(java.lang.String):::ENTER
name.toString one of { "testMaxLength", "testMinLength" }
===========================================================================
org.apache.commons.validator.GenericValidatorTest.GenericValidatorTest(java.lang.String):::EXIT
this.fName == orig(name)
name.toString one of { "testMaxLength", "testMinLength" }
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.validator.GenericValidatorTest.testMaxLength():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxLength"
===========================================================================
org.apache.commons.validator.GenericValidatorTest.testMaxLength():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxLength"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.GenericValidatorTest.testMinLength():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinLength"
===========================================================================
org.apache.commons.validator.GenericValidatorTest.testMinLength():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinLength"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.validator.UrlValidator:::CLASS
org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES == org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_HOST_IP
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT
org.apache.commons.validator.UrlValidator.NO_FRAGMENTS == org.apache.commons.validator.UrlValidator.PARSE_URL_AUTHORITY
org.apache.commons.validator.UrlValidator.ALPHA_CHARS == org.apache.commons.validator.UrlValidator.SCHEME_CHARS
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN == org.apache.commons.validator.UrlValidator.ALPHA_PATTERN
org.apache.commons.validator.UrlValidator.ALPHA_CHARS has only one value
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == "a-zA-Z"
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS has only one value
org.apache.commons.validator.UrlValidator.ALPHA_NUMERIC_CHARS.toString == "a-zA-Z\\d"
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS has only one value
org.apache.commons.validator.UrlValidator.SPECIAL_CHARS.toString == ";/@&=,.?:+$"
org.apache.commons.validator.UrlValidator.VALID_CHARS has only one value
org.apache.commons.validator.UrlValidator.VALID_CHARS.toString == "[^\\s;/@&=,.?:+$]"
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS has only one value
org.apache.commons.validator.UrlValidator.AUTHORITY_CHARS.toString == "a-zA-Z\\d\\-\\."
org.apache.commons.validator.UrlValidator.ATOM has only one value
org.apache.commons.validator.UrlValidator.ATOM.toString == "[^\\s;/@&=,.?:+$]+"
org.apache.commons.validator.UrlValidator.URL_PATTERN has only one value
org.apache.commons.validator.UrlValidator.URL_PATTERN.toString == "/^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/"
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN has only one value
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == "/^[a-zA-Z]/"
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN has only one value
org.apache.commons.validator.UrlValidator.AUTHORITY_PATTERN.toString == "/^([a-zA-Z\\d\\-\\.]*)(:\\d*)?(.*)?/"
org.apache.commons.validator.UrlValidator.PATH_PATTERN has only one value
org.apache.commons.validator.UrlValidator.PATH_PATTERN.toString == "/^(/[-\\w:@&?=+,.!/~*'%$]*)?$/"
org.apache.commons.validator.UrlValidator.QUERY_PATTERN has only one value
org.apache.commons.validator.UrlValidator.QUERY_PATTERN.toString == "/^(.*)$/"
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN has only one value
org.apache.commons.validator.UrlValidator.LEGAL_ASCII_PATTERN.toString == "/^[\\000-\\177]+$/"
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN has only one value
org.apache.commons.validator.UrlValidator.IP_V4_DOMAIN_PATTERN.toString == "/^(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})$/"
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN has only one value
org.apache.commons.validator.UrlValidator.DOMAIN_PATTERN.toString == "/^[^\\s;/@&=,.?:+$]+(\\.[^\\s;/@&=,.?:+$]+)*$/"
org.apache.commons.validator.UrlValidator.PORT_PATTERN has only one value
org.apache.commons.validator.UrlValidator.PORT_PATTERN.toString == "/^:(\\d{1,5})$/"
org.apache.commons.validator.UrlValidator.ATOM_PATTERN has only one value
org.apache.commons.validator.UrlValidator.ATOM_PATTERN.toString == "/([^\\s;/@&=,.?:+$]+)/"
org.apache.commons.validator.UrlValidator.ALPHA_CHARS.toString == org.apache.commons.validator.UrlValidator.SCHEME_CHARS.toString
org.apache.commons.validator.UrlValidator.SCHEME_PATTERN.toString == org.apache.commons.validator.UrlValidator.ALPHA_PATTERN.toString
===========================================================================
org.apache.commons.validator.UrlValidator:::OBJECT
org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES == size(this.defaultSchemes[])-1
org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA == size(this.defaultSchemes[])
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES-1]
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == this.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_URL_SCHEME-1]
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] == this.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_PORT-1]
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.defaultSchemes[this.options.flags]
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] == this.defaultSchemes[org.apache.commons.validator.UrlValidator.PARSE_AUTHORITY_EXTRA-1]
this has only one value
this.options has only one value
this.options.flags == 0
this.allowedSchemes has only one value
this.allowedSchemes.getClass().getName() == java.util.HashSet.class
this.defaultSchemes has only one value
this.defaultSchemes.getClass().getName() == java.lang.String[].class
this.defaultSchemes[] contains no nulls and has only one value, of length 3
this.defaultSchemes[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String]
this.defaultSchemes[].getClass().getName() elements == java.lang.String.class
this.defaultSchemes[].toString == [http, https, ftp]
this.defaultSchemes[].toString elements one of { "ftp", "http", "https" }
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES] has only one value
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES-1] has only one value
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_2_SLASHES] has only one value
===========================================================================
org.apache.commons.validator.UrlValidator.UrlValidator():::EXIT
===========================================================================
org.apache.commons.validator.UrlValidator.UrlValidator(java.lang.String[]):::ENTER
schemes == null
===========================================================================
org.apache.commons.validator.UrlValidator.UrlValidator(java.lang.String[]):::EXIT
===========================================================================
org.apache.commons.validator.UrlValidator.UrlValidator(java.lang.String[], int):::ENTER
schemes == null
options == 0
===========================================================================
org.apache.commons.validator.UrlValidator.UrlValidator(java.lang.String[], int):::EXIT232
===========================================================================
org.apache.commons.validator.UrlValidator.UrlValidator(java.lang.String[], int):::EXIT
this.options.flags == orig(options)
this.defaultSchemes[org.apache.commons.validator.UrlValidator.ALLOW_ALL_SCHEMES-1] == this.defaultSchemes[orig(options)]
===========================================================================
org.apache.commons.validator.daikon.GenericValidatorTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.GenericValidatorTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.util.Flags:::OBJECT
this.flags one of { 0, 15 }
===========================================================================
org.apache.commons.validator.util.Flags.Flags(long):::ENTER
flags one of { 0, 15 }
===========================================================================
org.apache.commons.validator.util.Flags.Flags(long):::EXIT
this.flags == orig(flags)
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::ENTER
flag is a power of 2
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT86
this.flags == 15
return == true
orig(this) has only one value
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT86;condition="return == true"
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT87
this.flags == 0
return == false
orig(this) has only one value
orig(flag) == 1
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT87;condition="not(return == true)"
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT
this.flags == orig(this.flags)
(this.flags == 0)  <==>  (return == false)
(this.flags == 0)  ==>  (orig(flag) == 1)
(this.flags == 15)  <==>  (return == true)
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT;condition="return == true"
this.flags == 15
return == true
orig(this) has only one value
===========================================================================
org.apache.commons.validator.util.Flags.isOn(long):::EXIT;condition="not(return == true)"
this.flags == 0
return == false
orig(this) has only one value
orig(flag) == 1
