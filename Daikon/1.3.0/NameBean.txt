===========================================================================
junit.framework.Assert:::OBJECT
this has only one value
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.AssertionFailedError:::OBJECT
this has only one value
===========================================================================
junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String):::ENTER
message has only one value
message.toString == "No tests found in org.apache.commons.validator.NameBean"
===========================================================================
junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String):::EXIT
message.toString == "No tests found in org.apache.commons.validator.NameBean"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this has only one value
this.getClass().getName() == junit.framework.TestSuite$1.class
this.fName has only one value
this.fName != null
this.fName.toString == "warning"
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name has only one value
name.toString == "warning"
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
name.toString == "warning"
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.getName():::ENTER
===========================================================================
junit.framework.TestCase.getName():::EXIT
this.fName == return
return == orig(this.fName)
return has only one value
return.toString == "warning"
this.fName.toString == return.toString
return.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fFailures[])
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])-1
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
this.fName.toString == orig(this.fName.toString)
result.fFailures[] elements == result.fFailures[result.fRunTests-1]
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.toString():::ENTER
===========================================================================
junit.framework.TestCase.toString():::EXIT
this.fName == orig(this.fName)
return has only one value
return.toString == "warning(junit.framework.TestSuite$1)"
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestFailure:::OBJECT
this has only one value
this.fFailedTest has only one value
this.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
this.fThrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::ENTER
failedTest has only one value
failedTest.getClass().getName() == junit.framework.TestSuite$1.class
thrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::EXIT
this.fFailedTest == orig(failedTest)
this.fThrownException == orig(thrownException)
this.fFailedTest.getClass().getName() == orig(failedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.failedTest():::ENTER
===========================================================================
junit.framework.TestFailure.failedTest():::EXIT
this.fFailedTest == return
this.fThrownException == orig(this.fThrownException)
return == orig(this.fFailedTest)
return has only one value
return.getClass().getName() == junit.framework.TestSuite$1.class
this.fFailedTest.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.thrownException():::ENTER
===========================================================================
junit.framework.TestFailure.thrownException():::EXIT
this.fFailedTest == orig(this.fFailedTest)
this.fThrownException == return
return == orig(this.fThrownException)
return has only one value
this.fFailedTest.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.trace():::ENTER
===========================================================================
junit.framework.TestFailure.trace():::EXIT
this.fFailedTest == orig(this.fFailedTest)
this.fThrownException == orig(this.fThrownException)
return has only one value
return.toString == "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean\r\n\tat junit.framework.Assert.fail(Assert.java:47)\r\n\tat junit.framework.TestSuite$1.runTest(TestSuite.java:263)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)\r\n"
this.fFailedTest.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestResult$1:::OBJECT
this has only one value
this.val$test has only one value
this.val$test.getClass().getName() == junit.framework.TestSuite$1.class
this.val$test.fName has only one value
this.val$test.fName.toString == "warning"
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == junit.framework.TestSuite$1.class
$hidden$1.fName has only one value
$hidden$1.fName.toString == "warning"
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
$hidden$1.fName has only one value
$hidden$1.fName.toString == "warning"
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] elements has only one value
this.fFailures[] elements != null
this.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
this.fFailures[].getClass().getName() one of { [], [junit.framework.TestFailure] }
this.fErrors has only one value
this.fErrors != null
this.fErrors[] == []
this.fErrors[].getClass().getName() == []
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests one of { 0, 1 }
this.fStop == false
size(this.fFailures[]) one of { 0, 1 }
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fErrors[])
this.fRunTests <= size(this.fListeners[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) >= size(this.fErrors[])
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fErrors[])
size(this.fFailures[])-1 >= size(this.fErrors[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
size(this.fErrors[]) <= size(this.fListeners[])
size(this.fErrors[]) >= size(this.fListeners[])-1
size(this.fErrors[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
===========================================================================
junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
t has only one value
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::EXIT
this.fFailures == orig(this.fFailures)
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fFailures[])
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == size(return[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == size(return[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fRunTests == 1
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return[] elements == return[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return == size(this.fFailures[])-1
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))-1
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fFailures[this.fRunTests-1] == this.fFailures[return]
this.fFailures[return] == this.fFailures[orig(this.fRunTests)-1]
this.fFailures[return] == orig(this.fFailures[post(this.fRunTests)-1])
this.fFailures[return] == orig(this.fFailures[this.fRunTests-1])
this.fListeners[this.fRunTests-1] == this.fListeners[return]
this.fListeners[return] == this.fListeners[orig(this.fRunTests)-1]
this.fListeners[return] == orig(this.fListeners[post(this.fRunTests)-1])
this.fListeners[return] == orig(this.fListeners[this.fRunTests-1])
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[return]
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return has only one value
return.getClass().getName() == java.util.Vector$1.class
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
return == size(this.fFailures[])
return == size(this.fListeners[])
return == orig(size(this.fFailures[]))
return == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 1
this.fFailures[] elements == this.fFailures[return-1]
this.fListeners[] elements == this.fListeners[return-1]
===========================================================================
junit.framework.TestResult.failures():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return has only one value
return.getClass().getName() == java.util.Vector$1.class
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
test.fName has only one value
test.fName.toString == "warning"
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fFailures[])
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
orig(this.fRunTests) == size(this.fFailures[])-1
orig(this.fRunTests) == size(this.fErrors[])
orig(this.fRunTests) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test.fName has only one value
test.fName.toString == "warning"
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
test.fName.toString == orig(test.fName.toString)
===========================================================================
junit.framework.TestResult.runCount():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
return == size(this.fFailures[])
return == size(this.fListeners[])
return == orig(size(this.fFailures[]))
return == orig(size(this.fListeners[]))
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 1
this.fFailures[] elements == this.fFailures[return-1]
this.fListeners[] elements == this.fListeners[return-1]
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
p has only one value
p.getClass().getName() == junit.framework.TestResult$1.class
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fFailures[])
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))-1
this.fStop == return
return == orig(this.fStop)
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(this.fRunTests) == size(this.fFailures[])
orig(this.fRunTests) == size(this.fErrors[])
orig(this.fRunTests) == size(this.fListeners[])-1
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT165
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT165;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[])-1 == size(this.fErrors[])
size(this.fErrors[]) == size(this.fListeners[])-1
size(this.fErrors[]) == orig(size(this.fFailures[]))-1
size(this.fErrors[]) == orig(size(this.fListeners[]))-1
this.fFailures[] contains no nulls and has only one value, of length 1
this.fFailures[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return == false
this.fFailures[] elements == this.fFailures[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite$1:::OBJECT
this has only one value
this.val$message has only one value
this.val$message.toString == "No tests found in org.apache.commons.validator.NameBean"
this.fName has only one value
this.fName.toString == "warning"
===========================================================================
junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String):::ENTER
$hidden$1 has only one value
$hidden$1.toString == "No tests found in org.apache.commons.validator.NameBean"
$anonymous0 has only one value
$anonymous0.toString == "warning"
===========================================================================
junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String):::EXIT
this.val$message == orig($hidden$1)
this.fName == orig($anonymous0)
$hidden$1.toString == "No tests found in org.apache.commons.validator.NameBean"
$anonymous0.toString == "warning"
this.val$message.toString == $hidden$1.toString
this.fName.toString == $anonymous0.toString
$hidden$1.toString == orig($hidden$1.toString)
$anonymous0.toString == orig($anonymous0.toString)
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.NameBean"
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite$1]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite$1.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[] == []
this.fTests[].getClass().getName() == []
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
orig(test) in this.fTests[]
this.fTests[] elements == orig(test)
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
junit.framework.TestSuite.class$0 == null
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT181
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 == null
junit.framework.TestSuite.class$1 has only one value
return has only one value
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(this.fTests[])-1
size(this.fTests[]) == size(result.fListeners[])
size(this.fTests[])-1 == size(result.fFailures[])
size(this.fTests[])-1 == size(result.fErrors[])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) == 1
this.fTests[] elements == this.fTests[result.fRunTests]
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fFailures[])
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(this.fTests[]))
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(this.fTests[])-1
orig(result.fRunTests) == size(result.fFailures[])-1
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
orig(result.fRunTests) == orig(size(result.fFailures[]))
orig(result.fRunTests) == orig(size(result.fErrors[]))
orig(result.fRunTests) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
result.fFailures[result.fRunTests-1] == result.fFailures[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == result.fListeners[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == orig(result.fListeners[result.fRunTests])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
this.fTests[] elements == this.fTests[result.fRunTests-1]
this.fName.toString == orig(this.fName.toString)
result.fFailures[] elements == result.fFailures[result.fRunTests-1]
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
result.fRunTests == size(this.fTests[])-1
size(this.fTests[]) == size(result.fListeners[])
size(this.fTests[])-1 == size(result.fFailures[])
size(this.fTests[])-1 == size(result.fErrors[])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) == 1
test in this.fTests[]
this.fTests[] elements == test
this.fTests[] elements == this.fTests[result.fRunTests]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fFailures[])
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(this.fTests[]))
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(test) == this.fTests[result.fRunTests-1]
orig(result.fRunTests) == size(this.fTests[])-1
orig(result.fRunTests) == size(result.fFailures[])-1
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
orig(result.fRunTests) == orig(size(result.fFailures[]))
orig(result.fRunTests) == orig(size(result.fErrors[]))
orig(result.fRunTests) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
result.fFailures[result.fRunTests-1] == result.fFailures[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == result.fListeners[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == orig(result.fListeners[result.fRunTests])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
orig(test) in this.fTests[]
this.fTests[] elements == orig(test)
this.fTests[] elements == this.fTests[result.fRunTests-1]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fFailures[] elements == result.fFailures[result.fRunTests-1]
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [junit.framework.TestSuite$1] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.warning(java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
message has only one value
message.toString == "No tests found in org.apache.commons.validator.NameBean"
===========================================================================
junit.framework.TestSuite.warning(java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
message.toString == "No tests found in org.apache.commons.validator.NameBean"
return has only one value
return.getClass().getName() == junit.framework.TestSuite$1.class
message.toString == orig(message.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::ENTER
line != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString > line.toString
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT314
junit.runner.BaseTestRunner.fgFilterStack == return
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT314;condition="return == true"
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT316
line.toString one of { "\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)", "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean" }
return == false
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT316;condition="not(return == true)"
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
(return == false)  ==>  (line.toString one of { "\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)", "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean" })
(return == true)  ==>  (junit.runner.BaseTestRunner.fgFilterStack == return)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString > line.toString
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
line.toString == orig(line.toString)
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT;condition="return == true"
junit.runner.BaseTestRunner.fgFilterStack == return
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT;condition="not(return == true)"
line.toString one of { "\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)", "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean" }
return == false
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::ENTER
stack has only one value
stack.toString == "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean\r\n\tat junit.framework.Assert.fail(Assert.java:47)\r\n\tat junit.framework.TestSuite$1.runTest(TestSuite.java:263)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)\r\n"
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::EXIT294
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
stack.toString == "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean\r\n\tat junit.framework.Assert.fail(Assert.java:47)\r\n\tat junit.framework.TestSuite$1.runTest(TestSuite.java:263)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)\r\n"
return has only one value
return.toString == "junit.framework.AssertionFailedError: No tests found in org.apache.commons.validator.NameBean\r\n\tat org.apache.commons.validator.daikon.NameBean.main(NameBean.java:7)\r\n"
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
stack.toString == orig(stack.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key.toString one of { "filterstack", "maxmessage" }
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
key.toString one of { "filterstack", "maxmessage" }
return.toString == "true"
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
key.toString == orig(key.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::ENTER
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == return
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::ENTER
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT299
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT299;condition="not(return == true)"
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT;condition="not(return == true)"
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn one of { 0, 1 }
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::ENTER
this.fColumn == 1
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
t has only one value
===========================================================================
junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 1
runTime == 30
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
return has only one value
return.toString == "0.03"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
this.fColumn == 1
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 30
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures[] elements == result.fFailures[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fFailures[]))
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fFailures[] elements == result.fFailures[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int):::ENTER
this.fColumn == count
this.fColumn == 1
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == orig(count)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 1
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int):::ENTER
this.fColumn == count
this.fColumn == 1
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == orig(count)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 1
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):::ENTER
this.fColumn == 1
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 1
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == junit.framework.TestSuite$1.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 1
booBoos.getClass().getName() == java.util.Vector$1.class
count one of { 0, 1 }
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
type.toString == "error"
orig(booBoos) has only one value
orig(count) == 0
orig(type) has only one value
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT63
this.fColumn == orig(count)
type.toString == "failure"
orig(booBoos) has only one value
orig(type) has only one value
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
(type.toString == "error")  <==>  (orig(count) == 0)
(type.toString == "failure")  <==>  (orig(count) == 1)
(type.toString == "failure")  <==>  (this.fColumn == orig(count))
this.fColumn == 1
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures[] elements == result.fFailures[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fFailures[]))
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fFailures[] elements == result.fFailures[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures[] elements == result.fFailures[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fFailures[]))
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fFailures[] elements == result.fFailures[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures[] elements == result.fFailures[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fFailures[])
this.fColumn == size(result.fListeners[])
this.fColumn == orig(size(result.fFailures[]))
this.fColumn == orig(size(result.fListeners[]))
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[])-1 == size(result.fErrors[])
size(result.fErrors[]) == size(result.fListeners[])-1
size(result.fErrors[]) == orig(size(result.fFailures[]))-1
size(result.fErrors[]) == orig(size(result.fListeners[]))-1
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] contains no nulls and has only one value, of length 1
result.fFailures[] elements has only one value
result.fFailures[].getClass().getName() == [junit.framework.TestFailure]
result.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
result.fErrors has only one value
result.fErrors[] == []
result.fErrors[].getClass().getName() == []
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
result.fFailures[] elements == result.fFailures[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 1
runTime == 30
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
this.fColumn == 0
test has only one value
test.getClass().getName() == junit.framework.TestSuite$1.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == 1
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 1 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn <= junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn < junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])-1
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 1
return.fFailures[] elements has only one value
return.fFailures[].getClass().getName() == [junit.framework.TestFailure]
return.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
return.fErrors has only one value
return.fErrors[] == []
return.fErrors[].getClass().getName() == []
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures[] elements == return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])-1
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 1
return.fFailures[] elements has only one value
return.fFailures[].getClass().getName() == [junit.framework.TestFailure]
return.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
return.fErrors has only one value
return.fErrors[] == []
return.fErrors[].getClass().getName() == []
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures[] elements == return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])-1
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT] == return.fFailures[junit.textui.TestRunner.FAILURE_EXIT-1]
return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT] == return.fFailures[return.fRunTests-1]
return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT] == return.fListeners[junit.textui.TestRunner.FAILURE_EXIT-1]
return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT] == return.fListeners[return.fRunTests-1]
return has only one value
return.fFailures has only one value
return.fFailures[] contains no nulls and has only one value, of length 1
return.fFailures[] elements has only one value
return.fFailures[].getClass().getName() == [junit.framework.TestFailure]
return.fFailures[].getClass().getName() elements == junit.framework.TestFailure.class
return.fErrors has only one value
return.fErrors[] == []
return.fErrors[].getClass().getName() == []
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures[] elements == return.fFailures[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.validator.daikon.NameBean.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.NameBean.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
