===========================================================================
junit.framework.Assert:::OBJECT
this has only one value
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message == null
object has only one value
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message == null
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
===========================================================================
junit.framework.TestCase:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
this.fName has only one value
this.fName != null
this.fName.toString == "testEntityImport"
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name has only one value
name.toString == "testEntityImport"
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
name.toString == "testEntityImport"
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.getName():::ENTER
===========================================================================
junit.framework.TestCase.getName():::EXIT
this.fName == return
return == orig(this.fName)
return has only one value
return.toString == "testEntityImport"
this.fName.toString == return.toString
return.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])-1
orig(result.fRunTests) == size(result.fListeners[])-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
this.fName.toString == orig(this.fName.toString)
result.fErrors[] elements == result.fErrors[result.fRunTests-1]
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.toString():::ENTER
===========================================================================
junit.framework.TestCase.toString():::EXIT
this.fName == orig(this.fName)
return has only one value
return.toString == "testEntityImport(org.apache.commons.validator.EntityImportTest)"
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestFailure:::OBJECT
this has only one value
this.fFailedTest has only one value
this.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
this.fThrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::ENTER
failedTest has only one value
failedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
thrownException has only one value
===========================================================================
junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable):::EXIT
this.fFailedTest == orig(failedTest)
this.fThrownException == orig(thrownException)
this.fFailedTest.getClass().getName() == orig(failedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.failedTest():::ENTER
===========================================================================
junit.framework.TestFailure.failedTest():::EXIT
this.fFailedTest == return
this.fThrownException == orig(this.fThrownException)
return == orig(this.fFailedTest)
return has only one value
return.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
this.fFailedTest.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.thrownException():::ENTER
===========================================================================
junit.framework.TestFailure.thrownException():::EXIT
this.fFailedTest == orig(this.fFailedTest)
this.fThrownException == return
return == orig(this.fThrownException)
return has only one value
this.fFailedTest.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestFailure.trace():::ENTER
===========================================================================
junit.framework.TestFailure.trace():::EXIT
this.fFailedTest == orig(this.fFailedTest)
this.fThrownException == orig(this.fThrownException)
return has only one value
return.toString == "org.apache.commons.logging.LogConfigurationException: java.lang.NoClassDefFoundError: org/apache/log4j/Category (Caused by java.lang.NoClassDefFoundError: org/apache/log4j/Category)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:637)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:80)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:173)\r\n\tat org.apache.commons.validator.EntityImportTest.testEntityImport(EntityImportTest.java:65)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.EntityImportTest.main(EntityImportTest.java:7)\r\nCaused by: java.lang.NoClassDefFoundError: org/apache/log4j/Category\r\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\r\n\tat java.lang.Class.privateGetDeclaredConstructors(Unknown Source)\r\n\tat java.lang.Class.getConstructor0(Unknown Source)\r\n\tat java.lang.Class.getDeclaredConstructor(Unknown Source)\r\n\tat daikon.chicory.MethodInfo.initViaReflection(MethodInfo.java:150)\r\n\tat daikon.chicory.ClassInfo.initViaReflection(ClassInfo.java:87)\r\n\tat daikon.chicory.Runtime.process_new_classes(Runtime.java:429)\r\n\tat daikon.chicory.Runtime.enter(Runtime.java:228)\r\n\tat org.apache.commons.logging.LogFactory.objectId(LogFactory.java:1787)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1146)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:914)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604)\r\n\t... 24 more\r\nCaused by: java.lang.ClassNotFoundException: org.apache.log4j.Category\r\n\tat java.net.URLClassLoader.findClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\t... 36 more\r\n"
this.fFailedTest.getClass().getName() == orig(this.fFailedTest.getClass().getName())
===========================================================================
junit.framework.TestResult$1:::OBJECT
this has only one value
this.val$test has only one value
this.val$test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
this.val$test.fName has only one value
this.val$test.fName.toString == "testEntityImport"
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
$hidden$1.fName has only one value
$hidden$1.fName.toString == "testEntityImport"
===========================================================================
junit.framework.TestResult$1.TestResult$1(junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$1)
this.val$test.fName == $hidden$1.fName
$hidden$1.fName == orig($hidden$1.fName)
$hidden$1.fName has only one value
$hidden$1.fName.toString == "testEntityImport"
this.val$test.getClass().getName() == orig($hidden$1.getClass().getName())
this.val$test.fName.toString == $hidden$1.fName.toString
$hidden$1.fName.toString == orig($hidden$1.fName.toString)
===========================================================================
junit.framework.TestResult:::OBJECT
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fErrors has only one value
this.fErrors != null
this.fErrors[] elements has only one value
this.fErrors[] elements != null
this.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
this.fErrors[].getClass().getName() one of { [], [junit.framework.TestFailure] }
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests one of { 0, 1 }
this.fStop == false
size(this.fErrors[]) one of { 0, 1 }
size(this.fListeners[]) one of { 0, 1 }
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fErrors[])
this.fRunTests <= size(this.fListeners[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fErrors[])
size(this.fFailures[]) >= size(this.fErrors[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fErrors[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
size(this.fErrors[]) <= size(this.fListeners[])
size(this.fErrors[]) >= size(this.fListeners[])-1
size(this.fErrors[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
t has only one value
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fErrors[]
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fListeners[])
this.fRunTests == size(return[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fRunTests == 1
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return[] elements == return[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fErrors[]))-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
return == size(this.fErrors[])
return == size(this.fListeners[])
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fErrors[]))-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 1
this.fErrors[] elements == this.fErrors[return-1]
this.fListeners[] elements == this.fListeners[return-1]
===========================================================================
junit.framework.TestResult.errors():::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fErrors[]))-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return has only one value
return.getClass().getName() == java.util.Vector$1.class
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])-1
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))-1
return == orig(size(this.fListeners[]))-1
this.fErrors[this.fRunTests-1] == this.fErrors[return]
this.fErrors[return] == this.fErrors[orig(this.fRunTests)-1]
this.fErrors[return] == orig(this.fErrors[post(this.fRunTests)-1])
this.fErrors[return] == orig(this.fErrors[this.fRunTests-1])
this.fListeners[this.fRunTests-1] == this.fListeners[return]
this.fListeners[return] == this.fListeners[orig(this.fRunTests)-1]
this.fListeners[return] == orig(this.fListeners[post(this.fRunTests)-1])
this.fListeners[return] == orig(this.fListeners[this.fRunTests-1])
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[return]
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fErrors[]))-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return has only one value
return.getClass().getName() == java.util.Vector$1.class
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
test.fName has only one value
test.fName.toString == "testEntityImport"
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
orig(this.fRunTests) == size(this.fFailures[])
orig(this.fRunTests) == size(this.fErrors[])-1
orig(this.fRunTests) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test.fName has only one value
test.fName.toString == "testEntityImport"
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
test.fName.toString == orig(test.fName.toString)
===========================================================================
junit.framework.TestResult.runCount():::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
return == size(this.fErrors[])
return == size(this.fListeners[])
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fErrors[]))-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 1
this.fErrors[] elements == this.fErrors[return-1]
this.fListeners[] elements == this.fListeners[return-1]
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
p has only one value
p.getClass().getName() == junit.framework.TestResult$1.class
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))-1
this.fStop == return
return == orig(this.fStop)
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
this.fFailures[] == this.fErrors[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[this.fRunTests]
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == this.fErrors[]
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(this.fRunTests) == size(this.fFailures[])
orig(this.fRunTests) == size(this.fErrors[])
orig(this.fRunTests) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT165
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT165;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fErrors == orig(this.fErrors)
this.fErrors[] == orig(this.fErrors[])
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fErrors[])-1
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fErrors[]))-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fErrors[] contains no nulls and has only one value, of length 1
this.fErrors[].getClass().getName() == [junit.framework.TestFailure]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 1
return == false
this.fErrors[] elements == this.fErrors[this.fRunTests-1]
this.fListeners[] elements == this.fListeners[this.fRunTests-1]
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite:::CLASS
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fTests != null
this.fTests[] elements != null
this.fName.toString == "org.apache.commons.validator.EntityImportTest"
size(this.fTests[]) one of { 0, 1 }
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT81
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [org.apache.commons.validator.EntityImportTest]
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fName has only one value
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[] == []
this.fTests[].getClass().getName() == []
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
orig(test) in this.fTests[]
this.fTests[] elements == orig(test)
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
names has only one value
names != null
names[] elements has only one value
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names[].getClass().getName() one of { [], [java.lang.String] }
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT111
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT115
orig(this.fTests[]) == orig(names[])
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[].getClass().getName() == [org.apache.commons.validator.EntityImportTest]
names[] contains no nulls and has only one value, of length 1
names[].getClass().getName() == [java.lang.String]
orig(m) has only one value
orig(names[]) == []
orig(names[].getClass().getName()) == []
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.Vector, java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
names[] elements has only one value
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names[].getClass().getName() one of { [], [java.lang.String] }
orig(size(names[])) one of { 0, 1 }
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
junit.framework.TestSuite.class$0 == junit.framework.TestSuite.class$1
this has only one value
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
this.fName == null
junit.framework.TestSuite.class$0 == null
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fTests == orig(this.fTests)
this.fName == orig(this.fName)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
this.fName == null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
theClass has only one value
name has only one value
name.toString == "testEntityImport"
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT144
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
name.toString == "testEntityImport"
return has only one value
return.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT177
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT185;condition="return == true"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186
return == false
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT186;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 1 })
(return == false)  ==>  (this.fTests[] elements has only one value)
(return == false)  ==>  (this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class)
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] })
(return == true)  ==>  (orig(m) has only one value)
(return == true)  ==>  (this.fTests[] == [])
(return == true)  ==>  (this.fTests[].getClass().getName() == [])
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT192;condition="return == true"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT193;condition="not(return == true)"
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
(return == false)  ==>  (size(this.fTests[]) one of { 0, 1 })
(return == false)  ==>  (this.fTests[] elements has only one value)
(return == false)  ==>  (this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class)
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] })
(return == true)  ==>  (orig(m) has only one value)
(return == true)  ==>  (this.fTests[] == [])
(return == true)  ==>  (this.fTests[].getClass().getName() == [])
this.fTests has only one value
this.fTests[] elements has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.validator.EntityImportTest.class
this.fTests[].getClass().getName() one of { [], [org.apache.commons.validator.EntityImportTest] }
this.fName has only one value
this.fName != null
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$0 != null
junit.framework.TestSuite.class$1 has only one value
junit.framework.TestSuite.class$1 != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
this.fTests[] == []
this.fTests[].getClass().getName() == []
return == true
orig(m) has only one value
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(this.fTests[])-1
size(this.fTests[]) == size(result.fListeners[])
size(this.fTests[])-1 == size(result.fFailures[])
size(this.fTests[])-1 == size(result.fErrors[])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) == 1
this.fTests[] elements == this.fTests[result.fRunTests]
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(this.fTests[]))
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(this.fTests[])-1
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])-1
orig(result.fRunTests) == size(result.fListeners[])-1
orig(result.fRunTests) == orig(size(result.fFailures[]))
orig(result.fRunTests) == orig(size(result.fErrors[]))
orig(result.fRunTests) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
result.fErrors[result.fRunTests-1] == result.fErrors[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == result.fListeners[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == orig(result.fListeners[result.fRunTests])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
this.fTests[] elements == this.fTests[result.fRunTests-1]
this.fName.toString == orig(this.fName.toString)
result.fErrors[] elements == result.fErrors[result.fRunTests-1]
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
result.fRunTests == size(this.fTests[])-1
size(this.fTests[]) == size(result.fListeners[])
size(this.fTests[])-1 == size(result.fFailures[])
size(this.fTests[])-1 == size(result.fErrors[])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) == 1
test in this.fTests[]
this.fTests[] elements == test
this.fTests[] elements == this.fTests[result.fRunTests]
test.getClass().getName() in this.fTests[].getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == size(this.fTests[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])
result.fRunTests == orig(size(this.fTests[]))
result.fRunTests == orig(size(result.fListeners[]))
result.fStop == orig(result.fStop)
orig(test) == this.fTests[result.fRunTests-1]
orig(result.fRunTests) == size(this.fTests[])-1
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])-1
orig(result.fRunTests) == size(result.fListeners[])-1
orig(result.fRunTests) == orig(size(result.fFailures[]))
orig(result.fRunTests) == orig(size(result.fErrors[]))
orig(result.fRunTests) == orig(size(result.fListeners[]))-1
this.fTests[result.fRunTests-1] == this.fTests[orig(result.fRunTests)]
this.fTests[result.fRunTests-1] == orig(this.fTests[result.fRunTests])
result.fErrors[result.fRunTests-1] == result.fErrors[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == result.fListeners[orig(result.fRunTests)]
result.fListeners[result.fRunTests-1] == orig(result.fListeners[result.fRunTests])
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 1
result.fStop == false
orig(test) in this.fTests[]
this.fTests[] elements == orig(test)
this.fTests[] elements == this.fTests[result.fRunTests-1]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
this.fName.toString == orig(this.fName.toString)
result.fErrors[] elements == result.fErrors[result.fRunTests-1]
result.fListeners[] elements == result.fListeners[result.fRunTests-1]
===========================================================================
junit.framework.TestSuite.tests():::ENTER
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.tests():::EXIT
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName == orig(this.fName)
junit.framework.TestSuite.class$0 == orig(junit.framework.TestSuite.class$0)
junit.framework.TestSuite.class$1 == orig(junit.framework.TestSuite.class$1)
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.validator.EntityImportTest] }
junit.framework.TestSuite.class$0 has only one value
junit.framework.TestSuite.class$1 has only one value
return.getClass().getName() == java.util.Vector$1.class
size(this.fTests[]) == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::ENTER
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString > line.toString
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT314
junit.runner.BaseTestRunner.fgFilterStack == return
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT314;condition="return == true"
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT316
return == false
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT316;condition="not(return == true)"
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
(return == true)  ==>  (junit.runner.BaseTestRunner.fgFilterStack == return)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString > line.toString
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
line.toString == orig(line.toString)
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT;condition="return == true"
junit.runner.BaseTestRunner.fgFilterStack == return
===========================================================================
junit.runner.BaseTestRunner.filterLine(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::ENTER
stack has only one value
stack.toString == "org.apache.commons.logging.LogConfigurationException: java.lang.NoClassDefFoundError: org/apache/log4j/Category (Caused by java.lang.NoClassDefFoundError: org/apache/log4j/Category)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:637)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:80)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:173)\r\n\tat org.apache.commons.validator.EntityImportTest.testEntityImport(EntityImportTest.java:65)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.EntityImportTest.main(EntityImportTest.java:7)\r\nCaused by: java.lang.NoClassDefFoundError: org/apache/log4j/Category\r\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\r\n\tat java.lang.Class.privateGetDeclaredConstructors(Unknown Source)\r\n\tat java.lang.Class.getConstructor0(Unknown Source)\r\n\tat java.lang.Class.getDeclaredConstructor(Unknown Source)\r\n\tat daikon.chicory.MethodInfo.initViaReflection(MethodInfo.java:150)\r\n\tat daikon.chicory.ClassInfo.initViaReflection(ClassInfo.java:87)\r\n\tat daikon.chicory.Runtime.process_new_classes(Runtime.java:429)\r\n\tat daikon.chicory.Runtime.enter(Runtime.java:228)\r\n\tat org.apache.commons.logging.LogFactory.objectId(LogFactory.java:1787)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1146)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:914)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604)\r\n\t... 24 more\r\nCaused by: java.lang.ClassNotFoundException: org.apache.log4j.Category\r\n\tat java.net.URLClassLoader.findClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\t... 36 more\r\n"
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::EXIT294
===========================================================================
junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
stack.toString == "org.apache.commons.logging.LogConfigurationException: java.lang.NoClassDefFoundError: org/apache/log4j/Category (Caused by java.lang.NoClassDefFoundError: org/apache/log4j/Category)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:637)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:80)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:173)\r\n\tat org.apache.commons.validator.EntityImportTest.testEntityImport(EntityImportTest.java:65)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:154)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:127)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\r\n\tat junit.framework.TestResult.run(TestResult.java:109)\r\n\tat junit.framework.TestCase.run(TestCase.java:118)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:208)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:203)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:72)\r\n\tat org.apache.commons.validator.daikon.EntityImportTest.main(EntityImportTest.java:7)\r\nCaused by: java.lang.NoClassDefFoundError: org/apache/log4j/Category\r\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\r\n\tat java.lang.Class.privateGetDeclaredConstructors(Unknown Source)\r\n\tat java.lang.Class.getConstructor0(Unknown Source)\r\n\tat java.lang.Class.getDeclaredConstructor(Unknown Source)\r\n\tat daikon.chicory.MethodInfo.initViaReflection(MethodInfo.java:150)\r\n\tat daikon.chicory.ClassInfo.initViaReflection(ClassInfo.java:87)\r\n\tat daikon.chicory.Runtime.process_new_classes(Runtime.java:429)\r\n\tat daikon.chicory.Runtime.enter(Runtime.java:228)\r\n\tat org.apache.commons.logging.LogFactory.objectId(LogFactory.java:1787)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1146)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:914)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604)\r\n\t... 24 more\r\nCaused by: java.lang.ClassNotFoundException: org.apache.log4j.Category\r\n\tat java.net.URLClassLoader.findClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\t... 36 more\r\n"
return has only one value
return.toString == "org.apache.commons.logging.LogConfigurationException: java.lang.NoClassDefFoundError: org/apache/log4j/Category (Caused by java.lang.NoClassDefFoundError: org/apache/log4j/Category)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:637)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:336)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.getInstance(LogFactoryImpl.java:310)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:685)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:80)\r\n\tat org.apache.commons.validator.ValidatorResources.<init>(ValidatorResources.java:173)\r\n\tat org.apache.commons.validator.EntityImportTest.testEntityImport(EntityImportTest.java:65)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat org.apache.commons.validator.daikon.EntityImportTest.main(EntityImportTest.java:7)\r\nCaused by: java.lang.NoClassDefFoundError: org/apache/log4j/Category\r\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\r\n\tat java.lang.Class.privateGetDeclaredConstructors(Unknown Source)\r\n\tat java.lang.Class.getConstructor0(Unknown Source)\r\n\tat java.lang.Class.getDeclaredConstructor(Unknown Source)\r\n\tat daikon.chicory.MethodInfo.initViaReflection(MethodInfo.java:150)\r\n\tat daikon.chicory.ClassInfo.initViaReflection(ClassInfo.java:87)\r\n\tat daikon.chicory.Runtime.process_new_classes(Runtime.java:429)\r\n\tat daikon.chicory.Runtime.enter(Runtime.java:228)\r\n\tat org.apache.commons.logging.LogFactory.objectId(LogFactory.java:1787)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.createLogFromClass(LogFactoryImpl.java:1146)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.discoverLogImplementation(LogFactoryImpl.java:914)\r\n\tat org.apache.commons.logging.impl.LogFactoryImpl.newInstance(LogFactoryImpl.java:604)\r\n\t... 24 more\r\nCaused by: java.lang.ClassNotFoundException: org.apache.log4j.Category\r\n\tat java.net.URLClassLoader.findClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\t... 36 more\r\n"
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
stack.toString == orig(stack.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key.toString one of { "filterstack", "maxmessage" }
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
key.toString one of { "filterstack", "maxmessage" }
return.toString == "true"
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
key.toString == orig(key.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT243
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::ENTER
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == return
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::ENTER
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT299
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT299;condition="not(return == true)"
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.runner.BaseTestRunner.showStackRaw():::EXIT;condition="not(return == true)"
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fColumn one of { 0, 1 }
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable):::ENTER
this.fColumn == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
t has only one value
===========================================================================
junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 1
runTime == 836
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
return has only one value
return.toString == "0.836"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
this.fColumn == 1
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fErrors[])
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fErrors[]) == size(result.fListeners[])
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 836
size(result.fErrors[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fErrors[] elements == result.fErrors[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fErrors[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fErrors[]))-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
size(result.fErrors[]) == size(result.fListeners[])
size(result.fErrors[]) == orig(size(result.fListeners[]))
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fErrors[] elements == result.fErrors[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int):::ENTER
this.fColumn == count
this.fColumn == 1
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == orig(count)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 1
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int):::ENTER
this.fColumn == count
this.fColumn == 1
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == orig(count)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 1
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):::ENTER
this.fColumn == 1
booBoo has only one value
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
booBoo.fThrownException has only one value
===========================================================================
junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
booBoo.fFailedTest == orig(booBoo.fFailedTest)
booBoo.fThrownException == orig(booBoo.fThrownException)
this.fColumn == 1
booBoo.fFailedTest has only one value
booBoo.fFailedTest.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
booBoo.fThrownException has only one value
booBoo.fFailedTest.getClass().getName() == orig(booBoo.fFailedTest.getClass().getName())
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 1
booBoos.getClass().getName() == java.util.Vector$1.class
count one of { 0, 1 }
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
type.toString == "failure"
orig(booBoos) has only one value
orig(count) == 0
orig(type) has only one value
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT63
this.fColumn == orig(count)
type.toString == "error"
orig(booBoos) has only one value
orig(type) has only one value
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
(type.toString == "error")  <==>  (orig(count) == 1)
(type.toString == "error")  <==>  (this.fColumn == orig(count))
(type.toString == "failure")  <==>  (orig(count) == 0)
this.fColumn == 1
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fErrors[])
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fErrors[]) == size(result.fListeners[])
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fErrors[] elements == result.fErrors[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fErrors[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fErrors[]))-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
size(result.fErrors[]) == size(result.fListeners[])
size(result.fErrors[]) == orig(size(result.fListeners[]))
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fErrors[] elements == result.fErrors[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fErrors[])
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fErrors[]) == size(result.fListeners[])
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fErrors[] elements == result.fErrors[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fErrors[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fErrors[]))-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
size(result.fErrors[]) == size(result.fListeners[])
size(result.fErrors[]) == orig(size(result.fListeners[]))
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fErrors[] elements == result.fErrors[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this == result.fListeners[this.fColumn-1]
this.fColumn == result.fRunTests
this.fColumn == size(result.fErrors[])
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fErrors[]) == size(result.fListeners[])
this.fColumn == 1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fErrors[] elements == result.fErrors[this.fColumn-1]
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
this.fColumn == size(result.fErrors[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fErrors == orig(result.fErrors)
result.fErrors[] == orig(result.fErrors[])
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(this) == result.fListeners[this.fColumn-1]
size(result.fFailures[]) == size(result.fErrors[])-1
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fErrors[]))-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
size(result.fErrors[]) == size(result.fListeners[])
size(result.fErrors[]) == orig(size(result.fListeners[]))
this.fColumn == 1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fErrors has only one value
result.fErrors[] contains no nulls and has only one value, of length 1
result.fErrors[] elements has only one value
result.fErrors[].getClass().getName() == [junit.framework.TestFailure]
result.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fErrors[]) == 1
result.fErrors[] elements == result.fErrors[this.fColumn-1]
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
result.fListeners[] elements == result.fListeners[this.fColumn-1]
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 1
runTime == 836
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 1
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
this.fColumn == 0
test has only one value
test.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == 1
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 1 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn <= junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn < junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fErrors[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
size(return.fFailures[]) == size(return.fErrors[])-1
size(return.fFailures[]) == size(return.fListeners[])-1
size(return.fErrors[]) == size(return.fListeners[])
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fErrors[] contains no nulls and has only one value, of length 1
return.fErrors[] elements has only one value
return.fErrors[].getClass().getName() == [junit.framework.TestFailure]
return.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
size(return.fErrors[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fErrors[] elements == return.fErrors[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fErrors[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fStop == orig(wait)
size(return.fFailures[]) == size(return.fErrors[])-1
size(return.fFailures[]) == size(return.fListeners[])-1
size(return.fErrors[]) == size(return.fListeners[])
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fErrors[] contains no nulls and has only one value, of length 1
return.fErrors[] elements has only one value
return.fErrors[].getClass().getName() == [junit.framework.TestFailure]
return.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
size(return.fErrors[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fErrors[] elements == return.fErrors[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.FAILURE_EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == return.fRunTests
junit.textui.TestRunner.FAILURE_EXIT == size(return.fErrors[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
size(return.fFailures[]) == size(return.fErrors[])-1
size(return.fFailures[]) == size(return.fListeners[])-1
size(return.fErrors[]) == size(return.fListeners[])
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fErrors has only one value
return.fErrors[] contains no nulls and has only one value, of length 1
return.fErrors[] elements has only one value
return.fErrors[].getClass().getName() == [junit.framework.TestFailure]
return.fErrors[].getClass().getName() elements == junit.framework.TestFailure.class
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fStop == false
size(return.fErrors[]) == 1
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fErrors[] elements == return.fErrors[junit.textui.TestRunner.SUCCESS_EXIT]
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.logging.LogConfigurationException:::OBJECT
this has only one value
this.cause has only one value
===========================================================================
org.apache.commons.logging.LogConfigurationException.LogConfigurationException(java.lang.String, java.lang.Throwable):::ENTER
message has only one value
message.toString == "java.lang.NoClassDefFoundError: org/apache/log4j/Category"
cause has only one value
===========================================================================
org.apache.commons.logging.LogConfigurationException.LogConfigurationException(java.lang.String, java.lang.Throwable):::EXIT
this.cause == orig(cause)
message.toString == "java.lang.NoClassDefFoundError: org/apache/log4j/Category"
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.logging.LogConfigurationException.LogConfigurationException(java.lang.Throwable):::ENTER
cause has only one value
===========================================================================
org.apache.commons.logging.LogConfigurationException.LogConfigurationException(java.lang.Throwable):::EXIT
this.cause == orig(cause)
===========================================================================
org.apache.commons.logging.LogConfigurationException.getCause():::ENTER
===========================================================================
org.apache.commons.logging.LogConfigurationException.getCause():::EXIT
this.cause == return
return == orig(this.cause)
return has only one value
===========================================================================
org.apache.commons.logging.LogFactory$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.logging.LogFactory$1.LogFactory$1():::EXIT
===========================================================================
org.apache.commons.logging.LogFactory$1.run():::ENTER
===========================================================================
org.apache.commons.logging.LogFactory$1.run():::EXIT
return has only one value
return.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.logging.LogFactory$2:::OBJECT
this has only one value
this.val$factoryClass has only one value
this.val$factoryClass.toString == "org.apache.commons.logging.impl.LogFactoryImpl"
this.val$classLoader has only one value
this.val$classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.logging.LogFactory$2.LogFactory$2(java.lang.String, java.lang.ClassLoader):::ENTER
val$factoryClass has only one value
val$factoryClass.toString == "org.apache.commons.logging.impl.LogFactoryImpl"
val$classLoader has only one value
val$classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.logging.LogFactory$2.LogFactory$2(java.lang.String, java.lang.ClassLoader):::EXIT
this.val$factoryClass == orig(val$factoryClass)
this.val$classLoader == orig(val$classLoader)
val$factoryClass.toString == "org.apache.commons.logging.impl.LogFactoryImpl"
this.val$factoryClass.toString == val$factoryClass.toString
this.val$classLoader.getClass().getName() == orig(val$classLoader.getClass().getName())
val$factoryClass.toString == orig(val$factoryClass.toString)
===========================================================================
org.apache.commons.logging.LogFactory$2.run():::ENTER
===========================================================================
org.apache.commons.logging.LogFactory$2.run():::EXIT
this.val$factoryClass == orig(this.val$factoryClass)
this.val$classLoader == orig(this.val$classLoader)
return has only one value
return.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
this.val$factoryClass.toString == orig(this.val$factoryClass.toString)
this.val$classLoader.getClass().getName() == orig(this.val$classLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory$3:::OBJECT
this has only one value
this.val$loader has only one value
this.val$loader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
this.val$name has only one value
this.val$name.toString == "META-INF/services/org.apache.commons.logging.LogFactory"
===========================================================================
org.apache.commons.logging.LogFactory$3.LogFactory$3(java.lang.ClassLoader, java.lang.String):::ENTER
val$loader has only one value
val$loader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
val$name has only one value
val$name.toString == "META-INF/services/org.apache.commons.logging.LogFactory"
===========================================================================
org.apache.commons.logging.LogFactory$3.LogFactory$3(java.lang.ClassLoader, java.lang.String):::EXIT
this.val$loader == orig(val$loader)
this.val$name == orig(val$name)
val$name.toString == "META-INF/services/org.apache.commons.logging.LogFactory"
this.val$loader.getClass().getName() == orig(val$loader.getClass().getName())
this.val$name.toString == val$name.toString
val$name.toString == orig(val$name.toString)
===========================================================================
org.apache.commons.logging.LogFactory$3.run():::ENTER
===========================================================================
org.apache.commons.logging.LogFactory$3.run():::EXIT1359
===========================================================================
org.apache.commons.logging.LogFactory$3.run():::EXIT
this.val$loader == orig(this.val$loader)
this.val$name == orig(this.val$name)
return == null
this.val$loader.getClass().getName() == orig(this.val$loader.getClass().getName())
this.val$name.toString == orig(this.val$name.toString)
===========================================================================
org.apache.commons.logging.LogFactory$4:::OBJECT
this has only one value
this.val$loader has only one value
this.val$loader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
this.val$name has only one value
this.val$name.toString == "commons-logging.properties"
===========================================================================
org.apache.commons.logging.LogFactory$4.LogFactory$4(java.lang.ClassLoader, java.lang.String):::ENTER
val$loader has only one value
val$loader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
val$name has only one value
val$name.toString == "commons-logging.properties"
===========================================================================
org.apache.commons.logging.LogFactory$4.LogFactory$4(java.lang.ClassLoader, java.lang.String):::EXIT
this.val$loader == orig(val$loader)
this.val$name == orig(val$name)
val$name.toString == "commons-logging.properties"
this.val$loader.getClass().getName() == orig(val$loader.getClass().getName())
this.val$name.toString == val$name.toString
val$name.toString == orig(val$name.toString)
===========================================================================
org.apache.commons.logging.LogFactory$4.run():::ENTER
===========================================================================
org.apache.commons.logging.LogFactory$4.run():::EXIT1388
===========================================================================
org.apache.commons.logging.LogFactory$4.run():::EXIT
this.val$loader == orig(this.val$loader)
this.val$name == orig(this.val$name)
return has only one value
return.getClass().getName() == sun.misc.CompoundEnumeration.class
this.val$loader.getClass().getName() == orig(this.val$loader.getClass().getName())
this.val$name.toString == orig(this.val$name.toString)
===========================================================================
org.apache.commons.logging.LogFactory$6:::OBJECT
this.val$key.toString one of { "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.LogFactory.HashtableImpl", "org.apache.commons.logging.diagnostics.dest" }
this.val$def == null
===========================================================================
org.apache.commons.logging.LogFactory$6.LogFactory$6(java.lang.String, java.lang.String):::ENTER
val$key.toString one of { "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.LogFactory.HashtableImpl", "org.apache.commons.logging.diagnostics.dest" }
val$def == null
===========================================================================
org.apache.commons.logging.LogFactory$6.LogFactory$6(java.lang.String, java.lang.String):::EXIT
this.val$key == orig(val$key)
this.val$def == orig(val$def)
val$key.toString one of { "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.LogFactory.HashtableImpl", "org.apache.commons.logging.diagnostics.dest" }
this.val$key.toString == val$key.toString
val$key.toString == orig(val$key.toString)
===========================================================================
org.apache.commons.logging.LogFactory$6.run():::ENTER
===========================================================================
org.apache.commons.logging.LogFactory$6.run():::EXIT
this.val$key == orig(this.val$key)
this.val$def == return
this.val$def == orig(this.val$def)
return == null
this.val$key.toString == orig(this.val$key.toString)
===========================================================================
org.apache.commons.logging.LogFactory:::CLASS
org.apache.commons.logging.LogFactory.PRIORITY_KEY has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == "priority"
org.apache.commons.logging.LogFactory.TCCL_KEY has only one value
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == "use_tccl"
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY has only one value
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == "org.apache.commons.logging.LogFactory"
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT has only one value
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == "org.apache.commons.logging.impl.LogFactoryImpl"
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES has only one value
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == "commons-logging.properties"
org.apache.commons.logging.LogFactory.SERVICE_ID has only one value
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == "META-INF/services/org.apache.commons.logging.LogFactory"
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY has only one value
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == "org.apache.commons.logging.diagnostics.dest"
org.apache.commons.logging.LogFactory.diagnosticsStream == null
org.apache.commons.logging.LogFactory.diagnosticPrefix == null
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY has only one value
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == "org.apache.commons.logging.LogFactory.HashtableImpl"
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME has only one value
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == "org.apache.commons.logging.impl.WeakHashtable"
org.apache.commons.logging.LogFactory.thisClassLoader has only one value
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.apache.commons.logging.LogFactory.factories has only one value
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == null
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
===========================================================================
org.apache.commons.logging.LogFactory:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
===========================================================================
org.apache.commons.logging.LogFactory.LogFactory():::EXIT
===========================================================================
org.apache.commons.logging.LogFactory.cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory):::ENTER
org.apache.commons.logging.LogFactory.thisClassLoader == classLoader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
factory has only one value
factory.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == classLoader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(classLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.class$(java.lang.String):::ENTER
org.apache.commons.logging.LogFactory.class$java$lang$Thread == null
x0.toString one of { "java.lang.Thread", "org.apache.commons.logging.LogFactory" }
===========================================================================
org.apache.commons.logging.LogFactory.class$(java.lang.String):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == null
x0.toString one of { "java.lang.Thread", "org.apache.commons.logging.LogFactory" }
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
x0.toString == orig(x0.toString)
===========================================================================
org.apache.commons.logging.LogFactory.createFactory(java.lang.String, java.lang.ClassLoader):::ENTER
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == factoryClass
org.apache.commons.logging.LogFactory.thisClassLoader == classLoader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == factoryClass.toString
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == classLoader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.createFactory(java.lang.String, java.lang.ClassLoader):::EXIT1160
===========================================================================
org.apache.commons.logging.LogFactory.createFactory(java.lang.String, java.lang.ClassLoader):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(factoryClass)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(classLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return has only one value
return.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == factoryClass.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(factoryClass.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.createFactoryStore():::EXIT
return has only one value
===========================================================================
org.apache.commons.logging.LogFactory.directGetContextClassLoader():::ENTER
===========================================================================
org.apache.commons.logging.LogFactory.directGetContextClassLoader():::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getCachedFactory(java.lang.ClassLoader):::ENTER
org.apache.commons.logging.LogFactory.thisClassLoader == contextClassLoader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == contextClassLoader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.getCachedFactory(java.lang.ClassLoader):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(contextClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == return
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(contextClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getClassLoader(java.lang.Class):::ENTER
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
===========================================================================
org.apache.commons.logging.LogFactory.getClassLoader(java.lang.Class):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return has only one value
return.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getConfigurationFile(java.lang.ClassLoader, java.lang.String):::ENTER
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == fileName
org.apache.commons.logging.LogFactory.thisClassLoader == classLoader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == fileName.toString
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == classLoader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.getConfigurationFile(java.lang.ClassLoader, java.lang.String):::EXIT1544
===========================================================================
org.apache.commons.logging.LogFactory.getConfigurationFile(java.lang.ClassLoader, java.lang.String):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(fileName)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(classLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return == null
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == fileName.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(fileName.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getContextClassLoaderInternal():::ENTER
org.apache.commons.logging.LogFactory.class$java$lang$Thread == null
===========================================================================
org.apache.commons.logging.LogFactory.getContextClassLoaderInternal():::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getFactory():::ENTER
org.apache.commons.logging.LogFactory.class$java$lang$Thread == null
===========================================================================
org.apache.commons.logging.LogFactory.getFactory():::EXIT669
===========================================================================
org.apache.commons.logging.LogFactory.getFactory():::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return has only one value
return.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getResourceAsStream(java.lang.ClassLoader, java.lang.String):::ENTER
org.apache.commons.logging.LogFactory.SERVICE_ID == name
org.apache.commons.logging.LogFactory.thisClassLoader == loader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == name.toString
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == loader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.getResourceAsStream(java.lang.ClassLoader, java.lang.String):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(name)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(loader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return == null
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == name.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(name.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(loader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getResources(java.lang.ClassLoader, java.lang.String):::ENTER
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == name
org.apache.commons.logging.LogFactory.thisClassLoader == loader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == name.toString
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == loader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.getResources(java.lang.ClassLoader, java.lang.String):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(name)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(loader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return has only one value
return.getClass().getName() == sun.misc.CompoundEnumeration.class
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == name.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(name.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(loader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.getSystemProperty(java.lang.String, java.lang.String):::ENTER
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == key
org.apache.commons.logging.LogFactory.diagnosticPrefix == def
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
key.toString one of { "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.LogFactory.HashtableImpl", "org.apache.commons.logging.diagnostics.dest" }
def == null
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == key.toString
===========================================================================
org.apache.commons.logging.LogFactory.getSystemProperty(java.lang.String, java.lang.String):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(key)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == return
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
return == orig(def)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
key.toString one of { "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.LogFactory.HashtableImpl", "org.apache.commons.logging.diagnostics.dest" }
return == null
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == key.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
key.toString == orig(key.toString)
===========================================================================
org.apache.commons.logging.LogFactory.isDiagnosticsEnabled():::ENTER
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
===========================================================================
org.apache.commons.logging.LogFactory.isDiagnosticsEnabled():::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return == false
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.isDiagnosticsEnabled():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.logging.LogFactory.logClassLoaderEnvironment(java.lang.Class):::ENTER
clazz has only one value
===========================================================================
org.apache.commons.logging.LogFactory.logClassLoaderEnvironment(java.lang.Class):::EXIT1694
===========================================================================
org.apache.commons.logging.LogFactory.logClassLoaderEnvironment(java.lang.Class):::EXIT
===========================================================================
org.apache.commons.logging.LogFactory.newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader):::ENTER
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == factoryClass
org.apache.commons.logging.LogFactory.thisClassLoader == classLoader
org.apache.commons.logging.LogFactory.thisClassLoader == contextClassLoader
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == factoryClass.toString
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == classLoader.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == contextClassLoader.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(factoryClass)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(classLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(contextClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return has only one value
return.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == factoryClass.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(factoryClass.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(classLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(contextClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.LogFactory.objectId(java.lang.Object):::ENTER
org.apache.commons.logging.LogFactory.thisClassLoader == o
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
o has only one value
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == o.getClass().getName()
===========================================================================
org.apache.commons.logging.LogFactory.objectId(java.lang.Object):::EXIT1790
===========================================================================
org.apache.commons.logging.LogFactory.objectId(java.lang.Object):::EXIT
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(o)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
return.toString == "sun.misc.Launcher$AppClassLoader@414493378"
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(o.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$1.LogFactoryImpl$1():::EXIT
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$1.run():::ENTER
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$1.run():::EXIT
return has only one value
return.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$2:::OBJECT
this.val$def == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$2.LogFactoryImpl$2(java.lang.String, java.lang.String):::ENTER
val$def == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$2.LogFactoryImpl$2(java.lang.String, java.lang.String):::EXIT
this.val$key == orig(val$key)
this.val$def == orig(val$def)
this.val$key.toString == val$key.toString
val$key.toString == orig(val$key.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$2.run():::ENTER
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl$2.run():::EXIT
this.val$key == orig(this.val$key)
this.val$def == return
this.val$def == orig(this.val$def)
return == null
this.val$key.toString == orig(this.val$key.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl:::CLASS
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == "org.apache.commons.logging.impl.Log4JLogger"
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == "org.apache.commons.logging.impl.Jdk14Logger"
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == "org.apache.commons.logging.impl.Jdk13LumberjackLogger"
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == "org.apache.commons.logging.impl.SimpleLog"
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL has only one value
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == "org.apache.commons.logging.impl."
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == 32
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == "org.apache.commons.logging.Log"
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == "org.apache.commons.logging.log"
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY has only one value
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == "org.apache.commons.logging.Log.allowFlawedContext"
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY has only one value
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == "org.apache.commons.logging.Log.allowFlawedDiscovery"
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY has only one value
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == "org.apache.commons.logging.Log.allowFlawedHierarchy"
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover has only one value
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == java.lang.String[].class
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] contains no nulls and has only one value, of length 4
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] elements != null
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].getClass().getName() elements == java.lang.String.class
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].toString == [org.apache.commons.logging.impl.Log4JLogger, org.apache.commons.logging.impl.Jdk14Logger, org.apache.commons.logging.impl.Jdk13LumberjackLogger, org.apache.commons.logging.impl.SimpleLog]
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == null
org.apache.commons.logging.LogFactory.PRIORITY_KEY has only one value
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == "priority"
org.apache.commons.logging.LogFactory.TCCL_KEY has only one value
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == "use_tccl"
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY has only one value
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == "org.apache.commons.logging.LogFactory"
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT has only one value
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == "org.apache.commons.logging.impl.LogFactoryImpl"
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES has only one value
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == "commons-logging.properties"
org.apache.commons.logging.LogFactory.SERVICE_ID has only one value
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == "META-INF/services/org.apache.commons.logging.LogFactory"
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY has only one value
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == "org.apache.commons.logging.diagnostics.dest"
org.apache.commons.logging.LogFactory.diagnosticsStream == null
org.apache.commons.logging.LogFactory.diagnosticPrefix == null
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY has only one value
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == "org.apache.commons.logging.LogFactory.HashtableImpl"
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME has only one value
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == "org.apache.commons.logging.impl.WeakHashtable"
org.apache.commons.logging.LogFactory.thisClassLoader has only one value
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.apache.commons.logging.LogFactory.factories has only one value
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == null
org.apache.commons.logging.LogFactory.class$java$lang$Thread has only one value
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory has only one value
size(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[]) == 4
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[]
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[]
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[]
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[]
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString in org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[].toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() != org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName()
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString > org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.TCCL_KEY.toString > org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.SERVICE_ID.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString > org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl:::OBJECT
this.logClassName == org.apache.commons.logging.LogFactory.diagnosticPrefix
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
size(this.logConstructorSignature[]) == size(this.logMethodSignature[])
this has only one value
this.useTCCL == true
this.diagnosticPrefix.toString == "[LogFactoryImpl@102103410 from sun.misc.Launcher$AppClassLoader@414493378] "
this.attributes has only one value
this.instances has only one value
this.logConstructor == null
this.logConstructorSignature has only one value
this.logConstructorSignature.getClass().getName() == java.lang.Class[].class
this.logConstructorSignature[] contains no nulls and has only one value, of length 1
this.logConstructorSignature[] elements has only one value
this.logConstructorSignature[] elements != null
this.logConstructorSignature[].getClass().getName() == [java.lang.Class]
this.logConstructorSignature[].getClass().getName() elements == java.lang.Class.class
this.logMethod == null
this.logMethodSignature has only one value
this.logMethodSignature[] contains no nulls and has only one value, of length 1
this.logMethodSignature[] elements has only one value
this.logMethodSignature[] elements != null
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
size(this.logConstructorSignature[]) == 1
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString > this.diagnosticPrefix.toString
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() != this.logConstructorSignature.getClass().getName()
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.TCCL_KEY.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString
this.diagnosticPrefix.toString > org.apache.commons.logging.LogFactory.SERVICE_ID.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString
this.diagnosticPrefix.toString < org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString
this.logConstructorSignature.getClass().getName() == this.logMethodSignature.getClass().getName()
this.logConstructorSignature.getClass().getName() != org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName()
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String in this.logConstructorSignature[]
this.logConstructorSignature[] elements == org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory in this.logMethodSignature[]
this.logMethodSignature[] elements == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.LogFactoryImpl():::EXIT
this.allowFlawedContext == this.allowFlawedDiscovery
this.allowFlawedContext == this.allowFlawedHierarchy
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
this.allowFlawedContext == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.access$000():::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.access$000():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.class$(java.lang.String):::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
x0.toString one of { "java.lang.String", "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.impl.LogFactoryImpl" }
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.class$(java.lang.String):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
x0.toString one of { "java.lang.String", "org.apache.commons.logging.LogFactory", "org.apache.commons.logging.impl.LogFactoryImpl" }
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
x0.toString == orig(x0.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.findUserSpecifiedLogClassName():::ENTER
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.findUserSpecifiedLogClassName():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
this.useTCCL == orig(this.useTCCL)
this.useTCCL == orig(this.allowFlawedContext)
this.useTCCL == orig(this.allowFlawedDiscovery)
this.useTCCL == orig(this.allowFlawedHierarchy)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == return
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getAttribute(java.lang.String):::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getAttribute(java.lang.String):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == orig(this.useTCCL)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == return
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == return
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
this.allowFlawedContext == orig(this.allowFlawedContext)
this.allowFlawedDiscovery == orig(this.allowFlawedDiscovery)
this.allowFlawedHierarchy == orig(this.allowFlawedHierarchy)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == return
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == return
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == return
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == return
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
return == null
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBaseClassLoader():::ENTER
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBaseClassLoader():::EXIT1298
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBaseClassLoader():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
this.useTCCL == orig(this.useTCCL)
this.useTCCL == orig(this.allowFlawedContext)
this.useTCCL == orig(this.allowFlawedDiscovery)
this.useTCCL == orig(this.allowFlawedHierarchy)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBooleanConfiguration(java.lang.String, boolean):::ENTER
this.useTCCL == dflt
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
this.allowFlawedHierarchy == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
key.toString one of { "org.apache.commons.logging.Log.allowFlawedContext", "org.apache.commons.logging.Log.allowFlawedDiscovery", "org.apache.commons.logging.Log.allowFlawedHierarchy" }
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBooleanConfiguration(java.lang.String, boolean):::EXIT811
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBooleanConfiguration(java.lang.String, boolean):::EXIT811;condition="return == true"
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBooleanConfiguration(java.lang.String, boolean):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == return
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
this.allowFlawedContext == orig(this.allowFlawedContext)
this.allowFlawedDiscovery == orig(this.allowFlawedDiscovery)
this.allowFlawedHierarchy == orig(this.allowFlawedHierarchy)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
return == orig(this.useTCCL)
return == orig(dflt)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
this.allowFlawedHierarchy == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
key.toString one of { "org.apache.commons.logging.Log.allowFlawedContext", "org.apache.commons.logging.Log.allowFlawedDiscovery", "org.apache.commons.logging.Log.allowFlawedHierarchy" }
return == true
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
key.toString == orig(key.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getBooleanConfiguration(java.lang.String, boolean):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getClassLoader(java.lang.Class):::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
clazz has only one value
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getClassLoader(java.lang.Class):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getConfigurationValue(java.lang.String):::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
this.allowFlawedHierarchy == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
property.toString one of { "org.apache.commons.logging.Log.allowFlawedContext", "org.apache.commons.logging.Log.allowFlawedDiscovery", "org.apache.commons.logging.Log.allowFlawedHierarchy" }
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getConfigurationValue(java.lang.String):::EXIT801
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getConfigurationValue(java.lang.String):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == orig(this.useTCCL)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
this.allowFlawedContext == orig(this.allowFlawedContext)
this.allowFlawedDiscovery == orig(this.allowFlawedDiscovery)
this.allowFlawedHierarchy == orig(this.allowFlawedHierarchy)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == return
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
this.allowFlawedHierarchy == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
property.toString one of { "org.apache.commons.logging.Log.allowFlawedContext", "org.apache.commons.logging.Log.allowFlawedDiscovery", "org.apache.commons.logging.Log.allowFlawedHierarchy" }
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getContextClassLoaderInternal():::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getContextClassLoaderInternal():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader):::ENTER
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
org.apache.commons.logging.LogFactory.thisClassLoader == c1
org.apache.commons.logging.LogFactory.thisClassLoader == c2
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == c1.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == c2.getClass().getName()
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader):::EXIT1326
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
this.useTCCL == orig(this.useTCCL)
this.useTCCL == orig(this.allowFlawedContext)
this.useTCCL == orig(this.allowFlawedDiscovery)
this.useTCCL == orig(this.allowFlawedHierarchy)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == return
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(c1)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(c2)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == return.getClass().getName()
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(c1.getClass().getName())
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(c2.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getSystemProperty(java.lang.String, java.lang.String):::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.LogFactory.diagnosticPrefix == def
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.getSystemProperty(java.lang.String, java.lang.String):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == return
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(def)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
key.toString == orig(key.toString)
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.initConfiguration():::ENTER
this.allowFlawedContext == this.allowFlawedDiscovery
this.allowFlawedContext == this.allowFlawedHierarchy
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.diagnosticPrefix has only one value
this.allowFlawedContext == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.initConfiguration():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
this.useTCCL == orig(this.useTCCL)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.initDiagnostics():::ENTER
this.diagnosticPrefix == org.apache.commons.logging.LogFactory.diagnosticPrefix
this.allowFlawedContext == this.allowFlawedDiscovery
this.allowFlawedContext == this.allowFlawedHierarchy
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
this.allowFlawedContext == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.initDiagnostics():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == orig(this.useTCCL)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
this.allowFlawedContext == this.allowFlawedDiscovery
this.allowFlawedContext == this.allowFlawedHierarchy
this.allowFlawedContext == orig(this.allowFlawedContext)
this.allowFlawedContext == orig(this.allowFlawedDiscovery)
this.allowFlawedContext == orig(this.allowFlawedHierarchy)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.diagnosticPrefix)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
this.allowFlawedContext == false
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == null
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.isDiagnosticsEnabled():::ENTER
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.isDiagnosticsEnabled():::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory has only one value
return == false
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.isDiagnosticsEnabled():::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.logDiagnostic(java.lang.String):::ENTER
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
msg has only one value
msg.toString == "Trying to load 'org.apache.commons.logging.impl.Log4JLogger' from classloader sun.misc.Launcher$AppClassLoader@414493378"
===========================================================================
org.apache.commons.logging.impl.LogFactoryImpl.logDiagnostic(java.lang.String):::EXIT
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_LEN)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[] == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover[])
this.useTCCL == this.allowFlawedContext
this.useTCCL == this.allowFlawedDiscovery
this.useTCCL == this.allowFlawedHierarchy
this.useTCCL == orig(this.useTCCL)
this.useTCCL == orig(this.allowFlawedContext)
this.useTCCL == orig(this.allowFlawedDiscovery)
this.useTCCL == orig(this.allowFlawedHierarchy)
this.diagnosticPrefix == orig(this.diagnosticPrefix)
this.attributes == orig(this.attributes)
this.instances == orig(this.instances)
this.logConstructor == orig(this.logConstructor)
this.logConstructorSignature == orig(this.logConstructorSignature)
this.logConstructorSignature[] == orig(this.logConstructorSignature[])
this.logMethod == orig(this.logMethod)
this.logMethodSignature == orig(this.logMethodSignature)
this.logMethodSignature[] == orig(this.logMethodSignature[])
org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$java$lang$String)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$LogFactory == orig(org.apache.commons.logging.LogFactory.class$org$apache$commons$logging$LogFactory)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl)
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log == orig(org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$Log)
org.apache.commons.logging.LogFactory.PRIORITY_KEY == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY)
org.apache.commons.logging.LogFactory.TCCL_KEY == orig(org.apache.commons.logging.LogFactory.TCCL_KEY)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES)
org.apache.commons.logging.LogFactory.SERVICE_ID == orig(org.apache.commons.logging.LogFactory.SERVICE_ID)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY)
org.apache.commons.logging.LogFactory.diagnosticsStream == orig(org.apache.commons.logging.LogFactory.diagnosticsStream)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(this.logClassName)
org.apache.commons.logging.LogFactory.diagnosticPrefix == orig(org.apache.commons.logging.LogFactory.diagnosticPrefix)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME)
org.apache.commons.logging.LogFactory.thisClassLoader == orig(org.apache.commons.logging.LogFactory.thisClassLoader)
org.apache.commons.logging.LogFactory.factories == orig(org.apache.commons.logging.LogFactory.factories)
org.apache.commons.logging.LogFactory.nullClassLoaderFactory == orig(org.apache.commons.logging.LogFactory.nullClassLoaderFactory)
org.apache.commons.logging.LogFactory.class$java$lang$Thread == orig(org.apache.commons.logging.LogFactory.class$java$lang$Thread)
size(this.logConstructorSignature[]) == orig(size(this.logMethodSignature[]))
this.diagnosticPrefix has only one value
org.apache.commons.logging.impl.LogFactoryImpl.class$org$apache$commons$logging$impl$LogFactoryImpl has only one value
msg.toString == "Trying to load 'org.apache.commons.logging.impl.Log4JLogger' from classloader sun.misc.Launcher$AppClassLoader@414493378"
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LOG4J_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_JDK14_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_LUMBERJACK_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOGGING_IMPL_SIMPLE_LOGGER.toString)
org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.PKG_IMPL.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.LOG_PROPERTY_OLD.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_CONTEXT_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_DISCOVERY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString == orig(org.apache.commons.logging.impl.LogFactoryImpl.ALLOW_FLAWED_HIERARCHY_PROPERTY.toString)
org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName() == orig(org.apache.commons.logging.impl.LogFactoryImpl.classesToDiscover.getClass().getName())
this.diagnosticPrefix.toString == orig(this.diagnosticPrefix.toString)
this.logConstructorSignature.getClass().getName() == orig(this.logConstructorSignature.getClass().getName())
this.logConstructorSignature.getClass().getName() == orig(this.logMethodSignature.getClass().getName())
org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString == orig(org.apache.commons.logging.LogFactory.PRIORITY_KEY.toString)
org.apache.commons.logging.LogFactory.TCCL_KEY.toString == orig(org.apache.commons.logging.LogFactory.TCCL_KEY.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTY.toString)
org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_DEFAULT.toString)
org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString == orig(org.apache.commons.logging.LogFactory.FACTORY_PROPERTIES.toString)
org.apache.commons.logging.LogFactory.SERVICE_ID.toString == orig(org.apache.commons.logging.LogFactory.SERVICE_ID.toString)
org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.DIAGNOSTICS_DEST_PROPERTY.toString)
org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString == orig(org.apache.commons.logging.LogFactory.HASHTABLE_IMPLEMENTATION_PROPERTY.toString)
org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString == orig(org.apache.commons.logging.LogFactory.WEAK_HASHTABLE_CLASSNAME.toString)
org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName() == orig(org.apache.commons.logging.LogFactory.thisClassLoader.getClass().getName())
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced:::OBJECT
this.hashCode == 414493378
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object):::ENTER
referant has only one value
referant.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object):::EXIT
this.reference has only one value
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object, java.lang.ref.ReferenceQueue):::ENTER
key has only one value
key.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
queue has only one value
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object, java.lang.ref.ReferenceQueue):::EXIT
this.reference has only one value
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object, java.lang.ref.ReferenceQueue, org.apache.commons.logging.impl.WeakHashtable$1):::ENTER
x0 has only one value
x0.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
x1 has only one value
x2 == null
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object, java.lang.ref.ReferenceQueue, org.apache.commons.logging.impl.WeakHashtable$1):::EXIT
this.reference has only one value
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object, org.apache.commons.logging.impl.WeakHashtable$1):::ENTER
x0 has only one value
x0.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
x1 == null
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.Referenced(java.lang.Object, org.apache.commons.logging.impl.WeakHashtable$1):::EXIT
this.reference has only one value
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.hashCode():::ENTER
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$Referenced.hashCode():::EXIT
this.reference == orig(this.reference)
this.hashCode == return
return == orig(this.hashCode)
return == 414493378
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$WeakKey:::OBJECT
this has only one value
this.referenced has only one value
this.referenced.reference == null
this.referenced.hashCode == 0
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$WeakKey.WeakKey(java.lang.Object, java.lang.ref.ReferenceQueue, org.apache.commons.logging.impl.WeakHashtable$Referenced):::ENTER
key has only one value
key.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
queue has only one value
referenced has only one value
referenced.reference == null
referenced.hashCode == 0
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$WeakKey.WeakKey(java.lang.Object, java.lang.ref.ReferenceQueue, org.apache.commons.logging.impl.WeakHashtable$Referenced):::EXIT
this.referenced == orig(referenced)
this.referenced.reference == referenced.reference
this.referenced.hashCode == referenced.hashCode
referenced.reference == orig(referenced.reference)
referenced.hashCode == orig(referenced.hashCode)
referenced.reference == null
referenced.hashCode == 0
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$WeakKey.WeakKey(java.lang.Object, java.lang.ref.ReferenceQueue, org.apache.commons.logging.impl.WeakHashtable$Referenced, org.apache.commons.logging.impl.WeakHashtable$1):::ENTER
x0 has only one value
x0.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
x1 has only one value
x2 has only one value
x2.reference == null
x2.hashCode == 0
x3 == null
===========================================================================
org.apache.commons.logging.impl.WeakHashtable$WeakKey.WeakKey(java.lang.Object, java.lang.ref.ReferenceQueue, org.apache.commons.logging.impl.WeakHashtable$Referenced, org.apache.commons.logging.impl.WeakHashtable$1):::EXIT
this.referenced == orig(x2)
this.referenced.reference == x2.reference
this.referenced.hashCode == x2.hashCode
x2.reference == orig(x2.reference)
x2.hashCode == orig(x2.hashCode)
x2.reference == null
x2.hashCode == 0
===========================================================================
org.apache.commons.logging.impl.WeakHashtable:::CLASS
===========================================================================
org.apache.commons.logging.impl.WeakHashtable:::OBJECT
this has only one value
this.queue has only one value
this.changeCount one of { 0, 1 }
===========================================================================
org.apache.commons.logging.impl.WeakHashtable.WeakHashtable():::EXIT
this.changeCount == 0
===========================================================================
org.apache.commons.logging.impl.WeakHashtable.get(java.lang.Object):::ENTER
this.changeCount == 0
key has only one value
key.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.logging.impl.WeakHashtable.get(java.lang.Object):::EXIT
this.queue == orig(this.queue)
this.changeCount == orig(this.changeCount)
this.changeCount == 0
return == null
===========================================================================
org.apache.commons.logging.impl.WeakHashtable.put(java.lang.Object, java.lang.Object):::ENTER
this.changeCount == 0
key has only one value
key.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
value has only one value
value.getClass().getName() == org.apache.commons.logging.impl.LogFactoryImpl.class
===========================================================================
org.apache.commons.logging.impl.WeakHashtable.put(java.lang.Object, java.lang.Object):::EXIT
this.queue == orig(this.queue)
this.changeCount == 1
return == null
===========================================================================
org.apache.commons.validator.EntityImportTest:::OBJECT
this has only one value
this.resources == null
this.fName has only one value
this.fName.toString == "testEntityImport"
===========================================================================
org.apache.commons.validator.EntityImportTest.EntityImportTest(java.lang.String):::ENTER
name has only one value
name.toString == "testEntityImport"
===========================================================================
org.apache.commons.validator.EntityImportTest.EntityImportTest(java.lang.String):::EXIT
name.toString == "testEntityImport"
===========================================================================
org.apache.commons.validator.TestCommon:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.validator.EntityImportTest.class
this.resources == null
this.fName has only one value
this.fName.toString == "testEntityImport"
===========================================================================
org.apache.commons.validator.TestCommon.TestCommon(java.lang.String):::ENTER
string has only one value
string.toString == "testEntityImport"
===========================================================================
org.apache.commons.validator.TestCommon.TestCommon(java.lang.String):::EXIT
string.toString == "testEntityImport"
===========================================================================
org.apache.commons.validator.daikon.EntityImportTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.validator.daikon.EntityImportTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
