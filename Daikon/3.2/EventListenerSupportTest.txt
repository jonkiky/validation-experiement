===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.expected():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.expected():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
com.sun.proxy.$Proxy2.timeout():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.timeout():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return == 0
===========================================================================
com.sun.proxy.$Proxy3:::CLASS
com.sun.proxy.$Proxy3.m1 has only one value
com.sun.proxy.$Proxy3.m2 has only one value
com.sun.proxy.$Proxy3.m3 has only one value
com.sun.proxy.$Proxy3.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy3:::OBJECT
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::ENTER
===========================================================================
com.sun.proxy.$Proxy3.$Proxy3(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy3.equals(java.lang.Object):::ENTER
this == arg0
this has only one value
arg0 has only one value
arg0.getClass().getName() == com.sun.proxy.$Proxy3.class
===========================================================================
com.sun.proxy.$Proxy3.equals(java.lang.Object):::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
return == true
===========================================================================
com.sun.proxy.$Proxy3.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.sun.proxy.$Proxy3.vetoableChange(java.beans.PropertyChangeEvent):::ENTER
===========================================================================
com.sun.proxy.$Proxy3.vetoableChange(java.beans.PropertyChangeEvent):::EXIT
com.sun.proxy.$Proxy3.m1 == orig(com.sun.proxy.$Proxy3.m1)
com.sun.proxy.$Proxy3.m2 == orig(com.sun.proxy.$Proxy3.m2)
com.sun.proxy.$Proxy3.m3 == orig(com.sun.proxy.$Proxy3.m3)
com.sun.proxy.$Proxy3.m0 == orig(com.sun.proxy.$Proxy3.m0)
===========================================================================
org.apache.commons.lang3.Validate:::CLASS
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified exclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified inclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX has only one value
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == "The string %s does not match the pattern %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == "The validated object is null"
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == "The validated expression is false"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == "The validated array contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == "The validated collection contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == "The validated character sequence is blank"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == "The validated array is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == "The validated collection is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == "The validated map is empty"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == "The validated array index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == "The validated collection index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == "The validated state is false"
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == "Cannot assign a %s to a %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == "Expected type: %s, actual: %s"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, java.lang.Object[]):::ENTER
expression == true
message has only one value
message.toString == "Class {0} is not an interface"
values.getClass().getName() == java.lang.Object[].class
values[] contains no nulls and has only one value, of length 1
values[] elements has only one value
size(values[]) == 1
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, java.lang.Object[]):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
values[] == orig(values[])
message.toString == "Class {0} is not an interface"
values[] contains no nulls and has only one value, of length 1
values[] elements has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.Validate.notNull(java.lang.Object, java.lang.String, java.lang.Object[]):::ENTER
message.toString one of { "ClassLoader cannot be null.", "Listener interface cannot be null.", "Listener object cannot be null." }
values.getClass().getName() == java.lang.Object[].class
values[] == []
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString != message.toString
object.getClass().getName() != values.getClass().getName()
===========================================================================
org.apache.commons.lang3.Validate.notNull(java.lang.Object, java.lang.String, java.lang.Object[]):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
values[] == orig(values[])
return == orig(object)
message.toString one of { "ClassLoader cannot be null.", "Listener interface cannot be null.", "Listener object cannot be null." }
values[] == []
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString != message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
return.getClass().getName() == orig(object.getClass().getName())
return.getClass().getName() != orig(values.getClass().getName())
===========================================================================
org.apache.commons.lang3.daikon.EventListenerSupportTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.EventListenerSupportTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:::OBJECT
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] elements != null
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.ProxyInvocationHandler(org.apache.commons.lang3.event.EventListenerSupport):::ENTER
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] elements has only one value
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == null
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[].getClass().getName() == []
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 0, 1 }
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 <= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.ProxyInvocationHandler(org.apache.commons.lang3.event.EventListenerSupport):::EXIT
org.apache.commons.lang3.event.EventListenerSupport.this == orig(org.apache.commons.lang3.event.EventListenerSupport.this)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == orig(org.apache.commons.lang3.event.EventListenerSupport.this.proxy)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] elements has only one value
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == null
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 0, 1 }
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName())
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 <= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == unusedProxy
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size(args[])-1
method has only one value
args.getClass().getName() == java.lang.Object[].class
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 1, 2, 10 }
size(args[]) == 1
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == unusedProxy.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
org.apache.commons.lang3.event.EventListenerSupport.this == orig(org.apache.commons.lang3.event.EventListenerSupport.this)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners)
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == orig(unusedProxy)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
args[] == orig(args[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size(args[])-1
size(args[])-1 == orig(size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]))
return == null
orig(unusedProxy.getClass().getName()) == com.sun.proxy.$Proxy3.class
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 0, 1, 2 }
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == orig(unusedProxy.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport:::CLASS
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport:::OBJECT
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
this.prototypeArray[] == []
this.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(this.listeners[])
this.listeners.getClass().getName() != this.proxy.getClass().getName()
this.listeners.getClass().getName() != this.prototypeArray.getClass().getName()
this.proxy.getClass().getName() != this.prototypeArray.getClass().getName()
size(this.listeners[]) >= size(this.prototypeArray[])
size(this.listeners[])-1 >= size(this.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.proxy == null
this.prototypeArray == null
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class):::ENTER
listenerInterface has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class):::EXIT
size(this.listeners[]) == size(this.prototypeArray[])
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class, java.lang.ClassLoader):::ENTER
listenerInterface has only one value
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class, java.lang.ClassLoader):::EXIT
size(this.listeners[]) == size(this.prototypeArray[])
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() != orig(classLoader.getClass().getName())
this.proxy.getClass().getName() != orig(classLoader.getClass().getName())
this.prototypeArray.getClass().getName() != orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.addListener(java.lang.Object):::ENTER
this.listeners != null
this.proxy != null
this.prototypeArray != null
listener != null
this.listeners.getClass().getName() != listener.getClass().getName()
this.proxy.getClass().getName() != listener.getClass().getName()
this.prototypeArray.getClass().getName() != listener.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.addListener(java.lang.Object):::EXIT
this.listeners == orig(this.listeners)
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners != null
this.proxy != null
this.prototypeArray != null
size(this.listeners[]) >= 1
orig(listener) in this.listeners[]
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(listener.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.proxy.getClass().getName() != orig(listener.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
this.prototypeArray.getClass().getName() != orig(listener.getClass().getName())
size(this.listeners[])-1 >= size(this.prototypeArray[])
size(this.prototypeArray[])-1 <= orig(size(this.listeners[]))-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.create(java.lang.Class):::ENTER
listenerInterface has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.create(java.lang.Class):::EXIT
size(return.listeners[]) == size(return.prototypeArray[])
return.listeners[] == []
return.listeners[].getClass().getName() == []
return.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
return.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
return.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
return.prototypeArray[] == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createInvocationHandler():::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
this.proxy == null
size(this.listeners[]) one of { 0, 1 }
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createInvocationHandler():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
this.proxy == null
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.class
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != return.getClass().getName()
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.prototypeArray.getClass().getName() != return.getClass().getName()
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createProxy(java.lang.Class, java.lang.ClassLoader):::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
this.proxy == null
listenerInterface has only one value
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != classLoader.getClass().getName()
this.prototypeArray.getClass().getName() != classLoader.getClass().getName()
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createProxy(java.lang.Class, java.lang.ClassLoader):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(classLoader.getClass().getName())
this.proxy.getClass().getName() != orig(classLoader.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
this.prototypeArray.getClass().getName() != orig(classLoader.getClass().getName())
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.fire():::ENTER
size(this.listeners[]) one of { 1, 2, 10 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.fire():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == return
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
return == orig(this.proxy)
return.getClass().getName() == com.sun.proxy.$Proxy3.class
size(this.listeners[]) one of { 1, 2, 10 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() == return.getClass().getName()
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
return.getClass().getName() == orig(this.proxy.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListenerCount():::ENTER
this has only one value
this.listeners has only one value
this.listeners[].getClass().getName() elements == null
this.listeners[].getClass().getName() one of { [], [null, null, null, null, null, null, null, null, null, null] }
this.proxy has only one value
this.prototypeArray has only one value
size(this.listeners[]) one of { 0, 10 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListenerCount():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
return == size(this.listeners[])
return == orig(size(this.listeners[]))
this.listeners has only one value
this.listeners[].getClass().getName() elements == null
this.listeners[].getClass().getName() one of { [], [null, null, null, null, null, null, null, null, null, null] }
this.proxy has only one value
this.prototypeArray has only one value
return one of { 0, 10 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListeners():::ENTER
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListeners():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[]) == size(return[])
size(return[]) == orig(size(this.listeners[]))
return.getClass().getName() == java.beans.VetoableChangeListener[].class
size(return[]) one of { 0, 1, 2 }
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(return[])
this.listeners.getClass().getName() != return.getClass().getName()
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() != return.getClass().getName()
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.prototypeArray.getClass().getName())
size(this.prototypeArray[]) <= size(return[])
size(this.prototypeArray[])-1 <= size(return[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.initializeTransientFields(java.lang.Class, java.lang.ClassLoader):::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
this.proxy == null
this.prototypeArray == null
listenerInterface has only one value
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != classLoader.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.initializeTransientFields(java.lang.Class, java.lang.ClassLoader):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(classLoader.getClass().getName())
this.proxy.getClass().getName() != orig(classLoader.getClass().getName())
this.prototypeArray.getClass().getName() != orig(classLoader.getClass().getName())
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.readObject(java.io.ObjectInputStream):::ENTER
this.listeners == this.proxy
this has only one value
this.listeners == null
this.proxy == null
this.prototypeArray == null
objectInputStream has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.readObject(java.io.ObjectInputStream):::EXIT
size(this.listeners[])-1 == size(this.prototypeArray[])
this.listeners has only one value
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [com.sun.proxy.$Proxy3]
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
this.proxy has only one value
this.prototypeArray has only one value
size(this.listeners[]) == 1
this.proxy.getClass().getName() in this.listeners[].getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.removeListener(java.lang.Object):::ENTER
this.listeners != null
this.proxy != null
this.prototypeArray != null
listener != null
size(this.listeners[]) >= 1
listener in this.listeners[]
this.listeners.getClass().getName() != listener.getClass().getName()
this.prototypeArray.getClass().getName() != listener.getClass().getName()
size(this.listeners[])-1 >= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.removeListener(java.lang.Object):::EXIT
this.listeners == orig(this.listeners)
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[]) == orig(size(this.listeners[]))-1
this.listeners != null
this.proxy != null
this.prototypeArray != null
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(listener.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
this.prototypeArray.getClass().getName() != orig(listener.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.writeObject(java.io.ObjectOutputStream):::ENTER
this has only one value
this.listeners has only one value
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [null, com.sun.proxy.$Proxy4]
this.proxy has only one value
this.prototypeArray has only one value
objectOutputStream has only one value
size(this.listeners[]) == 2
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.writeObject(java.io.ObjectOutputStream):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
this.listeners has only one value
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [null, com.sun.proxy.$Proxy4]
this.proxy has only one value
this.prototypeArray has only one value
size(this.listeners[]) == 2
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$1:::OBJECT
this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$1.(org.apache.commons.lang3.event.EventListenerSupportTest):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$1.(org.apache.commons.lang3.event.EventListenerSupportTest):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1:::OBJECT
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == org.apache.commons.lang3.event.EventListenerSupport.this.listeners
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == org.apache.commons.lang3.event.EventListenerSupport.this.proxy
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]
this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] elements has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy4.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy4] }
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.this has only one value
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) one of { 0, 1 }
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.(org.apache.commons.lang3.event.EventListenerSupportTest$2, org.apache.commons.lang3.event.EventListenerSupport):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == $hidden$2.listeners
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == $hidden$2.listeners[]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == $hidden$2.proxy
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == $hidden$2.prototypeArray
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == $hidden$2.prototypeArray[]
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == size($hidden$2.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == null
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == []
$hidden$2 has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.(org.apache.commons.lang3.event.EventListenerSupportTest$2, org.apache.commons.lang3.event.EventListenerSupport):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest$2.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == $hidden$2.listeners
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == $hidden$2.listeners[]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == $hidden$2.proxy
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == $hidden$2.prototypeArray
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == $hidden$2.prototypeArray[]
org.apache.commons.lang3.event.EventListenerSupport.this == orig($hidden$2)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners == $hidden$2.listeners
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] == $hidden$2.listeners[]
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == $hidden$2.proxy
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray == $hidden$2.prototypeArray
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == $hidden$2.prototypeArray[]
$hidden$2.listeners == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners)
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.proxy == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy)
$hidden$2.proxy == orig($hidden$2.proxy)
$hidden$2.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray)
$hidden$2.prototypeArray == orig($hidden$2.prototypeArray)
$hidden$2.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
$hidden$2.prototypeArray[] == orig($hidden$2.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size($hidden$2.listeners[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size($hidden$2.listeners[])
size($hidden$2.listeners[]) == size($hidden$2.prototypeArray[])
size($hidden$2.listeners[]) == orig(size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]))
size($hidden$2.listeners[]) == orig(size($hidden$2.prototypeArray[]))
$hidden$2.listeners has only one value
$hidden$2.listeners[] == []
$hidden$2.listeners[].getClass().getName() == []
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.proxy == null
$hidden$2.prototypeArray has only one value
$hidden$2.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
$hidden$2.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
$hidden$2.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName())
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName())
$hidden$2.prototypeArray.getClass().getName() == orig($hidden$2.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == proxy
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == size(args[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])-1 == size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size(args[])-1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() == [com.sun.proxy.$Proxy4]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy has only one value
method has only one value
args.getClass().getName() == java.lang.Object[].class
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == proxy.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest$2.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == orig(proxy)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupport.this == orig(org.apache.commons.lang3.event.EventListenerSupport.this)
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == orig(proxy)
args[] == orig(args[])
orig(org.apache.commons.lang3.event.EventListenerSupport.this.proxy) == orig(proxy)
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == orig(size(args[]))
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size(args[])-1
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) == orig(size(args[]))
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size(args[])-1
size(args[])-1 == orig(size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]))
size(args[])-1 == orig(size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]))
orig(size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])) == orig(size(args[]))
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() == [com.sun.proxy.$Proxy4]
return == null
orig(proxy) has only one value
orig(proxy.getClass().getName()) == com.sun.proxy.$Proxy3.class
orig(size(args[])) == 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == orig(proxy.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == orig(proxy.getClass().getName())
orig(org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName()) == orig(proxy.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2:::CLASS
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2:::OBJECT
size(this.listeners[]) == size(this.prototypeArray[])
this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
this.listeners has only one value
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
this.prototypeArray has only one value
this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
this.prototypeArray[] == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.(org.apache.commons.lang3.event.EventListenerSupportTest, java.lang.Class):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
$anonymous0 has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.(org.apache.commons.lang3.event.EventListenerSupportTest, java.lang.Class):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
this.proxy has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.createInvocationHandler():::ENTER
this.proxy == null
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.createInvocationHandler():::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[]) == orig(size(this.prototypeArray[]))
this.proxy == null
return has only one value
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest$2$1.class
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3:::OBJECT
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
this.val$listenerSupport has only one value
this.val$listenerSupport.listeners has only one value
this.val$listenerSupport.listeners[] elements != null
this.val$listenerSupport.listeners[].getClass().getName() elements == null
this.val$listenerSupport.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$listenerSupport.proxy has only one value
this.val$listenerSupport.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
this.val$listenerSupport.prototypeArray has only one value
this.val$listenerSupport.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
this.val$listenerSupport.prototypeArray[] == []
this.val$listenerSupport.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(this.val$listenerSupport.listeners[])
this.val$listenerSupport.listeners.getClass().getName() != this.val$listenerSupport.proxy.getClass().getName()
this.val$listenerSupport.listeners.getClass().getName() != this.val$listenerSupport.prototypeArray.getClass().getName()
this.val$listenerSupport.proxy.getClass().getName() != this.val$listenerSupport.prototypeArray.getClass().getName()
size(this.val$listenerSupport.listeners[]) >= size(this.val$listenerSupport.prototypeArray[])
size(this.val$listenerSupport.listeners[])-1 >= size(this.val$listenerSupport.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.(org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupport):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
$hidden$2 has only one value
$hidden$2.listeners has only one value
$hidden$2.listeners[].getClass().getName() elements == null
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.proxy has only one value
$hidden$2.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
$hidden$2.prototypeArray has only one value
$hidden$2.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
$hidden$2.prototypeArray[] == []
$hidden$2.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size($hidden$2.listeners[])
$hidden$2.listeners.getClass().getName() != $hidden$2.proxy.getClass().getName()
$hidden$2.listeners.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
$hidden$2.proxy.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
size($hidden$2.listeners[]) >= size($hidden$2.prototypeArray[])
size($hidden$2.listeners[])-1 >= size($hidden$2.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.(org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupport):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
this.val$listenerSupport == orig($hidden$2)
this.val$listenerSupport.listeners == $hidden$2.listeners
this.val$listenerSupport.listeners[] == $hidden$2.listeners[]
this.val$listenerSupport.proxy == $hidden$2.proxy
this.val$listenerSupport.prototypeArray == $hidden$2.prototypeArray
this.val$listenerSupport.prototypeArray[] == $hidden$2.prototypeArray[]
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.proxy == orig($hidden$2.proxy)
$hidden$2.prototypeArray == orig($hidden$2.prototypeArray)
$hidden$2.prototypeArray[] == orig($hidden$2.prototypeArray[])
$hidden$2.listeners has only one value
$hidden$2.listeners[].getClass().getName() elements == null
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.proxy has only one value
$hidden$2.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
$hidden$2.prototypeArray has only one value
$hidden$2.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
$hidden$2.prototypeArray[] == []
$hidden$2.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size($hidden$2.listeners[])
this.val$listenerSupport.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
this.val$listenerSupport.proxy.getClass().getName() == $hidden$2.proxy.getClass().getName()
this.val$listenerSupport.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
$hidden$2.listeners.getClass().getName() != $hidden$2.proxy.getClass().getName()
$hidden$2.listeners.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.proxy.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
$hidden$2.proxy.getClass().getName() == orig($hidden$2.proxy.getClass().getName())
$hidden$2.prototypeArray.getClass().getName() == orig($hidden$2.prototypeArray.getClass().getName())
size($hidden$2.listeners[]) >= size($hidden$2.prototypeArray[])
size($hidden$2.listeners[])-1 >= size($hidden$2.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.vetoableChange(java.beans.PropertyChangeEvent):::ENTER
e has only one value
this in this.val$listenerSupport.listeners[]
size(this.val$listenerSupport.listeners[])-1 >= size(this.val$listenerSupport.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.vetoableChange(java.beans.PropertyChangeEvent):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
this.val$listenerSupport == orig(this.val$listenerSupport)
this.val$listenerSupport.listeners == orig(this.val$listenerSupport.listeners)
this.val$listenerSupport.proxy == orig(this.val$listenerSupport.proxy)
this.val$listenerSupport.prototypeArray == orig(this.val$listenerSupport.prototypeArray)
this.val$listenerSupport.prototypeArray[] == orig(this.val$listenerSupport.prototypeArray[])
size(this.val$listenerSupport.listeners[]) == orig(size(this.val$listenerSupport.listeners[]))-1
this.val$listenerSupport.listeners.getClass().getName() == orig(this.val$listenerSupport.listeners.getClass().getName())
this.val$listenerSupport.proxy.getClass().getName() == orig(this.val$listenerSupport.proxy.getClass().getName())
this.val$listenerSupport.prototypeArray.getClass().getName() == orig(this.val$listenerSupport.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4:::OBJECT
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
this.val$calledListeners has only one value
this.val$calledListeners[].getClass().getName() elements == null
this.val$calledListeners.getClass().getName() == java.util.ArrayList.class
size(this.val$calledListeners[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.(org.apache.commons.lang3.event.EventListenerSupportTest, java.util.List):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
$hidden$2 has only one value
$hidden$2[] == []
$hidden$2[].getClass().getName() == []
$hidden$2.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.(org.apache.commons.lang3.event.EventListenerSupportTest, java.util.List):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
this.val$calledListeners == orig($hidden$2)
this.val$calledListeners[] == $hidden$2[]
$hidden$2[] == orig($hidden$2[])
$hidden$2[] == []
$hidden$2[].getClass().getName() == []
this.val$calledListeners.getClass().getName() == orig($hidden$2.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.vetoableChange(java.beans.PropertyChangeEvent):::ENTER
this.val$calledListeners[] elements has only one value
this.val$calledListeners[].getClass().getName() one of { [], [null] }
e has only one value
size(this.val$calledListeners[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.vetoableChange(java.beans.PropertyChangeEvent):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
this.val$calledListeners == orig(this.val$calledListeners)
size(this.val$calledListeners[])-1 == orig(size(this.val$calledListeners[]))
this.val$calledListeners[].getClass().getName() one of { [null], [null, null] }
size(this.val$calledListeners[]) one of { 1, 2 }
orig(this) in this.val$calledListeners[]
this.val$calledListeners.getClass().getName() == orig(this.val$calledListeners.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest:::OBJECT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.EventListenerSupportTest():::EXIT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.addDeregisterListener(org.apache.commons.lang3.event.EventListenerSupport):::ENTER
this has only one value
listenerSupport has only one value
listenerSupport.listeners has only one value
listenerSupport.listeners[].getClass().getName() elements == null
listenerSupport.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
listenerSupport.proxy has only one value
listenerSupport.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
listenerSupport.prototypeArray has only one value
listenerSupport.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
listenerSupport.prototypeArray[] == []
listenerSupport.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(listenerSupport.listeners[])
listenerSupport.listeners.getClass().getName() != listenerSupport.proxy.getClass().getName()
listenerSupport.listeners.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
listenerSupport.proxy.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
size(listenerSupport.listeners[]) >= size(listenerSupport.prototypeArray[])
size(listenerSupport.listeners[])-1 >= size(listenerSupport.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.addDeregisterListener(org.apache.commons.lang3.event.EventListenerSupport):::EXIT
listenerSupport.listeners == orig(listenerSupport.listeners)
listenerSupport.proxy == orig(listenerSupport.proxy)
listenerSupport.prototypeArray == orig(listenerSupport.prototypeArray)
listenerSupport.prototypeArray[] == orig(listenerSupport.prototypeArray[])
size(listenerSupport.listeners[])-1 == orig(size(listenerSupport.listeners[]))
listenerSupport.listeners has only one value
listenerSupport.listeners[].getClass().getName() elements == null
listenerSupport.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
listenerSupport.proxy has only one value
listenerSupport.proxy.getClass().getName() == com.sun.proxy.$Proxy3.class
listenerSupport.prototypeArray has only one value
listenerSupport.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
listenerSupport.prototypeArray[] == []
listenerSupport.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(listenerSupport.listeners[])
listenerSupport.listeners.getClass().getName() != listenerSupport.proxy.getClass().getName()
listenerSupport.listeners.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
listenerSupport.listeners.getClass().getName() == orig(listenerSupport.listeners.getClass().getName())
listenerSupport.proxy.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
listenerSupport.proxy.getClass().getName() == orig(listenerSupport.proxy.getClass().getName())
listenerSupport.prototypeArray.getClass().getName() == orig(listenerSupport.prototypeArray.getClass().getName())
size(listenerSupport.listeners[])-1 >= size(listenerSupport.prototypeArray[])
size(listenerSupport.prototypeArray[])-1 <= orig(size(listenerSupport.listeners[]))-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.createListener(java.util.List):::ENTER
this has only one value
calledListeners has only one value
calledListeners[] == []
calledListeners[].getClass().getName() == []
calledListeners.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.createListener(java.util.List):::EXIT
calledListeners[] == orig(calledListeners[])
calledListeners[] == []
calledListeners[].getClass().getName() == []
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest$4.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testEventDispatchOrder():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testEventDispatchOrder():::EXIT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testGetListeners():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testGetListeners():::EXIT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testRemoveListenerDuringEvent():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testRemoveListenerDuringEvent():::EXIT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSerialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSerialization():::EXIT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSubclassInvocationHandling():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSubclassInvocationHandling():::EXIT
===========================================================================
org.easymock.AbstractMatcher:::CLASS
===========================================================================
org.easymock.AbstractMatcher:::OBJECT
===========================================================================
org.easymock.AbstractMatcher.AbstractMatcher():::EXIT
===========================================================================
org.easymock.EasyMock:::CLASS
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT has only one value
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == "easymock.enableThreadSafetyCheckByDefault"
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT has only one value
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == "easymock.notThreadSafeByDefault"
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString < org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString
===========================================================================
org.easymock.EasyMock.createNiceControl():::ENTER
===========================================================================
org.easymock.EasyMock.createNiceControl():::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
return.getClass().getName() == org.easymock.internal.MocksControl.class
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.EasyMock.createNiceMock(java.lang.Class):::ENTER
toMock has only one value
===========================================================================
org.easymock.EasyMock.createNiceMock(java.lang.Class):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
return.getClass().getName() == com.sun.proxy.$Proxy4.class
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.EasyMock.getControl(java.lang.Object):::ENTER
===========================================================================
org.easymock.EasyMock.getControl(java.lang.Object):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
return.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
return.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.EasyMock.replay(java.lang.Object[]):::ENTER
mocks.getClass().getName() == java.lang.Object[].class
size(mocks[]) == 1
===========================================================================
org.easymock.EasyMock.replay(java.lang.Object[]):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
mocks[] == orig(mocks[])
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.EasyMock.verify(java.lang.Object[]):::ENTER
mocks.getClass().getName() == java.lang.Object[].class
size(mocks[]) == 1
===========================================================================
org.easymock.EasyMock.verify(java.lang.Object[]):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
mocks[] == orig(mocks[])
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.internal.AlwaysMatcher:::CLASS
===========================================================================
org.easymock.internal.AlwaysMatcher:::OBJECT
this has only one value
===========================================================================
org.easymock.internal.AlwaysMatcher.AlwaysMatcher():::EXIT
===========================================================================
org.easymock.internal.ArrayMatcher:::CLASS
===========================================================================
org.easymock.internal.ArrayMatcher:::OBJECT
this has only one value
===========================================================================
org.easymock.internal.ArrayMatcher.ArrayMatcher():::EXIT
===========================================================================
org.easymock.internal.EasyMockProperties:::CLASS
org.easymock.internal.EasyMockProperties.PREFIX has only one value
org.easymock.internal.EasyMockProperties.PREFIX.toString == "easymock."
org.easymock.internal.EasyMockProperties.instance.properties has only one value
===========================================================================
org.easymock.internal.EasyMockProperties:::OBJECT
org.easymock.internal.EasyMockProperties.instance.properties == this.properties
this has only one value
this.properties has only one value
===========================================================================
org.easymock.internal.EasyMockProperties.EasyMockProperties():::EXIT
org.easymock.internal.EasyMockProperties.instance == null
===========================================================================
org.easymock.internal.EasyMockProperties.getClassLoader():::ENTER
org.easymock.internal.EasyMockProperties.instance == null
===========================================================================
org.easymock.internal.EasyMockProperties.getClassLoader():::EXIT
org.easymock.internal.EasyMockProperties.PREFIX == orig(org.easymock.internal.EasyMockProperties.PREFIX)
org.easymock.internal.EasyMockProperties.instance == orig(org.easymock.internal.EasyMockProperties.instance)
org.easymock.internal.EasyMockProperties.instance == null
return has only one value
return.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.easymock.internal.EasyMockProperties.PREFIX.toString == orig(org.easymock.internal.EasyMockProperties.PREFIX.toString)
===========================================================================
org.easymock.internal.EasyMockProperties.getInstance():::ENTER
===========================================================================
org.easymock.internal.EasyMockProperties.getInstance():::EXIT
org.easymock.internal.EasyMockProperties.PREFIX == orig(org.easymock.internal.EasyMockProperties.PREFIX)
org.easymock.internal.EasyMockProperties.instance == return
org.easymock.internal.EasyMockProperties.instance.properties == return.properties
org.easymock.internal.EasyMockProperties.instance.properties == orig(org.easymock.internal.EasyMockProperties.instance.properties)
org.easymock.internal.EasyMockProperties.instance has only one value
org.easymock.internal.EasyMockProperties.PREFIX.toString == orig(org.easymock.internal.EasyMockProperties.PREFIX.toString)
===========================================================================
org.easymock.internal.EasyMockProperties.getProperty(java.lang.String):::ENTER
this == org.easymock.internal.EasyMockProperties.instance
org.easymock.internal.EasyMockProperties.instance has only one value
key.toString one of { "easymock.enableThreadSafetyCheckByDefault", "easymock.notThreadSafeByDefault" }
org.easymock.internal.EasyMockProperties.PREFIX.toString < key.toString
===========================================================================
org.easymock.internal.EasyMockProperties.getProperty(java.lang.String):::EXIT
org.easymock.internal.EasyMockProperties.PREFIX == orig(org.easymock.internal.EasyMockProperties.PREFIX)
org.easymock.internal.EasyMockProperties.instance == orig(this)
org.easymock.internal.EasyMockProperties.instance == orig(org.easymock.internal.EasyMockProperties.instance)
org.easymock.internal.EasyMockProperties.instance.properties == orig(org.easymock.internal.EasyMockProperties.instance.properties)
org.easymock.internal.EasyMockProperties.instance.properties == orig(this.properties)
org.easymock.internal.EasyMockProperties.instance has only one value
key.toString one of { "easymock.enableThreadSafetyCheckByDefault", "easymock.notThreadSafeByDefault" }
return == null
org.easymock.internal.EasyMockProperties.PREFIX.toString < key.toString
org.easymock.internal.EasyMockProperties.PREFIX.toString == orig(org.easymock.internal.EasyMockProperties.PREFIX.toString)
key.toString == orig(key.toString)
===========================================================================
org.easymock.internal.EqualsMatcher:::CLASS
===========================================================================
org.easymock.internal.EqualsMatcher:::OBJECT
this has only one value
===========================================================================
org.easymock.internal.EqualsMatcher.EqualsMatcher():::EXIT
===========================================================================
org.easymock.internal.ExpectedInvocation:::CLASS
===========================================================================
org.easymock.internal.ExpectedInvocation:::OBJECT
size(this.invocation.arguments[]) == size(this.matchers[])
this.invocation.arguments.getClass().getName() == java.lang.Object[].class
this.invocation.arguments[] elements != null
this.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
this.matcher == null
this.matchers[] elements != null
this.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
this.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
this.matchers.getClass().getName() == java.util.ArrayList.class
size(this.invocation.arguments[]) == 1
size(this.matchers[]) == 1
this.invocation.mock.getClass().getName() != this.invocation.arguments.getClass().getName()
this.invocation.mock.getClass().getName() != this.invocation.currentCaptures.getClass().getName()
this.invocation.mock.getClass().getName() != this.matchers.getClass().getName()
this.invocation.arguments.getClass().getName() != this.invocation.currentCaptures.getClass().getName()
this.invocation.arguments.getClass().getName() != this.matchers.getClass().getName()
this.invocation.currentCaptures.getClass().getName() == this.matchers.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
matchers == null
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List):::EXIT
this.invocation == orig(invocation)
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
size(this.matchers[]) == size(invocation.arguments[])
size(this.matchers[]) == orig(size(invocation.arguments[]))
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.matchers.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.matchers.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List, org.easymock.ArgumentsMatcher):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
matchers == null
matcher == null
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List, org.easymock.ArgumentsMatcher):::EXIT
this.invocation == orig(invocation)
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
this.matcher == orig(matcher)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
size(this.matchers[]) == size(invocation.arguments[])
size(this.matchers[]) == orig(size(invocation.arguments[]))
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.matchers.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.matchers.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.createMissingMatchers(org.easymock.internal.Invocation, java.util.List):::ENTER
this.invocation == invocation
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
this.matchers == matchers
this.matchers == null
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.invocation.currentCaptures.getClass().getName() == invocation.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.createMissingMatchers(org.easymock.internal.Invocation, java.util.List):::EXIT67
===========================================================================
org.easymock.internal.ExpectedInvocation.createMissingMatchers(org.easymock.internal.Invocation, java.util.List):::EXIT
this.invocation == orig(this.invocation)
this.invocation == orig(invocation)
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers == orig(matchers)
invocation.mock == orig(this.invocation.mock)
invocation.mock == orig(invocation.mock)
invocation.method == orig(this.invocation.method)
invocation.method == orig(invocation.method)
invocation.arguments == orig(this.invocation.arguments)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(this.invocation.arguments[])
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(this.invocation.currentCaptures)
invocation.currentCaptures == orig(invocation.currentCaptures)
size(this.invocation.arguments[]) == size(return[])
size(invocation.arguments[]) == size(return[])
size(return[]) == orig(size(this.invocation.arguments[]))
size(return[]) == orig(size(invocation.arguments[]))
this.matchers == null
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return[].getClass().getName() == [org.easymock.internal.matchers.Equals]
return[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.invocation.currentCaptures.getClass().getName() == return.getClass().getName()
invocation.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(this.invocation.arguments.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
return.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.getMethod():::ENTER
===========================================================================
org.easymock.internal.ExpectedInvocation.getMethod():::EXIT
this.invocation == orig(this.invocation)
this.invocation.mock == orig(this.invocation.mock)
this.invocation.method == return
this.invocation.arguments == orig(this.invocation.arguments)
this.invocation.arguments[] == orig(this.invocation.arguments[])
this.invocation.currentCaptures == orig(this.invocation.currentCaptures)
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers[] == orig(this.matchers[])
return == orig(this.invocation.method)
size(this.matchers[]) == orig(size(this.invocation.arguments[]))
this.invocation.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
this.invocation.arguments.getClass().getName() == orig(this.invocation.arguments.getClass().getName())
this.matchers.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
this.matchers.getClass().getName() == orig(this.matchers.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::ENTER
this.invocation.arguments[] == arguments[]
size(this.matchers[]) == size(arguments[])
this.invocation.arguments.getClass().getName() == arguments.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT105
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT105;condition="return == true"
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT
this.invocation == orig(this.invocation)
this.invocation.mock == orig(this.invocation.mock)
this.invocation.method == orig(this.invocation.method)
this.invocation.arguments == orig(this.invocation.arguments)
this.invocation.arguments[] == arguments[]
this.invocation.currentCaptures == orig(this.invocation.currentCaptures)
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers[] == orig(this.matchers[])
arguments[] == orig(this.invocation.arguments[])
arguments[] == orig(arguments[])
size(this.matchers[]) == orig(size(this.invocation.arguments[]))
size(this.matchers[]) == orig(size(arguments[]))
return == true
orig(arguments.getClass().getName()) == java.lang.Object[].class
this.invocation.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
this.invocation.arguments.getClass().getName() == orig(arguments.getClass().getName())
this.matchers.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
this.matchers.getClass().getName() == orig(this.matchers.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(org.easymock.internal.Invocation):::ENTER
this.invocation.mock == actual.mock
this.invocation.method == actual.method
this.invocation.arguments[] == actual.arguments[]
size(this.matchers[]) == size(actual.arguments[])
this.invocation.mock.getClass().getName() == actual.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == actual.arguments.getClass().getName()
this.matchers.getClass().getName() == actual.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(org.easymock.internal.Invocation):::EXIT
this.invocation == orig(this.invocation)
this.invocation.mock == actual.mock
this.invocation.method == actual.method
this.invocation.arguments == orig(this.invocation.arguments)
this.invocation.arguments[] == actual.arguments[]
this.invocation.currentCaptures == orig(this.invocation.currentCaptures)
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers[] == orig(this.matchers[])
actual.mock == orig(this.invocation.mock)
actual.mock == orig(actual.mock)
actual.method == orig(this.invocation.method)
actual.method == orig(actual.method)
actual.arguments == orig(actual.arguments)
actual.arguments[] == orig(this.invocation.arguments[])
actual.arguments[] == orig(actual.arguments[])
actual.currentCaptures == orig(actual.currentCaptures)
size(this.matchers[]) == size(actual.arguments[])
size(this.matchers[]) == orig(size(this.invocation.arguments[]))
size(this.matchers[]) == orig(size(actual.arguments[]))
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return == true
this.invocation.mock.getClass().getName() == actual.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == actual.arguments.getClass().getName()
this.matchers.getClass().getName() == actual.currentCaptures.getClass().getName()
this.matchers.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
this.matchers.getClass().getName() == orig(this.matchers.getClass().getName())
this.matchers.getClass().getName() == orig(actual.currentCaptures.getClass().getName())
actual.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
actual.mock.getClass().getName() == orig(actual.mock.getClass().getName())
actual.arguments.getClass().getName() == orig(this.invocation.arguments.getClass().getName())
actual.arguments.getClass().getName() == orig(actual.arguments.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(org.easymock.internal.Invocation):::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults:::CLASS
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults:::OBJECT
size(this.expectedInvocation.invocation.arguments[]) == size(this.expectedInvocation.matchers[])
size(this.expectedInvocation.matchers[]) == size(this.results.ranges[])
size(this.expectedInvocation.matchers[]) == size(this.results.results[])
this.expectedInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
this.expectedInvocation.invocation.arguments[] elements != null
this.expectedInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.expectedInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.expectedInvocation.matcher == null
this.expectedInvocation.matchers[] elements != null
this.expectedInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
this.expectedInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
this.expectedInvocation.matchers.getClass().getName() == java.util.ArrayList.class
this.results.callCount one of { 0, 1 }
this.results.ranges[] contains no nulls and has only one value, of length 1
this.results.ranges[] elements has only one value
this.results.ranges[] elements != null
this.results.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
this.results.results[] elements != null
this.results.results[].getClass().getName() == [org.easymock.internal.Result]
this.results.results[].getClass().getName() elements == org.easymock.internal.Result.class
size(this.expectedInvocation.matchers[]) == 1
org.easymock.internal.ExpectedInvocationAndResults.serialVersionUID > this.results.callCount
org.easymock.internal.ExpectedInvocation.serialVersionUID < this.results.callCount
org.easymock.internal.Invocation.serialVersionUID > this.results.callCount
this.expectedInvocation.invocation.mock.getClass().getName() != this.expectedInvocation.invocation.arguments.getClass().getName()
this.expectedInvocation.invocation.mock.getClass().getName() != this.expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.invocation.arguments.getClass().getName() != this.expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == this.expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == this.results.results.getClass().getName()
org.easymock.internal.Results.serialVersionUID < this.results.callCount
this.results.callCount <= size(this.expectedInvocation.matchers[])
this.results.callCount >= size(this.expectedInvocation.matchers[])-1
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Results):::ENTER
results.callCount == size(expectedInvocation.matchers[])-1
size(expectedInvocation.invocation.arguments[]) == size(expectedInvocation.matchers[])
size(expectedInvocation.matchers[]) == size(results.ranges[])
size(expectedInvocation.matchers[]) == size(results.results[])
expectedInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
expectedInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expectedInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expectedInvocation.matcher == null
expectedInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expectedInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
expectedInvocation.matchers.getClass().getName() == java.util.ArrayList.class
results.callCount == 0
results.ranges[] contains no nulls and has only one value, of length 1
results.ranges[] elements has only one value
results.ranges[].getClass().getName() == [org.easymock.internal.Range]
results.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
results.results[].getClass().getName() == [org.easymock.internal.Result]
results.results[].getClass().getName() elements == org.easymock.internal.Result.class
size(expectedInvocation.matchers[]) == 1
expectedInvocation.invocation.arguments[] elements == expectedInvocation.invocation.arguments[results.callCount]
expectedInvocation.invocation.currentCaptures.getClass().getName() == expectedInvocation.matchers.getClass().getName()
expectedInvocation.matchers[] elements == expectedInvocation.matchers[results.callCount]
expectedInvocation.matchers.getClass().getName() == results.results.getClass().getName()
results.ranges[] elements == results.ranges[results.callCount]
results.results[] elements == results.results[results.callCount]
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Results):::EXIT
this.expectedInvocation == orig(expectedInvocation)
this.expectedInvocation.invocation == expectedInvocation.invocation
this.expectedInvocation.invocation.mock == expectedInvocation.invocation.mock
this.expectedInvocation.invocation.method == expectedInvocation.invocation.method
this.expectedInvocation.invocation.arguments == expectedInvocation.invocation.arguments
this.expectedInvocation.invocation.arguments[] == expectedInvocation.invocation.arguments[]
this.expectedInvocation.invocation.currentCaptures == expectedInvocation.invocation.currentCaptures
this.expectedInvocation.matcher == expectedInvocation.matcher
this.expectedInvocation.matchers == expectedInvocation.matchers
this.expectedInvocation.matchers[] == expectedInvocation.matchers[]
this.results == orig(results)
this.results.callCount == results.callCount
this.results.ranges == results.ranges
this.results.ranges[] == results.ranges[]
this.results.results == results.results
this.results.results[] == results.results[]
expectedInvocation.invocation == orig(expectedInvocation.invocation)
expectedInvocation.invocation.mock == orig(expectedInvocation.invocation.mock)
expectedInvocation.invocation.method == orig(expectedInvocation.invocation.method)
expectedInvocation.invocation.arguments == orig(expectedInvocation.invocation.arguments)
expectedInvocation.invocation.arguments[] == orig(expectedInvocation.invocation.arguments[])
expectedInvocation.invocation.currentCaptures == orig(expectedInvocation.invocation.currentCaptures)
expectedInvocation.matcher == orig(expectedInvocation.matcher)
expectedInvocation.matchers == orig(expectedInvocation.matchers)
expectedInvocation.matchers[] == orig(expectedInvocation.matchers[])
results.callCount == orig(results.callCount)
results.callCount == size(expectedInvocation.matchers[])-1
results.ranges == orig(results.ranges)
results.ranges[] == orig(results.ranges[])
results.results == orig(results.results)
results.results[] == orig(results.results[])
size(this.expectedInvocation.invocation.arguments[]) == size(expectedInvocation.matchers[])
size(this.results.ranges[]) == size(expectedInvocation.matchers[])
size(this.results.results[]) == size(expectedInvocation.matchers[])
size(expectedInvocation.invocation.arguments[]) == size(expectedInvocation.matchers[])
size(expectedInvocation.matchers[]) == size(results.ranges[])
size(expectedInvocation.matchers[]) == size(results.results[])
size(expectedInvocation.matchers[]) == orig(size(expectedInvocation.invocation.arguments[]))
size(expectedInvocation.matchers[]) == orig(size(results.ranges[]))
size(expectedInvocation.matchers[]) == orig(size(results.results[]))
expectedInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
expectedInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expectedInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expectedInvocation.matcher == null
expectedInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expectedInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
expectedInvocation.matchers.getClass().getName() == java.util.ArrayList.class
results.callCount == 0
results.ranges[] contains no nulls and has only one value, of length 1
results.ranges[] elements has only one value
results.ranges[].getClass().getName() == [org.easymock.internal.Range]
results.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
results.results[].getClass().getName() == [org.easymock.internal.Result]
results.results[].getClass().getName() elements == org.easymock.internal.Result.class
size(expectedInvocation.matchers[]) == 1
this.expectedInvocation.invocation.mock.getClass().getName() == expectedInvocation.invocation.mock.getClass().getName()
this.expectedInvocation.invocation.arguments.getClass().getName() == expectedInvocation.invocation.arguments.getClass().getName()
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == expectedInvocation.matchers.getClass().getName()
this.results.results.getClass().getName() == expectedInvocation.matchers.getClass().getName()
expectedInvocation.invocation.mock.getClass().getName() == orig(expectedInvocation.invocation.mock.getClass().getName())
expectedInvocation.invocation.arguments.getClass().getName() == orig(expectedInvocation.invocation.arguments.getClass().getName())
expectedInvocation.invocation.arguments[] elements == expectedInvocation.invocation.arguments[results.callCount]
expectedInvocation.invocation.currentCaptures.getClass().getName() == expectedInvocation.matchers.getClass().getName()
expectedInvocation.matchers[] elements == expectedInvocation.matchers[results.callCount]
expectedInvocation.matchers.getClass().getName() == results.results.getClass().getName()
expectedInvocation.matchers.getClass().getName() == orig(expectedInvocation.invocation.currentCaptures.getClass().getName())
expectedInvocation.matchers.getClass().getName() == orig(expectedInvocation.matchers.getClass().getName())
expectedInvocation.matchers.getClass().getName() == orig(results.results.getClass().getName())
results.ranges[] elements == results.ranges[results.callCount]
results.results[] elements == results.results[results.callCount]
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation():::ENTER
this.results.callCount == size(this.expectedInvocation.matchers[])-1
this.results.callCount == 0
this.expectedInvocation.invocation.arguments[] elements == this.expectedInvocation.invocation.arguments[this.results.callCount]
this.expectedInvocation.matchers[] elements == this.expectedInvocation.matchers[this.results.callCount]
this.results.ranges[] elements == this.results.ranges[this.results.callCount]
this.results.results[] elements == this.results.results[this.results.callCount]
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation():::EXIT
this.expectedInvocation == return
this.expectedInvocation.invocation == return.invocation
this.expectedInvocation.invocation.mock == return.invocation.mock
this.expectedInvocation.invocation.method == return.invocation.method
this.expectedInvocation.invocation.arguments == return.invocation.arguments
this.expectedInvocation.invocation.arguments[] == return.invocation.arguments[]
this.expectedInvocation.invocation.currentCaptures == return.invocation.currentCaptures
this.expectedInvocation.matcher == return.matcher
this.expectedInvocation.matchers == return.matchers
this.expectedInvocation.matchers[] == return.matchers[]
this.results == orig(this.results)
this.results.callCount == orig(this.results.callCount)
this.results.callCount == size(return.matchers[])-1
this.results.ranges == orig(this.results.ranges)
this.results.ranges[] == orig(this.results.ranges[])
this.results.results == orig(this.results.results)
this.results.results[] == orig(this.results.results[])
return == orig(this.expectedInvocation)
return.invocation == orig(this.expectedInvocation.invocation)
return.invocation.mock == orig(this.expectedInvocation.invocation.mock)
return.invocation.method == orig(this.expectedInvocation.invocation.method)
return.invocation.arguments == orig(this.expectedInvocation.invocation.arguments)
return.invocation.arguments[] == orig(this.expectedInvocation.invocation.arguments[])
return.invocation.currentCaptures == orig(this.expectedInvocation.invocation.currentCaptures)
return.matcher == orig(this.expectedInvocation.matcher)
return.matchers == orig(this.expectedInvocation.matchers)
return.matchers[] == orig(this.expectedInvocation.matchers[])
size(this.expectedInvocation.invocation.arguments[]) == size(return.matchers[])
size(this.results.ranges[]) == size(return.matchers[])
size(this.results.results[]) == size(return.matchers[])
size(return.invocation.arguments[]) == size(return.matchers[])
size(return.matchers[]) == orig(size(this.expectedInvocation.invocation.arguments[]))
size(return.matchers[]) == orig(size(this.results.ranges[]))
size(return.matchers[]) == orig(size(this.results.results[]))
this.results.callCount == 0
return.invocation.arguments.getClass().getName() == java.lang.Object[].class
return.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
return.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return.matcher == null
return.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
return.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
return.matchers.getClass().getName() == java.util.ArrayList.class
size(return.matchers[]) == 1
this.expectedInvocation.invocation.mock.getClass().getName() == return.invocation.mock.getClass().getName()
this.expectedInvocation.invocation.arguments.getClass().getName() == return.invocation.arguments.getClass().getName()
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == return.matchers.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == return.matchers.getClass().getName()
this.results.ranges[] elements == this.results.ranges[this.results.callCount]
this.results.results[] elements == this.results.results[this.results.callCount]
this.results.results.getClass().getName() == return.matchers.getClass().getName()
return.invocation.mock.getClass().getName() == orig(this.expectedInvocation.invocation.mock.getClass().getName())
return.invocation.arguments.getClass().getName() == orig(this.expectedInvocation.invocation.arguments.getClass().getName())
return.invocation.arguments[] elements == return.invocation.arguments[this.results.callCount]
return.invocation.currentCaptures.getClass().getName() == return.matchers.getClass().getName()
return.matchers[] elements == return.matchers[this.results.callCount]
return.matchers.getClass().getName() == orig(this.expectedInvocation.invocation.currentCaptures.getClass().getName())
return.matchers.getClass().getName() == orig(this.expectedInvocation.matchers.getClass().getName())
return.matchers.getClass().getName() == orig(this.results.results.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getResults():::ENTER
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getResults():::EXIT
this.expectedInvocation == orig(this.expectedInvocation)
this.expectedInvocation.invocation == orig(this.expectedInvocation.invocation)
this.expectedInvocation.invocation.mock == orig(this.expectedInvocation.invocation.mock)
this.expectedInvocation.invocation.method == orig(this.expectedInvocation.invocation.method)
this.expectedInvocation.invocation.arguments == orig(this.expectedInvocation.invocation.arguments)
this.expectedInvocation.invocation.arguments[] == orig(this.expectedInvocation.invocation.arguments[])
this.expectedInvocation.invocation.currentCaptures == orig(this.expectedInvocation.invocation.currentCaptures)
this.expectedInvocation.matcher == orig(this.expectedInvocation.matcher)
this.expectedInvocation.matchers == orig(this.expectedInvocation.matchers)
this.expectedInvocation.matchers[] == orig(this.expectedInvocation.matchers[])
this.results == return
this.results.callCount == return.callCount
this.results.ranges == return.ranges
this.results.ranges[] == return.ranges[]
this.results.results == return.results
this.results.results[] == return.results[]
return == orig(this.results)
return.callCount == orig(this.results.callCount)
return.ranges == orig(this.results.ranges)
return.ranges[] == orig(this.results.ranges[])
return.results == orig(this.results.results)
return.results[] == orig(this.results.results[])
size(this.expectedInvocation.invocation.arguments[]) == size(return.ranges[])
size(this.expectedInvocation.matchers[]) == size(return.ranges[])
size(this.results.results[]) == size(return.ranges[])
size(return.ranges[]) == size(return.results[])
size(return.ranges[]) == orig(size(this.expectedInvocation.invocation.arguments[]))
size(return.ranges[]) == orig(size(this.expectedInvocation.matchers[]))
size(return.ranges[]) == orig(size(this.results.results[]))
return.callCount one of { 0, 1 }
return.ranges[] contains no nulls and has only one value, of length 1
return.ranges[] elements has only one value
return.ranges[].getClass().getName() == [org.easymock.internal.Range]
return.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
return.results[].getClass().getName() == [org.easymock.internal.Result]
return.results[].getClass().getName() elements == org.easymock.internal.Result.class
return.results.getClass().getName() == java.util.ArrayList.class
size(return.ranges[]) == 1
this.expectedInvocation.invocation.mock.getClass().getName() == orig(this.expectedInvocation.invocation.mock.getClass().getName())
this.expectedInvocation.invocation.arguments.getClass().getName() == orig(this.expectedInvocation.invocation.arguments.getClass().getName())
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == return.results.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == return.results.getClass().getName()
this.results.results.getClass().getName() == return.results.getClass().getName()
return.results.getClass().getName() == orig(this.expectedInvocation.invocation.currentCaptures.getClass().getName())
return.results.getClass().getName() == orig(this.expectedInvocation.matchers.getClass().getName())
return.results.getClass().getName() == orig(this.results.results.getClass().getName())
===========================================================================
org.easymock.internal.Invocation:::CLASS
===========================================================================
org.easymock.internal.Invocation:::OBJECT
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] elements != null
this.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(this.arguments[]) == 1
this.mock.getClass().getName() != this.arguments.getClass().getName()
this.mock.getClass().getName() != this.currentCaptures.getClass().getName()
this.arguments.getClass().getName() != this.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.Invocation.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
===========================================================================
org.easymock.internal.Invocation.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
this.mock == orig(mock)
this.method == orig(method)
this.arguments == orig(args)
this.arguments[] == args[]
args[] == orig(args[])
this.mock.getClass().getName() == orig(mock.getClass().getName())
this.arguments.getClass().getName() == orig(args.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.clearCaptures():::ENTER
===========================================================================
org.easymock.internal.Invocation.clearCaptures():::EXIT
this.mock == orig(this.mock)
this.method == orig(this.method)
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.expandVarArgs(boolean, java.lang.Object[]):::ENTER
isVarArgs == false
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
===========================================================================
org.easymock.internal.Invocation.expandVarArgs(boolean, java.lang.Object[]):::EXIT51
===========================================================================
org.easymock.internal.Invocation.expandVarArgs(boolean, java.lang.Object[]):::EXIT
args[] == return[]
args[] == orig(args[])
return == orig(args)
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 1
return.getClass().getName() == orig(args.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.getArguments():::ENTER
===========================================================================
org.easymock.internal.Invocation.getArguments():::EXIT
this.mock == orig(this.mock)
this.method == orig(this.method)
this.arguments == return
this.arguments[] == return[]
this.currentCaptures == orig(this.currentCaptures)
return == orig(this.arguments)
return[] == orig(this.arguments[])
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 1
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == return.getClass().getName()
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
return.getClass().getName() == orig(this.arguments.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.getMethod():::ENTER
===========================================================================
org.easymock.internal.Invocation.getMethod():::EXIT
this.mock == orig(this.mock)
this.method == return
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
return == orig(this.method)
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.getMock():::ENTER
===========================================================================
org.easymock.internal.Invocation.getMock():::EXIT
this.mock == return
this.method == orig(this.method)
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
return == orig(this.mock)
this.mock.getClass().getName() == return.getClass().getName()
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
return.getClass().getName() == orig(this.mock.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.validateCaptures():::ENTER
===========================================================================
org.easymock.internal.Invocation.validateCaptures():::EXIT
this.mock == orig(this.mock)
this.method == orig(this.method)
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.JavaProxyFactory:::OBJECT
===========================================================================
org.easymock.internal.JavaProxyFactory.JavaProxyFactory():::EXIT
===========================================================================
org.easymock.internal.JavaProxyFactory.createProxy(java.lang.Class, java.lang.reflect.InvocationHandler):::ENTER
toMock has only one value
handler.getClass().getName() == org.easymock.internal.ObjectMethodsFilter.class
===========================================================================
org.easymock.internal.JavaProxyFactory.createProxy(java.lang.Class, java.lang.reflect.InvocationHandler):::EXIT
return.getClass().getName() == com.sun.proxy.$Proxy4.class
===========================================================================
org.easymock.internal.LastControl:::CLASS
org.easymock.internal.LastControl.threadToControl has only one value
org.easymock.internal.LastControl.threadToCurrentInvocation has only one value
org.easymock.internal.LastControl.threadToArgumentMatcherStack has only one value
===========================================================================
org.easymock.internal.LastControl.popCurrentInvocation():::ENTER
===========================================================================
org.easymock.internal.LastControl.popCurrentInvocation():::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
===========================================================================
org.easymock.internal.LastControl.pullMatchers():::ENTER
===========================================================================
org.easymock.internal.LastControl.pullMatchers():::EXIT59
===========================================================================
org.easymock.internal.LastControl.pullMatchers():::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
return == null
===========================================================================
org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation):::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl):::ENTER
control.type == org.easymock.internal.MocksControl$MockType.NICE
control.type == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
control.type has only one value
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
control.type in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl):::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
control.state == orig(control.state)
control.behavior == orig(control.behavior)
control.type == org.easymock.internal.MocksControl$MockType.NICE
control.type == orig(control.type)
control.type == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
control.type has only one value
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
control.state.getClass().getName() == orig(control.state.getClass().getName())
control.behavior.getClass().getName() == orig(control.behavior.getClass().getName())
control.type in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MethodSerializationWrapper:::CLASS
org.easymock.internal.MethodSerializationWrapper.primitiveTypes has only one value
org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName() == java.util.HashMap.class
===========================================================================
org.easymock.internal.MethodSerializationWrapper:::OBJECT
this.className.toString == "java.lang.Object"
this.methodName.toString one of { "equals", "hashCode", "toString" }
this.parameterTypeNames.getClass().getName() == java.lang.String[].class
this.parameterTypeNames[] elements != null
this.parameterTypeNames[].getClass().getName() elements == java.lang.String.class
this.parameterTypeNames[].getClass().getName() one of { [], [java.lang.String] }
this.parameterTypeNames[].toString elements == "java.lang.Object"
this.parameterTypeNames[].toString one of { [], [java.lang.Object] }
size(this.parameterTypeNames[]) one of { 0, 1 }
org.easymock.internal.MethodSerializationWrapper.serialVersionUID > size(this.parameterTypeNames[])
org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName() != this.parameterTypeNames.getClass().getName()
this.parameterTypeNames[] elements == this.className
this.className.toString != this.methodName.toString
===========================================================================
org.easymock.internal.MethodSerializationWrapper.MethodSerializationWrapper(java.lang.reflect.Method):::ENTER
===========================================================================
org.easymock.internal.MethodSerializationWrapper.MethodSerializationWrapper(java.lang.reflect.Method):::EXIT
this.className has only one value
this.parameterTypeNames[] elements has only one value
===========================================================================
org.easymock.internal.MethodSerializationWrapper.getMethod():::ENTER
this.className has only one value
this.parameterTypeNames[] elements has only one value
===========================================================================
org.easymock.internal.MethodSerializationWrapper.getMethod():::EXIT
org.easymock.internal.MethodSerializationWrapper.primitiveTypes == orig(org.easymock.internal.MethodSerializationWrapper.primitiveTypes)
this.className == orig(this.className)
this.methodName == orig(this.methodName)
this.parameterTypeNames == orig(this.parameterTypeNames)
this.parameterTypeNames[] == orig(this.parameterTypeNames[])
this.className has only one value
this.parameterTypeNames[] elements has only one value
org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName() == orig(org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName())
this.className.toString == orig(this.className.toString)
this.methodName.toString == orig(this.methodName.toString)
this.parameterTypeNames.getClass().getName() == orig(this.parameterTypeNames.getClass().getName())
===========================================================================
org.easymock.internal.MockInvocationHandler:::CLASS
===========================================================================
org.easymock.internal.MockInvocationHandler:::OBJECT
this.control.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
this.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[] elements != null
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
this.control.state.getClass().getName() != this.control.behavior.getClass().getName()
this.control.state.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
this.control.behavior.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MockInvocationHandler.MockInvocationHandler(org.easymock.internal.MocksControl):::ENTER
control.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MockInvocationHandler.MockInvocationHandler(org.easymock.internal.MocksControl):::EXIT
this.control == orig(control)
this.control.state == control.state
this.control.behavior == control.behavior
org.easymock.internal.MocksControl$MockType.NICE == control.type
org.easymock.internal.MocksControl$MockType.NICE == orig(control.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
control.state == orig(control.state)
control.behavior == orig(control.behavior)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
this.control.state.getClass().getName() == control.state.getClass().getName()
this.control.behavior.getClass().getName() == control.behavior.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
control.state.getClass().getName() == orig(control.state.getClass().getName())
control.behavior.getClass().getName() == orig(control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.MockInvocationHandler.getControl():::ENTER
===========================================================================
org.easymock.internal.MockInvocationHandler.getControl():::EXIT
this.control == return
this.control.state == return.state
this.control.behavior == return.behavior
org.easymock.internal.MocksControl$MockType.NICE == return.type
org.easymock.internal.MocksControl$MockType.NICE == orig(this.control.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
return == orig(this.control)
return.state == orig(this.control.state)
return.behavior == orig(this.control.behavior)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
return.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
this.control.state.getClass().getName() == return.state.getClass().getName()
this.control.behavior.getClass().getName() == return.behavior.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
return.state.getClass().getName() == orig(this.control.state.getClass().getName())
return.behavior.getClass().getName() == orig(this.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
org.easymock.internal.MocksControl.ONCE.minimum == size(args[])
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == size(args[])-1
args[org.easymock.internal.MocksControl.ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.ONCE.maximum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
args[] elements == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
===========================================================================
org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
this.control == orig(this.control)
this.control.state == orig(this.control.state)
this.control.behavior == orig(this.control.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.control.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(size(args[]))
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == size(args[])-1
args[] == orig(args[])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
args[org.easymock.internal.MocksControl.ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
orig(args[post(org.easymock.internal.MocksControl.ONCE.minimum)-1]) == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.ONCE.maximum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
orig(args[post(org.easymock.internal.MocksControl.ONCE.maximum)-1]) == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
orig(args[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]) == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == args[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == args[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == args[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(args[org.easymock.internal.MocksControl.ONCE.minimum-1])
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(args[org.easymock.internal.MocksControl.ONCE.maximum-1])
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(args[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
return == null
this.control.state.getClass().getName() == orig(this.control.state.getClass().getName())
this.control.behavior.getClass().getName() == orig(this.control.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
args[] elements == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
===========================================================================
org.easymock.internal.MocksBehavior:::CLASS
===========================================================================
org.easymock.internal.MocksBehavior:::OBJECT
this.nice == this.isThreadSafe
this.checkOrder == this.shouldBeUsedInOneThread
this.position == size(this.stubResults[])
this.behaviorLists[] elements != null
this.behaviorLists[].getClass().getName() elements == org.easymock.internal.UnorderedBehavior.class
this.behaviorLists[].getClass().getName() one of { [], [org.easymock.internal.UnorderedBehavior] }
this.behaviorLists.getClass().getName() == java.util.ArrayList.class
this.stubResults[] == []
this.stubResults[].getClass().getName() == []
this.nice == true
this.checkOrder == false
this.position == 0
this.lastThread == null
this.legacyMatcherProvider == null
size(this.behaviorLists[]) one of { 0, 1 }
org.easymock.internal.MocksBehavior.serialVersionUID > size(this.behaviorLists[])
this.behaviorLists.getClass().getName() == this.stubResults.getClass().getName()
this.position <= size(this.behaviorLists[])
this.position >= size(this.behaviorLists[])-1
org.easymock.internal.LegacyMatcherProvider.serialVersionUID < size(this.behaviorLists[])-1
size(this.behaviorLists[]) >= size(this.stubResults[])
size(this.behaviorLists[])-1 <= size(this.stubResults[])
size(this.behaviorLists[])-1 >= size(this.stubResults[])-1
===========================================================================
org.easymock.internal.MocksBehavior.MocksBehavior(boolean):::ENTER
nice == true
===========================================================================
org.easymock.internal.MocksBehavior.MocksBehavior(boolean):::EXIT
this.behaviorLists[] == this.stubResults[]
this.nice == orig(nice)
this.position == size(this.behaviorLists[])
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
===========================================================================
org.easymock.internal.MocksBehavior.addActual(org.easymock.internal.Invocation):::ENTER
size(this.behaviorLists[]) == size(actual.arguments[])
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(actual.arguments[])-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == actual.currentCaptures.getClass().getName()
actual.arguments[] elements == actual.arguments[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addActual(org.easymock.internal.Invocation):::EXIT98
===========================================================================
org.easymock.internal.MocksBehavior.addActual(org.easymock.internal.Invocation):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == return.shouldFillInStackTrace
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
actual.mock == orig(actual.mock)
actual.method == orig(actual.method)
actual.arguments == orig(actual.arguments)
actual.arguments[] == orig(actual.arguments[])
actual.currentCaptures == orig(actual.currentCaptures)
size(this.behaviorLists[]) == size(actual.arguments[])
size(this.behaviorLists[]) == orig(size(actual.arguments[]))
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(actual.arguments[])-1
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
size(this.stubResults[]) == orig(size(actual.arguments[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == actual.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
this.behaviorLists.getClass().getName() == orig(actual.currentCaptures.getClass().getName())
actual.mock.getClass().getName() == orig(actual.mock.getClass().getName())
actual.arguments.getClass().getName() == orig(actual.arguments.getClass().getName())
actual.arguments[] elements == actual.arguments[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation):::ENTER
this.behaviorLists[] == this.stubResults[]
this.position == size(this.behaviorLists[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])-1
size(this.behaviorLists[]) == size(expected.matchers[])-1
size(expected.invocation.arguments[]) == size(expected.matchers[])
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
size(expected.matchers[]) == 1
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.behaviorLists[])
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
expected.invocation == orig(expected.invocation)
expected.invocation.mock == orig(expected.invocation.mock)
expected.invocation.method == orig(expected.invocation.method)
expected.invocation.arguments == orig(expected.invocation.arguments)
expected.invocation.arguments[] == orig(expected.invocation.arguments[])
expected.invocation.currentCaptures == orig(expected.invocation.currentCaptures)
expected.matcher == orig(expected.matcher)
expected.matchers == orig(expected.matchers)
expected.matchers[] == orig(expected.matchers[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])
size(this.behaviorLists[]) == size(expected.matchers[])
size(this.behaviorLists[]) == orig(size(expected.invocation.arguments[]))
size(this.behaviorLists[]) == orig(size(expected.matchers[]))
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(expected.invocation.arguments[])-1
size(this.stubResults[]) == size(expected.matchers[])-1
size(this.stubResults[]) == orig(size(expected.invocation.arguments[]))-1
size(this.stubResults[]) == orig(size(expected.matchers[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.invocation.currentCaptures.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.matchers.getClass().getName())
expected.invocation.mock.getClass().getName() == orig(expected.invocation.mock.getClass().getName())
expected.invocation.arguments.getClass().getName() == orig(expected.invocation.arguments.getClass().getName())
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::ENTER
this.behaviorLists[] == this.stubResults[]
this.nice == result.shouldFillInStackTrace
this.position == size(this.behaviorLists[])
count.minimum == count.maximum
count.minimum == size(expected.matchers[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])-1
size(this.behaviorLists[]) == size(expected.matchers[])-1
size(expected.invocation.arguments[]) == size(expected.matchers[])
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.minimum-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.maximum-1]
expected.matchers[this.position] == expected.matchers[count.minimum-1]
expected.matchers[this.position] == expected.matchers[count.maximum-1]
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
count has only one value
count.minimum == 1
size(expected.matchers[]) == 1
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.behaviorLists[])
this.stubResults[] == orig(this.stubResults[])
this.nice == result.shouldFillInStackTrace
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.nice == orig(result.shouldFillInStackTrace)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
expected.invocation == orig(expected.invocation)
expected.invocation.mock == orig(expected.invocation.mock)
expected.invocation.method == orig(expected.invocation.method)
expected.invocation.arguments == orig(expected.invocation.arguments)
expected.invocation.arguments[] == orig(expected.invocation.arguments[])
expected.invocation.currentCaptures == orig(expected.invocation.currentCaptures)
expected.matcher == orig(expected.matcher)
expected.matchers == orig(expected.matchers)
expected.matchers[] == orig(expected.matchers[])
result.value == orig(result.value)
count.minimum == count.maximum
count.minimum == orig(count.minimum)
count.minimum == orig(count.maximum)
count.minimum == size(this.behaviorLists[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])
size(this.behaviorLists[]) == size(expected.matchers[])
size(this.behaviorLists[]) == orig(size(expected.invocation.arguments[]))
size(this.behaviorLists[]) == orig(size(expected.matchers[]))
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(expected.invocation.arguments[])-1
size(this.stubResults[]) == size(expected.matchers[])-1
size(this.stubResults[]) == orig(size(expected.invocation.arguments[]))-1
size(this.stubResults[]) == orig(size(expected.matchers[]))-1
this.behaviorLists[this.position] == this.behaviorLists[count.minimum-1]
this.behaviorLists[this.position] == this.behaviorLists[count.maximum-1]
this.behaviorLists[this.position] == this.behaviorLists[orig(count.minimum)-1]
this.behaviorLists[this.position] == this.behaviorLists[orig(count.maximum)-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.minimum-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.maximum-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[orig(count.minimum)-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[orig(count.maximum)-1]
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[post(count.minimum)-1])
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[post(count.maximum)-1])
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[count.minimum-1])
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[count.maximum-1])
expected.matchers[this.position] == expected.matchers[count.minimum-1]
expected.matchers[this.position] == expected.matchers[count.maximum-1]
expected.matchers[this.position] == expected.matchers[orig(count.minimum)-1]
expected.matchers[this.position] == expected.matchers[orig(count.maximum)-1]
expected.matchers[this.position] == orig(expected.matchers[post(count.minimum)-1])
expected.matchers[this.position] == orig(expected.matchers[post(count.maximum)-1])
expected.matchers[this.position] == orig(expected.matchers[count.minimum-1])
expected.matchers[this.position] == orig(expected.matchers[count.maximum-1])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
count.minimum == 1
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.invocation.currentCaptures.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.matchers.getClass().getName())
expected.invocation.mock.getClass().getName() == orig(expected.invocation.mock.getClass().getName())
expected.invocation.arguments.getClass().getName() == orig(expected.invocation.arguments.getClass().getName())
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
result.value.getClass().getName() == orig(result.value.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.checkOrder(boolean):::ENTER
this.behaviorLists[] == this.stubResults[]
this.checkOrder == value
this.position == size(this.behaviorLists[])
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
===========================================================================
org.easymock.internal.MocksBehavior.checkOrder(boolean):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == this.stubResults[]
this.behaviorLists[] == orig(this.behaviorLists[])
this.behaviorLists[] == orig(this.stubResults[])
this.stubResults == orig(this.stubResults)
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.checkOrder == orig(value)
this.position == orig(this.position)
this.position == size(this.behaviorLists[])
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.checkThreadSafety():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.checkThreadSafety():::EXIT211
===========================================================================
org.easymock.internal.MocksBehavior.checkThreadSafety():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.isThreadSafe():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.isThreadSafe():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == return
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.isThreadSafe == return
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
return == orig(this.nice)
return == orig(this.isThreadSafe)
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
return == true
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.isThreadSafe():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.MocksBehavior.lastBehaviorList():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.lastBehaviorList():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == return.results[]
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == return.checkOrder
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
return == this.behaviorLists[this.position]
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
return in this.behaviorLists[]
this.behaviorLists[] elements == return
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == return.results.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.verify():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.verify():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl$MockType:::CLASS
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MocksControl$MockType:::OBJECT
===========================================================================
org.easymock.internal.MocksControl$MockType.MockType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "DEFAULT", "NICE", "STRICT" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.easymock.internal.MocksControl$MockType.MockType(java.lang.String, int):::EXIT
$hidden$1.toString one of { "DEFAULT", "NICE", "STRICT" }
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.easymock.internal.MocksControl$MockType.values():::ENTER
===========================================================================
org.easymock.internal.MocksControl$MockType.values():::EXIT
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == return[]
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
return has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == return.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl:::CLASS
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
===========================================================================
org.easymock.internal.MocksControl:::OBJECT
this.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
this.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[] elements != null
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
this.state.getClass().getName() != this.behavior.getClass().getName()
this.state.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
this.behavior.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MocksControl.MocksControl(org.easymock.internal.MocksControl$MockType):::ENTER
type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MocksControl.MocksControl(org.easymock.internal.MocksControl$MockType):::EXIT
org.easymock.internal.MocksControl$MockType.NICE == orig(type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.createMock(java.lang.Class):::ENTER
this.state.getClass().getName() == org.easymock.internal.RecordState.class
toMock has only one value
===========================================================================
org.easymock.internal.MocksControl.createMock(java.lang.Class):::EXIT
this.state == orig(this.state)
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
return.getClass().getName() == com.sun.proxy.$Proxy4.class
this.state.getClass().getName() == orig(this.state.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.createProxyFactory(java.lang.Class):::ENTER
this.state.getClass().getName() == org.easymock.internal.RecordState.class
toMock has only one value
===========================================================================
org.easymock.internal.MocksControl.createProxyFactory(java.lang.Class):::EXIT
this.state == orig(this.state)
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
return.getClass().getName() == org.easymock.internal.JavaProxyFactory.class
this.state.getClass().getName() == orig(this.state.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.getState():::ENTER
===========================================================================
org.easymock.internal.MocksControl.getState():::EXIT
this.state == return
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
return == orig(this.state)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == return.getClass().getName()
this.behavior.getClass().getName() != return.getClass().getName()
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() != return.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
return.getClass().getName() == orig(this.state.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.replay():::ENTER
this.state.getClass().getName() == org.easymock.internal.RecordState.class
===========================================================================
org.easymock.internal.MocksControl.replay():::EXIT
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.ReplayState.class
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.reset():::ENTER
this.state == null
this.behavior == null
===========================================================================
org.easymock.internal.MocksControl.reset():::EXIT
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.verify():::ENTER
this.state.getClass().getName() == org.easymock.internal.ReplayState.class
===========================================================================
org.easymock.internal.MocksControl.verify():::EXIT
this.state == orig(this.state)
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.ReplayState.class
this.state.getClass().getName() == orig(this.state.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter:::CLASS
===========================================================================
org.easymock.internal.ObjectMethodsFilter:::OBJECT
this.delegate.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
this.delegate.control.type has only one value
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
this.name == null
this.delegate.control.state.getClass().getName() != this.delegate.control.behavior.getClass().getName()
===========================================================================
org.easymock.internal.ObjectMethodsFilter.ObjectMethodsFilter(java.lang.Class, org.easymock.internal.MockInvocationHandler, java.lang.String):::ENTER
toMock has only one value
delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
delegate.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
delegate.control.type has only one value
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
name == null
===========================================================================
org.easymock.internal.ObjectMethodsFilter.ObjectMethodsFilter(java.lang.Class, org.easymock.internal.MockInvocationHandler, java.lang.String):::EXIT
this.delegate == orig(delegate)
this.delegate.control == delegate.control
this.delegate.control.state == delegate.control.state
this.delegate.control.behavior == delegate.control.behavior
this.delegate.control.type == delegate.control.type
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(name)
delegate.control == orig(delegate.control)
delegate.control.state == orig(delegate.control.state)
delegate.control.behavior == orig(delegate.control.behavior)
delegate.control.type == orig(delegate.control.type)
delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
delegate.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
delegate.control.type has only one value
this.delegate.control.state.getClass().getName() == delegate.control.state.getClass().getName()
this.delegate.control.behavior.getClass().getName() == delegate.control.behavior.getClass().getName()
delegate.control.state.getClass().getName() == orig(delegate.control.state.getClass().getName())
delegate.control.behavior.getClass().getName() == orig(delegate.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter.getDelegate():::ENTER
===========================================================================
org.easymock.internal.ObjectMethodsFilter.getDelegate():::EXIT
this.equalsMethod == orig(this.equalsMethod)
this.hashCodeMethod == orig(this.hashCodeMethod)
this.toStringMethod == orig(this.toStringMethod)
this.delegate == return
this.delegate.control == return.control
this.delegate.control.state == return.control.state
this.delegate.control.behavior == return.control.behavior
this.delegate.control.type == return.control.type
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
return == orig(this.delegate)
return.control == orig(this.delegate.control)
return.control.state == orig(this.delegate.control.state)
return.control.behavior == orig(this.delegate.control.behavior)
return.control.type == orig(this.delegate.control.type)
return.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
return.control.type has only one value
this.delegate.control.state.getClass().getName() == return.control.state.getClass().getName()
this.delegate.control.behavior.getClass().getName() == return.control.behavior.getClass().getName()
return.control.state.getClass().getName() == orig(this.delegate.control.state.getClass().getName())
return.control.behavior.getClass().getName() == orig(this.delegate.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
this.delegate.control.state.getClass().getName() != proxy.getClass().getName()
this.delegate.control.state.getClass().getName() != args.getClass().getName()
this.delegate.control.behavior.getClass().getName() != proxy.getClass().getName()
this.delegate.control.behavior.getClass().getName() != args.getClass().getName()
proxy.getClass().getName() != args.getClass().getName()
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT64
return has only one value
args[] elements == orig(proxy)
orig(proxy) in args[]
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT72
this.name == return
return == null
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
this.equalsMethod == orig(this.equalsMethod)
this.hashCodeMethod == orig(this.hashCodeMethod)
this.toStringMethod == orig(this.toStringMethod)
this.delegate == orig(this.delegate)
this.delegate.control == orig(this.delegate.control)
this.delegate.control.state == orig(this.delegate.control.state)
this.delegate.control.behavior == orig(this.delegate.control.behavior)
this.delegate.control.type == orig(this.delegate.control.type)
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
args[] == orig(args[])
return.getClass().getName() == java.lang.Boolean.class
this.delegate.control.state.getClass().getName() == orig(this.delegate.control.state.getClass().getName())
this.delegate.control.state.getClass().getName() != orig(proxy.getClass().getName())
this.delegate.control.state.getClass().getName() != orig(args.getClass().getName())
this.delegate.control.behavior.getClass().getName() == orig(this.delegate.control.behavior.getClass().getName())
this.delegate.control.behavior.getClass().getName() != orig(proxy.getClass().getName())
this.delegate.control.behavior.getClass().getName() != orig(args.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter.readObject(java.io.ObjectInputStream):::ENTER
this.equalsMethod == this.hashCodeMethod
this.equalsMethod == this.toStringMethod
this has only one value
this.equalsMethod == null
this.delegate == null
stream has only one value
===========================================================================
org.easymock.internal.ObjectMethodsFilter.readObject(java.io.ObjectInputStream):::EXIT
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
this.equalsMethod has only one value
this.hashCodeMethod has only one value
this.toStringMethod has only one value
this.delegate has only one value
this.delegate.control has only one value
this.delegate.control.state has only one value
this.delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
this.delegate.control.behavior has only one value
===========================================================================
org.easymock.internal.ObjectMethodsFilter.writeObject(java.io.ObjectOutputStream):::ENTER
this has only one value
this.equalsMethod has only one value
this.hashCodeMethod has only one value
this.toStringMethod has only one value
this.delegate has only one value
this.delegate.control has only one value
this.delegate.control.state has only one value
this.delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
this.delegate.control.behavior has only one value
===========================================================================
org.easymock.internal.ObjectMethodsFilter.writeObject(java.io.ObjectOutputStream):::EXIT
this.equalsMethod == orig(this.equalsMethod)
this.hashCodeMethod == orig(this.hashCodeMethod)
this.toStringMethod == orig(this.toStringMethod)
this.delegate == orig(this.delegate)
this.delegate.control == orig(this.delegate.control)
this.delegate.control.state == orig(this.delegate.control.state)
this.delegate.control.behavior == orig(this.delegate.control.behavior)
this.delegate.control.type == orig(this.delegate.control.type)
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
this.equalsMethod has only one value
this.hashCodeMethod has only one value
this.toStringMethod has only one value
this.delegate has only one value
this.delegate.control has only one value
this.delegate.control.state has only one value
this.delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
this.delegate.control.behavior has only one value
this.delegate.control.state.getClass().getName() == orig(this.delegate.control.state.getClass().getName())
this.delegate.control.behavior.getClass().getName() == orig(this.delegate.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.Range:::CLASS
===========================================================================
org.easymock.internal.Range:::OBJECT
this.minimum one of { 0, 1 }
this.maximum one of { 1, 2147483647 }
org.easymock.internal.Range.serialVersionUID < this.minimum
org.easymock.internal.Range.serialVersionUID < this.maximum
this.minimum <= this.maximum
===========================================================================
org.easymock.internal.Range.Range(int):::ENTER
count == 1
===========================================================================
org.easymock.internal.Range.Range(int):::EXIT
this.minimum == this.maximum
this.minimum == orig(count)
this.minimum == 1
===========================================================================
org.easymock.internal.Range.Range(int, int):::ENTER
minimum one of { 0, 1 }
maximum one of { 1, 2147483647 }
===========================================================================
org.easymock.internal.Range.Range(int, int):::EXIT
this.minimum == orig(minimum)
this.maximum == orig(maximum)
===========================================================================
org.easymock.internal.Range.contains(int):::ENTER
this.minimum == this.maximum
this.minimum == count
this.minimum == 1
===========================================================================
org.easymock.internal.Range.contains(int):::EXIT
this.minimum == this.maximum
this.minimum == orig(this.minimum)
this.minimum == orig(this.maximum)
this.minimum == orig(count)
this.minimum == 1
return == true
===========================================================================
org.easymock.internal.Range.contains(int):::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.Range.getMaximum():::ENTER
this.minimum == this.maximum
this has only one value
this.minimum == 1
===========================================================================
org.easymock.internal.Range.getMaximum():::EXIT
this.minimum == return
this.maximum == return
return == orig(this.minimum)
return == orig(this.maximum)
return == 1
===========================================================================
org.easymock.internal.Range.getMinimum():::ENTER
this.minimum == this.maximum
this has only one value
this.minimum == 1
===========================================================================
org.easymock.internal.Range.getMinimum():::EXIT
this.minimum == return
this.maximum == return
return == orig(this.minimum)
return == orig(this.maximum)
return == 1
===========================================================================
org.easymock.internal.Range.hasOpenCount():::ENTER
this.minimum == this.maximum
this has only one value
this.minimum == 1
===========================================================================
org.easymock.internal.Range.hasOpenCount():::EXIT
this.minimum == this.maximum
this.minimum == orig(this.minimum)
this.minimum == orig(this.maximum)
this.minimum == 1
return == false
===========================================================================
org.easymock.internal.Range.hasOpenCount():::EXIT;condition="not(return == true)"
===========================================================================
org.easymock.internal.RecordState:::CLASS
org.easymock.internal.RecordState.emptyReturnValues has only one value
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == java.util.HashMap.class
org.easymock.internal.RecordState.primitiveToWrapperType has only one value
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName()
===========================================================================
org.easymock.internal.RecordState:::OBJECT
size(this.lastInvocation.invocation.arguments[]) == size(this.lastInvocation.matchers[])
this.lastInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
this.lastInvocation.invocation.arguments[] elements != null
this.lastInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.lastInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.lastInvocation.matcher == null
this.lastInvocation.matchers[] elements != null
this.lastInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
this.lastInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
this.lastInvocation.matchers.getClass().getName() == java.util.ArrayList.class
this.lastResult == null
this.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
size(this.lastInvocation.matchers[]) == 1
this.lastInvocation.invocation.mock.getClass().getName() != this.lastInvocation.invocation.arguments.getClass().getName()
this.lastInvocation.invocation.mock.getClass().getName() != this.lastInvocation.matchers.getClass().getName()
this.lastInvocation.invocation.mock.getClass().getName() != this.behavior.getClass().getName()
this.lastInvocation.invocation.mock.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() != this.lastInvocation.matchers.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() != this.behavior.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
this.lastInvocation.invocation.currentCaptures.getClass().getName() == this.lastInvocation.matchers.getClass().getName()
this.lastInvocation.matchers.getClass().getName() != this.behavior.getClass().getName()
this.lastInvocation.matchers.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
this.behavior.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
===========================================================================
org.easymock.internal.RecordState.RecordState(org.easymock.internal.IMocksBehavior):::ENTER
behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
===========================================================================
org.easymock.internal.RecordState.RecordState(org.easymock.internal.IMocksBehavior):::EXIT
this.behavior == orig(behavior)
this.lastInvocation == null
this.lastInvocationUsed == true
this.behavior.getClass().getName() == orig(behavior.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.assertRecordState():::ENTER
this.lastInvocation == null
this.lastInvocationUsed == true
===========================================================================
org.easymock.internal.RecordState.assertRecordState():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
this.lastInvocation == null
this.lastInvocationUsed == true
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.closeMethod():::ENTER
===========================================================================
org.easymock.internal.RecordState.closeMethod():::EXIT258
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastInvocation == null
===========================================================================
org.easymock.internal.RecordState.closeMethod():::EXIT266
orig(this.lastInvocationUsed) == false
===========================================================================
org.easymock.internal.RecordState.closeMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent])
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matcher == null)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matchers.getClass().getName() == java.util.ArrayList.class)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals])
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class)
(orig(this.lastInvocationUsed) == true)  ==>  (this.lastInvocation == null)
(orig(this.lastInvocationUsed) == true)  ==>  (this.lastInvocationUsed == orig(this.lastInvocationUsed))
this.lastInvocationUsed == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class):::ENTER
type has only one value
===========================================================================
org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class):::EXIT
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
return == null
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.invoke(org.easymock.internal.Invocation):::ENTER
this.lastInvocation == null
this.lastInvocationUsed == true
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.RecordState.invoke(org.easymock.internal.Invocation):::EXIT
this.lastInvocation.invocation == orig(invocation)
this.lastInvocation.invocation.mock == invocation.mock
this.lastInvocation.invocation.method == invocation.method
this.lastInvocation.invocation.arguments == invocation.arguments
this.lastInvocation.invocation.arguments[] == invocation.arguments[]
this.lastInvocation.invocation.currentCaptures == invocation.currentCaptures
this.lastInvocation.matcher == return
this.lastResult == return
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
return == orig(this.lastInvocation)
size(this.lastInvocation.matchers[]) == size(invocation.arguments[])
this.lastInvocationUsed == false
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
return == null
size(invocation.arguments[]) == 1
this.lastInvocation.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.lastInvocation.invocation.currentCaptures.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.lastInvocation.matchers.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.isLastResultOrVoidMethod():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.isLastResultOrVoidMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
return == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.isLastResultOrVoidMethod():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.RecordState.lastMethodIsVoidMethod():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.lastMethodIsVoidMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
return == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.lastMethodIsVoidMethod():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.RecordState.replay():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.replay():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.requireLastResultOrVoidMethod():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.requireLastResultOrVoidMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.requireMethodCall(java.lang.String):::ENTER
this.lastInvocationUsed == false
failMessage has only one value
failMessage.toString == "times"
===========================================================================
org.easymock.internal.RecordState.requireMethodCall(java.lang.String):::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
failMessage.toString == "times"
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
failMessage.toString == orig(failMessage.toString)
===========================================================================
org.easymock.internal.RecordState.times(org.easymock.internal.Range):::ENTER
range.minimum == range.maximum
range.minimum == size(this.lastInvocation.matchers[])
this.lastInvocationUsed == false
range has only one value
range.minimum == 1
this.lastInvocation.invocation.arguments[] elements == this.lastInvocation.invocation.arguments[range.minimum-1]
this.lastInvocation.matchers[] elements == this.lastInvocation.matchers[range.minimum-1]
===========================================================================
org.easymock.internal.RecordState.times(org.easymock.internal.Range):::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
range.minimum == range.maximum
range.minimum == orig(range.minimum)
range.minimum == orig(range.maximum)
range.minimum == size(this.lastInvocation.matchers[])
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == true
range.minimum == 1
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.invocation.arguments[] elements == this.lastInvocation.invocation.arguments[range.minimum-1]
this.lastInvocation.matchers[] elements == this.lastInvocation.matchers[range.minimum-1]
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState:::CLASS
===========================================================================
org.easymock.internal.ReplayState:::OBJECT
this.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
===========================================================================
org.easymock.internal.ReplayState.ReplayState(org.easymock.internal.IMocksBehavior):::ENTER
behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
===========================================================================
org.easymock.internal.ReplayState.ReplayState(org.easymock.internal.IMocksBehavior):::EXIT
this.behavior == orig(behavior)
this.behavior.getClass().getName() == orig(behavior.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState.invoke(org.easymock.internal.Invocation):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ReplayState.invoke(org.easymock.internal.Invocation):::EXIT47
===========================================================================
org.easymock.internal.ReplayState.invoke(org.easymock.internal.Invocation):::EXIT
this.behavior == orig(this.behavior)
this.lock == orig(this.lock)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
return == null
size(invocation.arguments[]) == 1
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation):::EXIT
this.behavior == orig(this.behavior)
this.lock == orig(this.lock)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
return == null
size(invocation.arguments[]) == 1
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState.verify():::ENTER
===========================================================================
org.easymock.internal.ReplayState.verify():::EXIT
this.behavior == orig(this.behavior)
this.lock == orig(this.lock)
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
===========================================================================
org.easymock.internal.Result$1ReturningAnswer:::CLASS
===========================================================================
org.easymock.internal.Result$1ReturningAnswer:::OBJECT
this.val$value == null
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.ReturningAnswer(java.lang.Object):::ENTER
$hidden$1 == null
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.ReturningAnswer(java.lang.Object):::EXIT
this.val$value == orig($hidden$1)
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.answer():::ENTER
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.answer():::EXIT
this.val$value == return
return == orig(this.val$value)
return == null
===========================================================================
org.easymock.internal.Result:::CLASS
===========================================================================
org.easymock.internal.Result:::OBJECT
this.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
this.shouldFillInStackTrace == true
===========================================================================
org.easymock.internal.Result.Result(org.easymock.IAnswer, boolean):::ENTER
value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
shouldFillInStackTrace == true
===========================================================================
org.easymock.internal.Result.Result(org.easymock.IAnswer, boolean):::EXIT
this.value == orig(value)
this.shouldFillInStackTrace == orig(shouldFillInStackTrace)
this.value.getClass().getName() == orig(value.getClass().getName())
===========================================================================
org.easymock.internal.Result.answer():::ENTER
===========================================================================
org.easymock.internal.Result.answer():::EXIT
this.value == orig(this.value)
this.shouldFillInStackTrace == orig(this.shouldFillInStackTrace)
return == null
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.easymock.internal.Result.createReturnResult(java.lang.Object):::ENTER
value == null
===========================================================================
org.easymock.internal.Result.createReturnResult(java.lang.Object):::EXIT
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
return.shouldFillInStackTrace == true
===========================================================================
org.easymock.internal.Results:::CLASS
===========================================================================
org.easymock.internal.Results:::OBJECT
size(this.ranges[]) == size(this.results[])
this.callCount one of { 0, 1 }
this.ranges[] elements has only one value
this.ranges[] elements != null
this.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
this.ranges[].getClass().getName() one of { [], [org.easymock.internal.Range] }
this.results[] elements != null
this.results[].getClass().getName() elements == org.easymock.internal.Result.class
this.results[].getClass().getName() one of { [], [org.easymock.internal.Result] }
this.results.getClass().getName() == java.util.ArrayList.class
size(this.ranges[]) one of { 0, 1 }
org.easymock.internal.Results.serialVersionUID < this.callCount
org.easymock.internal.Results.serialVersionUID < size(this.ranges[])-1
this.callCount <= size(this.ranges[])
this.callCount >= size(this.ranges[])-1
===========================================================================
org.easymock.internal.Results.Results():::EXIT
this.callCount == size(this.ranges[])
this.callCount == 0
this.ranges[] == []
this.ranges[].getClass().getName() == []
this.results[] == []
===========================================================================
org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range):::ENTER
this.callCount == size(this.ranges[])
range.minimum == range.maximum
this.callCount == 0
this.ranges[] == []
this.ranges[].getClass().getName() == []
this.results[] == []
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
range has only one value
range.minimum == 1
===========================================================================
org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range):::EXIT
this.callCount == orig(this.callCount)
this.callCount == size(this.ranges[])-1
this.ranges == orig(this.ranges)
this.results == orig(this.results)
result.value == orig(result.value)
result.shouldFillInStackTrace == orig(result.shouldFillInStackTrace)
range.minimum == range.maximum
range.minimum == orig(range.minimum)
range.minimum == orig(range.maximum)
range.minimum == size(this.ranges[])
orig(result) == this.results[this.callCount]
orig(range) == this.ranges[this.callCount]
size(this.ranges[])-1 == orig(size(this.ranges[]))
size(this.ranges[])-1 == orig(size(this.results[]))
this.ranges[this.callCount] == this.ranges[range.minimum-1]
this.ranges[this.callCount] == this.ranges[range.maximum-1]
this.ranges[this.callCount] == this.ranges[orig(range.minimum)-1]
this.ranges[this.callCount] == this.ranges[orig(range.maximum)-1]
this.results[this.callCount] == this.results[range.minimum-1]
this.results[this.callCount] == this.results[range.maximum-1]
this.results[this.callCount] == this.results[orig(range.minimum)-1]
this.results[this.callCount] == this.results[orig(range.maximum)-1]
this.callCount == 0
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
range.minimum == 1
size(this.ranges[]) == 1
orig(range) in this.ranges[]
this.ranges[] elements == orig(range)
this.ranges[] elements == this.ranges[this.callCount]
orig(result) in this.results[]
this.results[] elements == orig(result)
this.results[] elements == this.results[this.callCount]
this.results.getClass().getName() == orig(this.results.getClass().getName())
result.value.getClass().getName() == orig(result.value.getClass().getName())
===========================================================================
org.easymock.internal.Results.getCallCount():::ENTER
this.callCount == size(this.ranges[])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
===========================================================================
org.easymock.internal.Results.getCallCount():::EXIT
this.callCount == return
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
return == orig(this.callCount)
return == size(this.ranges[])
size(this.ranges[]) == orig(size(this.results[]))
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
return == 1
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[return-1]
this.results[] elements == this.results[return-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.Results.getMainInterval():::ENTER
this.callCount == size(this.ranges[])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
===========================================================================
org.easymock.internal.Results.getMainInterval():::EXIT
this.callCount == return.minimum
this.callCount == return.maximum
this.callCount == orig(this.callCount)
this.callCount == size(this.ranges[])
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
size(this.ranges[]) == orig(size(this.results[]))
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.Results.hasValidCallCount():::ENTER
this.callCount == size(this.ranges[])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
===========================================================================
org.easymock.internal.Results.hasValidCallCount():::EXIT
this.callCount == orig(this.callCount)
this.callCount == size(this.ranges[])
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
size(this.ranges[]) == orig(size(this.results[]))
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
return == true
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.Results.hasValidCallCount():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.Results.next():::ENTER
this.callCount == size(this.ranges[])-1
this.callCount == 0
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount]
this.results[] elements == this.results[this.callCount]
===========================================================================
org.easymock.internal.Results.next():::EXIT56
===========================================================================
org.easymock.internal.Results.next():::EXIT
this.callCount == size(this.ranges[])
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
return == this.results[this.callCount-1]
orig(this.callCount) == size(this.ranges[])-1
size(this.ranges[]) == orig(size(this.results[]))
this.ranges[this.callCount-1] == this.ranges[orig(this.callCount)]
this.ranges[this.callCount-1] == orig(this.ranges[this.callCount])
this.results[this.callCount-1] == this.results[orig(this.callCount)]
this.results[this.callCount-1] == orig(this.results[this.callCount])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
return.shouldFillInStackTrace == true
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
return in this.results[]
this.results[] elements == return
this.results[] elements == this.results[this.callCount-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior:::CLASS
===========================================================================
org.easymock.internal.UnorderedBehavior:::OBJECT
this.results[] elements != null
this.results[].getClass().getName() elements == org.easymock.internal.ExpectedInvocationAndResults.class
this.results[].getClass().getName() one of { [], [org.easymock.internal.ExpectedInvocationAndResults] }
this.results.getClass().getName() == java.util.ArrayList.class
this.checkOrder == false
size(this.results[]) one of { 0, 1 }
org.easymock.internal.UnorderedBehavior.serialVersionUID > size(this.results[])
===========================================================================
org.easymock.internal.UnorderedBehavior.UnorderedBehavior(boolean):::ENTER
checkOrder == false
===========================================================================
org.easymock.internal.UnorderedBehavior.UnorderedBehavior(boolean):::EXIT
this.checkOrder == orig(checkOrder)
this.results[] == []
this.results[].getClass().getName() == []
===========================================================================
org.easymock.internal.UnorderedBehavior.addActual(org.easymock.internal.Invocation):::ENTER
size(this.results[]) == size(actual.arguments[])
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
size(this.results[]) == 1
this.results.getClass().getName() == actual.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.UnorderedBehavior.addActual(org.easymock.internal.Invocation):::EXIT63
===========================================================================
org.easymock.internal.UnorderedBehavior.addActual(org.easymock.internal.Invocation):::EXIT
this.results == orig(this.results)
this.results[] == orig(this.results[])
this.checkOrder == orig(this.checkOrder)
actual.mock == orig(actual.mock)
actual.method == orig(actual.method)
actual.arguments == orig(actual.arguments)
actual.arguments[] == orig(actual.arguments[])
actual.currentCaptures == orig(actual.currentCaptures)
size(this.results[]) == size(actual.arguments[])
size(this.results[]) == orig(size(actual.arguments[]))
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
return.shouldFillInStackTrace == true
size(this.results[]) == 1
this.results.getClass().getName() == actual.currentCaptures.getClass().getName()
this.results.getClass().getName() == orig(this.results.getClass().getName())
this.results.getClass().getName() == orig(actual.currentCaptures.getClass().getName())
actual.mock.getClass().getName() == orig(actual.mock.getClass().getName())
actual.arguments.getClass().getName() == orig(actual.arguments.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::ENTER
count.minimum == count.maximum
count.minimum == size(expected.matchers[])
size(this.results[]) == size(expected.invocation.arguments[])-1
size(this.results[]) == size(expected.matchers[])-1
size(expected.invocation.arguments[]) == size(expected.matchers[])
this.results[] == []
this.results[].getClass().getName() == []
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
count has only one value
count.minimum == 1
size(expected.matchers[]) == 1
this.results.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.results.getClass().getName() == expected.matchers.getClass().getName()
expected.invocation.arguments[] elements == expected.invocation.arguments[count.minimum-1]
expected.matchers[] elements == expected.matchers[count.minimum-1]
===========================================================================
org.easymock.internal.UnorderedBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::EXIT45
===========================================================================
org.easymock.internal.UnorderedBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::EXIT
this.results == orig(this.results)
this.checkOrder == orig(this.checkOrder)
expected.invocation == orig(expected.invocation)
expected.invocation.mock == orig(expected.invocation.mock)
expected.invocation.method == orig(expected.invocation.method)
expected.invocation.arguments == orig(expected.invocation.arguments)
expected.invocation.arguments[] == orig(expected.invocation.arguments[])
expected.invocation.currentCaptures == orig(expected.invocation.currentCaptures)
expected.matcher == orig(expected.matcher)
expected.matchers == orig(expected.matchers)
expected.matchers[] == orig(expected.matchers[])
result.value == orig(result.value)
result.shouldFillInStackTrace == orig(result.shouldFillInStackTrace)
count.minimum == count.maximum
count.minimum == orig(count.minimum)
count.minimum == orig(count.maximum)
count.minimum == size(this.results[])
size(this.results[]) == size(expected.invocation.arguments[])
size(this.results[]) == size(expected.matchers[])
size(this.results[]) == orig(size(expected.invocation.arguments[]))
size(this.results[]) == orig(size(expected.matchers[]))
size(this.results[])-1 == orig(size(this.results[]))
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
count.minimum == 1
size(this.results[]) == 1
this.results[] elements == this.results[count.minimum-1]
this.results.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.results.getClass().getName() == expected.matchers.getClass().getName()
this.results.getClass().getName() == orig(this.results.getClass().getName())
this.results.getClass().getName() == orig(expected.invocation.currentCaptures.getClass().getName())
this.results.getClass().getName() == orig(expected.matchers.getClass().getName())
expected.invocation.mock.getClass().getName() == orig(expected.invocation.mock.getClass().getName())
expected.invocation.arguments.getClass().getName() == orig(expected.invocation.arguments.getClass().getName())
expected.invocation.arguments[] elements == expected.invocation.arguments[count.minimum-1]
expected.matchers[] elements == expected.matchers[count.minimum-1]
result.value.getClass().getName() == orig(result.value.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::ENTER
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
size(this.results[]) == 1
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT75
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT75;condition="return == true"
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT
this.results == orig(this.results)
this.results[] == orig(this.results[])
this.checkOrder == orig(this.checkOrder)
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
return == true
size(this.results[]) == 1
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.matchers.Equals:::CLASS
===========================================================================
org.easymock.internal.matchers.Equals:::OBJECT
this.expected.getClass().getName() == java.beans.PropertyChangeEvent.class
===========================================================================
org.easymock.internal.matchers.Equals.Equals(java.lang.Object):::ENTER
expected.getClass().getName() == java.beans.PropertyChangeEvent.class
===========================================================================
org.easymock.internal.matchers.Equals.Equals(java.lang.Object):::EXIT
this.expected == orig(expected)
this.expected.getClass().getName() == orig(expected.getClass().getName())
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::ENTER
this.expected == actual
this.expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT37
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT37;condition="return == true"
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT
this.expected == orig(this.expected)
this.expected == orig(actual)
return == true
this.expected.getClass().getName() == orig(this.expected.getClass().getName())
this.expected.getClass().getName() == orig(actual.getClass().getName())
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected has only one value
expected.getClass().getName() == java.lang.Class.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT120
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
message == null
expected >= 0
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::EXIT
===========================================================================
org.junit.Assert.assertEquals(long, long):::ENTER
expected == actual
expected >= 0
===========================================================================
org.junit.Assert.assertEquals(long, long):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT577
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.fCanUseSuiteMethod == true
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::ENTER
canUseSuiteMethod == true
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::EXIT
this.fCanUseSuiteMethod == orig(canUseSuiteMethod)
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == return.fSuiteBuilder.parents
this.parents == orig(this.parents)
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.fSuiteBuilder has only one value
return.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
this.parents.getClass().getName() == return.fSuiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT31
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT54
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this has only one value
this.fSuiteBuilder has only one value
this.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.fSuiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
this.fSuiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.fSuiteBuilder == orig(suiteBuilder)
this.fSuiteBuilder.parents == suiteBuilder.parents
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
this.fSuiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT25
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
this.fSuiteBuilder == orig(this.fSuiteBuilder)
this.fSuiteBuilder.parents == orig(this.fSuiteBuilder.parents)
this.parents == orig(this.parents)
return == null
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.fSuiteBuilder.getClass().getName() == orig(this.fSuiteBuilder.getClass().getName())
this.parents.getClass().getName() == orig(this.fSuiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == false
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == false
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fNotifier.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[] elements != null
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.fNotifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fChildren[] elements != null
this.fDescription.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDescription.fAnnotations[] elements != null
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fDescription.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fNotifier.fListeners[]) == 1
size(this.fDescription.fChildren[]) one of { 0, 1, 9 }
size(this.fDescription.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDescription.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDescription.fDisplayName.toString
size(this.fNotifier.fListeners[]) != size(this.fDescription.fChildren[])-1
size(this.fNotifier.fListeners[]) >= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[]) != size(this.fDescription.fAnnotations[])
size(this.fDescription.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[])-1 != size(this.fDescription.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(notifier.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 1
size(description.fChildren[]) one of { 0, 1, 9 }
size(description.fAnnotations[]) one of { 0, 1 }
notifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[]) >= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.fNotifier == orig(notifier)
this.fNotifier.fListeners == notifier.fListeners
this.fNotifier.fListeners[] == notifier.fListeners[]
this.fNotifier.fPleaseStop == notifier.fPleaseStop
this.fDescription == orig(description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fChildren[] == description.fChildren[]
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fAnnotations == description.fAnnotations
this.fDescription.fAnnotations[] == description.fAnnotations[]
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(notifier.fListeners[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(notifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 1
size(description.fChildren[]) one of { 0, 1, 9 }
size(description.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() == notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[]) >= size(description.fAnnotations[])
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable:::OBJECT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable():::EXIT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::ENTER
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::EXIT
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.ExpectException:::OBJECT
this.fNext.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class):::ENTER
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class):::EXIT
this.fNext == orig(next)
this.fExpected == orig(expected)
this.fNext.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.ExpectException.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.ExpectException.evaluate():::EXIT
this.fNext == orig(this.fNext)
this.fExpected == orig(this.fExpected)
this.fNext.getClass().getName() == orig(this.fNext.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod:::OBJECT
this.fTarget.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
target.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestMethod == orig(testMethod)
this.fTestMethod.fMethod == testMethod.fMethod
this.fTarget == orig(target)
testMethod.fMethod == orig(testMethod.fMethod)
this.fTarget.getClass().getName() == orig(target.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::EXIT
this.fTestMethod == orig(this.fTestMethod)
this.fTestMethod.fMethod == orig(this.fTestMethod.fMethod)
this.fTarget == orig(this.fTarget)
this.fTarget.getClass().getName() == orig(this.fTarget.getClass().getName())
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.parents == $hidden$2.parents
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
this.fChildren[] elements != null
this.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] elements != null
this.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fAnnotations[])-1
size(this.fChildren[]) >= size(this.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fChildren[] == this.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == this.fChildren[].getClass().getName()
this.fDisplayName == orig(displayName)
this.fAnnotations == orig(annotations)
this.fAnnotations[] == annotations[]
annotations[] == orig(annotations[])
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
annotations[] elements != null
org.junit.runner.Description.EMPTY.fChildren[] is the reverse of this.fChildren[]
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
this.fDisplayName.toString == displayName.toString
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
displayName.toString == orig(displayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(annotations[])-1
size(this.fChildren[]) <= size(this.fAnnotations[])
size(this.fChildren[]) >= size(annotations[])-1
size(this.fChildren[])-1 <= size(annotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(description.fChildren[]) one of { 0, 9 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) % size(description.fChildren[])-1 == 0
size(this.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
size(this.fChildren[])-1 == orig(size(this.fChildren[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fChildren[]) >= 1
size(description.fChildren[]) one of { 0, 9 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
orig(description) in this.fChildren[]
this.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString == orig(this.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= orig(size(this.fChildren[]))-1
size(description.fChildren[]) % size(this.fChildren[]) == 0
size(this.fChildren[]) != size(description.fChildren[])
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) >= size(description.fAnnotations[])
size(description.fAnnotations[])-1 % size(this.fChildren[]) == 0
size(this.fChildren[])-1 != size(description.fChildren[])-1
size(this.fChildren[])-1 % size(description.fChildren[])-1 == 0
size(this.fChildren[])-1 >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])
name.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))
name.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
clazz has only one value
annotations[] elements != null
size(annotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
annotations[] == return.fAnnotations[]
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))-1
annotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString < return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.getChildren():::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
===========================================================================
org.junit.runner.Description.getChildren():::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == return
this.fChildren[] == return[]
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
return == orig(this.fChildren)
return[] == orig(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
return[] elements != null
return[].getClass().getName() elements == org.junit.runner.Description.class
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(return[])
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(return[])-1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fNotifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.fNotifier.fPleaseStop == false
size(this.fNotifier.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fNotifier.fListeners[]) == 1
listener in this.fNotifier.fListeners[]
this.fNotifier.fListeners[] elements == listener
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::ENTER
size(this.fNotifier.fListeners[]) == size(classes[])-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == return.fFailures[]
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
classes[] == orig(classes[])
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(classes[])-1
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fIgnoreCount == orig(size(classes[]))-1
return.fFailures[] == orig(this.fNotifier.fListeners[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount == 9
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2011
return.fStartTime == 1501548486189L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
classes[] elements == classes[return.fIgnoreCount]
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == return.fFailures[]
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fFailures[] == orig(this.fNotifier.fListeners[])
return has only one value
return.fCount == 9
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2011
return.fStartTime == 1501548486189L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == return.fFailures[]
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fFailures[] == orig(this.fNotifier.fListeners[])
return has only one value
return.fCount == 9
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2011
return.fStartTime == 1501548486189L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::ENTER
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::EXIT
classes[] == orig(classes[])
return.fIgnoreCount == size(classes[])-1
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(classes[]))-1
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount == 9
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 2011
return.fStartTime == 1501548486189L
classes[] elements == classes[return.fIgnoreCount]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
return == orig(this.val$runner)
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
this.val$runner.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.val$runner.getClass().getName())
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Result.this.fFailures[])
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount >= 0
org.junit.runner.Result.this.fIgnoreCount == 0
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.ArrayList.class
org.junit.runner.Result.this.fRunTime one of { 0, 2011 }
org.junit.runner.Result.this.fStartTime one of { 0, 1501548486189L }
org.junit.runner.Result.this.fCount >= org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount >= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fIgnoreCount <= org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime >= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime >= size(org.junit.runner.Result.this.fFailures[])
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fCount == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
org.junit.runner.Result.this.fStartTime == 1501548486189L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fCount < org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount >= size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Result.this.fStartTime == 1501548486189L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fCount > org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fIgnoreCount % org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fCount < org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount - orig(org.junit.runner.Result.this.fCount) - 1 == 0
size(org.junit.runner.Description.EMPTY.fChildren[]) % org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fCount >= size(description.fAnnotations[])
org.junit.runner.Result.this.fIgnoreCount <= orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fStartTime > orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
orig(org.junit.runner.Result.this.fCount) >= size(org.junit.runner.Description.EMPTY.fChildren[])
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fIgnoreCount == result.fRunTime
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fStartTime == result.fStartTime
org.junit.runner.Result.this.fCount == 9
org.junit.runner.Result.this.fStartTime == 1501548486189L
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fRunTime == result.fRunTime
org.junit.runner.Result.this.fStartTime == result.fStartTime
result.fCount == orig(org.junit.runner.Result.this.fCount)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fIgnoreCount == orig(result.fRunTime)
result.fIgnoreCount == size(result.fFailures[])
result.fFailures == orig(org.junit.runner.Result.this.fFailures)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
result.fStartTime == orig(result.fStartTime)
result.fCount == 9
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fRunTime == 2011
result.fStartTime == 1501548486189L
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
org.junit.runner.Result.this.fCount == 0
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fCount]
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fStartTime == 1501548486189L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fCount]
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.Result:::OBJECT
this.fCount == this.fIgnoreCount
this.fCount == this.fRunTime
this.fCount == this.fStartTime
this.fCount == size(this.fFailures[])
this has only one value
this.fCount == 0
this.fFailures has only one value
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runner.Result.Result():::EXIT
===========================================================================
org.junit.runner.Result.createListener():::ENTER
===========================================================================
org.junit.runner.Result.createListener():::EXIT
this.fCount == orig(this.fCount)
this.fCount == orig(this.fIgnoreCount)
this.fCount == orig(this.fRunTime)
this.fCount == orig(this.fStartTime)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
return has only one value
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.runner.manipulation.Sorter$1.():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.manipulation.Sorter:::CLASS
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter:::OBJECT
this == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fComparator
this has only one value
this.fComparator has only one value
this.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fComparator.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::ENTER
comparator has only one value
comparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::ENTER
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != object.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(object.getClass().getName())
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
this has only one value
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
this has only one value
this.val$description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fChildren[] contains no nulls and has only one value, of length 1
this.val$description.fChildren[] elements has only one value
this.val$description.fChildren[].getClass().getName() == [org.junit.runner.Description]
this.val$description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "null"
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fChildren[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fChildren[] == $hidden$2.fChildren[]
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fChildren[])
size($hidden$2.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size($hidden$2.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
this.val$result.fIgnoreCount == size(this.val$result.fFailures[])
size(this.val$result.fFailures[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
this has only one value
this.val$result has only one value
this.val$result.fCount == 9
this.val$result.fIgnoreCount == 0
this.val$result.fFailures has only one value
this.val$result.fFailures[] == []
this.val$result.fFailures[].getClass().getName() == []
this.val$result.fFailures.getClass().getName() == java.util.ArrayList.class
this.val$result.fRunTime one of { 0, 2011 }
this.val$result.fStartTime == 1501548486189L
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
this.val$result.fFailures.getClass().getName() == org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
$hidden$2.fIgnoreCount == $hidden$2.fRunTime
$hidden$2.fIgnoreCount == size($hidden$2.fFailures[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fFailures[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
$hidden$2.fCount == 9
$hidden$2.fIgnoreCount == 0
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] == []
$hidden$2.fFailures[].getClass().getName() == []
$hidden$2.fStartTime == 1501548486189L
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fIgnoreCount]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
this.val$result.fCount == $hidden$2.fCount
this.val$result.fIgnoreCount == $hidden$2.fIgnoreCount
this.val$result.fFailures == $hidden$2.fFailures
this.val$result.fFailures[] == $hidden$2.fFailures[]
this.val$result.fRunTime == $hidden$2.fIgnoreCount
this.val$result.fStartTime == $hidden$2.fStartTime
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fCount == orig($hidden$2.fCount)
$hidden$2.fIgnoreCount == $hidden$2.fRunTime
$hidden$2.fIgnoreCount == orig($hidden$2.fIgnoreCount)
$hidden$2.fIgnoreCount == orig($hidden$2.fRunTime)
$hidden$2.fIgnoreCount == size($hidden$2.fFailures[])
$hidden$2.fFailures == orig($hidden$2.fFailures)
$hidden$2.fFailures[] == orig($hidden$2.fFailures[])
$hidden$2.fStartTime == orig($hidden$2.fStartTime)
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fFailures[])
size($hidden$2.fFailures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
$hidden$2.fCount == 9
$hidden$2.fIgnoreCount == 0
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] == []
$hidden$2.fFailures[].getClass().getName() == []
$hidden$2.fFailures.getClass().getName() == java.util.ArrayList.class
$hidden$2.fStartTime == 1501548486189L
this.val$result.fFailures.getClass().getName() == $hidden$2.fFailures.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fIgnoreCount]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
$hidden$2.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fFailures.getClass().getName() == orig($hidden$2.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
this.val$result.fIgnoreCount == this.val$result.fRunTime
each == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
this.val$result.fCount == orig(this.val$result.fCount)
this.val$result.fIgnoreCount == orig(this.val$result.fIgnoreCount)
this.val$result.fIgnoreCount == orig(this.val$result.fRunTime)
this.val$result.fFailures == orig(this.val$result.fFailures)
this.val$result.fFailures[] == orig(this.val$result.fFailures[])
this.val$result.fStartTime == orig(this.val$result.fStartTime)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
orig(each) == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
size(this.val$result.fFailures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
this.val$result.fRunTime == 2011
this.val$result.fFailures.getClass().getName() == orig(this.val$result.fFailures.getClass().getName())
this.val$result.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size($hidden$2.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$7:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size($hidden$2.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
this.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.fListeners has only one value
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fListeners.getClass().getName() == java.util.ArrayList.class
this.fPleaseStop == false
size(this.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[])-1 == orig(size(this.fListeners[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[]) == orig(size(description.fAnnotations[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
result.fIgnoreCount == result.fRunTime
result.fIgnoreCount == size(this.fListeners[])-1
size(this.fListeners[])-1 == size(result.fFailures[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result has only one value
result.fCount == 9
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fStartTime == 1501548486189L
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[result.fIgnoreCount]
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fIgnoreCount == orig(result.fRunTime)
result.fIgnoreCount == size(result.fFailures[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(result.fStartTime)
size(this.fListeners[])-1 == size(result.fFailures[])
size(result.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result.fCount == 9
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fRunTime == 2011
result.fStartTime == 1501548486189L
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[result.fIgnoreCount]
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(this.fListeners[]) == size(description.fChildren[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(this.fListeners[]) == size(description.fChildren[])
size(this.fListeners[]) == orig(size(description.fChildren[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[]) == orig(size(description.fAnnotations[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fListeners[]) == 1
listener in this.fListeners[]
this.fListeners[] elements == listener
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[]) == orig(size(this.fListeners[]))-1
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1:::OBJECT
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::ENTER
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this has only one value
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations has only one value
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler has only one value
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(klass)
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] contains no nulls and has only one value, of length 9
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 9
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="return == true"
return == true
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] contains no nulls and has only one value, of length 9
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 9
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT381
return == null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT383
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT393
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == 0
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT;condition="return == true"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
notifier.fListeners == return.fNotifier.fListeners
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == return.fNotifier.fListeners[]
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == return.fNotifier.fPleaseStop
notifier.fPleaseStop == orig(notifier.fPleaseStop)
return.fNotifier == orig(notifier)
size(notifier.fListeners[]) == size(return.fDescription.fAnnotations[])
size(notifier.fListeners[])-1 == size(return.fDescription.fChildren[])
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.fNotifier has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
return.fDescription.fChildren[] == []
return.fDescription.fChildren[].getClass().getName() == []
return.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == return.fNotifier.fListeners.getClass().getName()
notifier.fListeners.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT264
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != next.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != next.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != next.getClass().getName()
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(next.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(next.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != orig(next.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT84
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != next.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != next.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != next.getClass().getName()
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(next)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fScheduler == null
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
childStatement.getClass().getName() == org.junit.runners.ParentRunner$3.class
org.junit.runners.ParentRunner.this.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != childStatement.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(childStatement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.fListeners == $hidden$2.fListeners
this.val$notifier.fListeners[] == $hidden$2.fListeners[]
this.val$notifier.fPleaseStop == $hidden$2.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$2.fListeners == orig($hidden$2.fListeners)
$hidden$2.fListeners[] == orig($hidden$2.fListeners[])
$hidden$2.fPleaseStop == orig($hidden$2.fPleaseStop)
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
this.val$notifier.fListeners.getClass().getName() == $hidden$2.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$2.fListeners.getClass().getName() == orig($hidden$2.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[] elements != null
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
this.val$each.getClass().getName() != this.val$notifier.fListeners.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$3 has only one value
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
$hidden$2.getClass().getName() != $hidden$3.fListeners.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$notifier == orig($hidden$3)
this.val$notifier.fListeners == $hidden$3.fListeners
this.val$notifier.fListeners[] == $hidden$3.fListeners[]
this.val$notifier.fPleaseStop == $hidden$3.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$3.fListeners == orig($hidden$3.fListeners)
$hidden$3.fListeners[] == orig($hidden$3.fListeners[])
$hidden$3.fPleaseStop == orig($hidden$3.fPleaseStop)
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
this.val$each.getClass().getName() != $hidden$3.fListeners.getClass().getName()
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$3.fListeners.getClass().getName() == orig($hidden$3.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.run():::EXIT
this.val$each == orig(this.val$each)
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
o1.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
org.junit.runners.ParentRunner.this.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != o1.getClass().getName()
o1.getClass().getName() == o2.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
return == 0
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(o1.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(testClass)
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.comparator():::ENTER
===========================================================================
org.junit.runners.ParentRunner.comparator():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.junit.runners.ParentRunner$4.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fChildren[].getClass().getName() one of { [org.junit.runner.Description], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
return.fDisplayName.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
size(return.fChildren[]) one of { 1, 9 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 9 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getName():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getName():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
this.fTestClass == return
this.fTestClass.fClass == return.fClass
this.fTestClass.fMethodsForAnnotations == return.fMethodsForAnnotations
this.fTestClass.fFieldsForAnnotations == return.fFieldsForAnnotations
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fTestClass)
return.fClass == orig(this.fTestClass.fClass)
return.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
return.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
return.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
this.fTestClass.fFieldsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == return.fFieldsForAnnotations.getClass().getName()
return.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::ENTER
this.getClass().getName() != each.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != each.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != each.getClass().getName()
this.fScheduler.getClass().getName() != each.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(each.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(each.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(each.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::ENTER
org.junit.runner.manipulation.Sorter.NULL == sorter
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
this has only one value
this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL == orig(sorter)
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(sorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(sorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != errors.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != errors.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != errors.getClass().getName()
this.fScheduler.getClass().getName() != errors.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(errors.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(errors.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(errors.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.Suite:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this has only one value
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 1
this.fRunners[] elements has only one value
this.fRunners[] elements != null
this.fRunners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
this.fRunners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == java.util.ArrayList.class
this.fTestClass has only one value
this.fTestClass.fClass == null
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations has only one value
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler has only one value
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.fRunners[]) == 1
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.fRunners == orig(runners)
this.fRunners[] == runners[]
this.fTestClass.fClass == orig(klass)
runners[] == orig(runners[])
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == orig(runners.getClass().getName())
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
size(this.fRunners[]) == orig(size(classes[]))
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
child has only one value
child.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
child in this.fRunners[]
this.fRunners[] elements == child
child.getClass().getName() in this.fRunners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(this.fRunners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fRunners[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() == [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description]
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.lang3.event.EventListenerSupportTest"
return.fAnnotations has only one value
size(return.fChildren[]) == 9
orig(child) in this.fRunners[]
this.fRunners[] elements == orig(child)
orig(child.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.fRunners == return
this.fRunners[] == return[]
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fRunners)
return[] == orig(this.fRunners[])
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fRunners.getClass().getName() == return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(this.fRunners.getClass().getName())
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
size(this.fRunners[]) == size(notifier.fListeners[])
runner has only one value
runner.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fPleaseStop == false
runner in this.fRunners[]
this.fRunners[] elements == runner
runner.getClass().getName() in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
size(this.fRunners[]) == size(notifier.fListeners[])
size(this.fRunners[]) == orig(size(notifier.fListeners[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fPleaseStop == false
orig(runner) in this.fRunners[]
this.fRunners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == notifier.fListeners.getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fRunners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMember:::OBJECT
this.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
===========================================================================
org.junit.runners.model.FrameworkMember.FrameworkMember():::EXIT
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::ENTER
members has only one value
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
members.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != members.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT
members[] == orig(members[])
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return == false
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod$1:::OBJECT
this.val$target.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.val$params.getClass().getName() == java.lang.Object[].class
this.val$params[] == []
this.val$params[].getClass().getName() == []
this.val$target.getClass().getName() != this.val$params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::ENTER
$hidden$2.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
$hidden$3.getClass().getName() == java.lang.Object[].class
$hidden$3[] == []
$hidden$2.getClass().getName() != $hidden$3.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::EXIT
this.val$target == orig($hidden$2)
this.val$params == orig($hidden$3)
this.val$params[] == $hidden$3[]
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
$hidden$3[] == orig($hidden$3[])
$hidden$3[] == []
this.val$target.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$params.getClass().getName() == orig($hidden$3.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::EXIT
this.val$target == orig(this.val$target)
this.val$params == orig(this.val$params)
this.val$params[] == orig(this.val$params[])
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
return == null
this.val$target.getClass().getName() == orig(this.val$target.getClass().getName())
this.val$params.getClass().getName() == orig(this.val$params.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::EXIT
this.fMethod == orig(method)
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] elements != null
size(return[]) one of { 0, 1 }
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::EXIT
this.fMethod == orig(this.fMethod)
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::ENTER
target.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
params.getClass().getName() == java.lang.Object[].class
params[] == []
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::EXIT
this.fMethod == orig(this.fMethod)
params[] == orig(params[])
params[] == []
return == null
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT
this.fMethod == orig(this.fMethod)
other.fMethod == orig(other.fMethod)
return == false
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == orig(parent)
this.parents has only one value
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents has only one value
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT57
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fMethodsForAnnotations.getClass().getName() == this.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.fClass == orig(klass)
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::ENTER
this.fMethodsForAnnotations == map
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
member.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
this.fMethodsForAnnotations.getClass().getName() != member.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT56
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations == orig(map)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() != orig(member.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::ENTER
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return[].getClass().getName() one of { [], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 9 }
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT129
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT130
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass has only one value)  ==>  (return has only one value)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
this.fClass == return
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return == orig(this.fClass)
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getName():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT109
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "null"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT110
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "org.apache.commons.lang3.event.EventListenerSupportTest"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass == null)  <==>  (return.toString == "null")
(this.fClass has only one value)  <==>  (return.toString == "org.apache.commons.lang3.event.EventListenerSupportTest")
return.toString one of { "null", "org.apache.commons.lang3.event.EventListenerSupportTest" }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
this.fClass == testClass
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fClass == orig(testClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[].getClass().getName() elements == java.lang.Class.class
return[].getClass().getName() one of { [], [java.lang.Class, java.lang.Class] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 2 }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotation has only one value
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return == false
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="not(return == true)"
