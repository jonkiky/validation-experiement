===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.expected():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.expected():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.timeout():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.timeout():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return == 0
===========================================================================
org.apache.commons.lang3.JavaVersion:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion:::OBJECT
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::ENTER
$hidden$1.toString > name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
this.value == orig(value)
this.name == orig(name)
this.name.toString == name.toString
$hidden$1.toString > name.toString
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::ENTER
nom has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT149
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == return
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == return.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == return.name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
nom.toString == "1.8"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
nom.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
nom.toString == return.name.toString
nom.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
nom.toString == orig(nom.toString)
===========================================================================
org.apache.commons.lang3.ObjectUtils$Null:::CLASS
===========================================================================
org.apache.commons.lang3.ObjectUtils$Null:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.ObjectUtils$Null.Null():::EXIT
===========================================================================
org.apache.commons.lang3.ObjectUtils:::CLASS
org.apache.commons.lang3.ObjectUtils.NULL has only one value
===========================================================================
org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object):::ENTER
obj.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object):::EXIT
org.apache.commons.lang3.ObjectUtils.NULL == orig(org.apache.commons.lang3.ObjectUtils.NULL)
return.toString one of { "", "," }
===========================================================================
org.apache.commons.lang3.SystemUtils:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements >= org.apache.commons.lang3.JavaVersion.JAVA_1_1.value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements <= org.apache.commons.lang3.JavaVersion.JAVA_1_8.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT1321
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
property.toString != return.toString
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::ENTER
version has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1407
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1407;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
version.toString == "1.8"
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
version.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
version.toString > versionPrefix.toString
version.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
version.toString == orig(version.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
osVersion has only one value
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1427
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1427;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osName.toString == "Windows 10"
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9", "Windows Server 2008" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osName.toString == orig(osName.toString)
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osVersion.toString == orig(osVersion.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
osName.toString != osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1443
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1443;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1443;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString != osNamePrefix.toString
osName.toString == orig(osName.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.daikon.StrBuilderAppendInsertTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.StrBuilderAppendInsertTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.text.StrBuilder:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilder:::OBJECT
this.buffer != null
this.buffer[] elements >= 0
this.size >= 0
this.newLine.toString == "#"
this.nullText.toString one of { "NULL", "null" }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > size(this.buffer[])
this.size <= size(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::ENTER
initialCapacity one of { 1, 32 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::EXIT
this.size == this.buffer[this.size]
this.size == this.buffer[orig(initialCapacity)-1]
this.newLine == this.nullText
orig(initialCapacity) == size(this.buffer[])
this.buffer[] elements == 0
this.buffer[] one of { [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= orig(initialCapacity)
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(initialCapacity)
this.buffer[] elements == this.size
this.size <= size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::ENTER
str != null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::EXIT
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.size one of { 0, 3, 9 }
this.newLine == null
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.toString == orig(str.toString)
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[] one of { [102, 97, 108, 115, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 102, 97, 108, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 5, 9 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 10 }
this.buffer[this.size-1] == 101
this.buffer[orig(this.size)] one of { 102, 116 }
orig(this.buffer[post(this.size)-1]) one of { 0, 13 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
ch one of { 33, 44, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(ch) == this.buffer[this.size-1]
orig(ch) == this.buffer[return.size-1]
orig(ch) == this.buffer[orig(this.size)]
orig(ch) == return.buffer[this.size-1]
orig(ch) == return.buffer[return.size-1]
orig(ch) == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.size - orig(this.size) - 1 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.nullText.toString == "NULL"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
size(chars[]) one of { 0, 3 }
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT723
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(chars) == null
this.buffer[this.size-1] == 76
this.buffer[orig(this.size)] == 78
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT732
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(size(chars[]))
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(chars) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(this.size)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(return.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(return.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(this.buffer[post(return.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[return.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[return.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)] one of { 0, 102 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 0, 3 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[] elements one of { 102, 111 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[] one of { [], [102, 111, 111] })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(size(chars[])) one of { 0, 3 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[] elements one of { 0, 102, 111 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.size == orig(size(chars[])))
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
this.nullText.toString == "NULL"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
this.buffer[orig(this.size)] one of { 0, 78, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[startIndex]
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.nullText.toString == "NULL"
chars[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102], [98, 97, 114], [102, 111, 111] }
length one of { 0, 1, 3 }
size(chars[]) one of { 3, 9 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[length] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT746
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(chars) == null
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT760
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 111, 114 }
this.buffer[orig(startIndex)] one of { 0, 98, 102 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(chars) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102], [98, 97, 114], [102, 111, 111] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(size(chars[])) one of { 3, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) elements one of { 0, 102, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 6 }
this.newLine == null
this.nullText.toString == "NULL"
chars[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102], [98, 97, 114], [102, 111, 111] }
orig(startIndex) one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 76, 111, 114 }
chars[this.size-1] one of { 111, 114 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[length]) % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(double):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [48, 49, 50, 46, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [50, 46, 51, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
value == 4.5
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 50 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(double):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[] one of { [48, 49, 50, 46, 51, 52, 46, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [52, 46, 53, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 8 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 13 }
this.buffer[this.size-1] == 53
this.buffer[orig(this.size)] == 52
orig(this.buffer[post(this.size)-1]) one of { 0, 51 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(float):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 2 }
this.newLine == null
value == 2.3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 49 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(float):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[] one of { [48, 49, 50, 46, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [50, 46, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 51
this.buffer[orig(this.size)] == 50
orig(this.buffer[post(this.size)-1]) one of { 0, 10 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == value
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[value]
this.newLine == this.nullText
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(value) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(value) == this.buffer[this.size]
orig(value) == this.buffer[return.size]
orig(value) == return.buffer[this.size]
orig(value) == orig(this.buffer[post(this.size)])
orig(value) == orig(this.buffer[post(this.size)-1])
orig(value) == orig(this.buffer[post(value)])
orig(value) == return.buffer[return.size]
orig(value) == orig(this.buffer[post(return.size)])
orig(value) == orig(this.buffer[post(return.size)-1])
orig(value) == orig(this.buffer[this.size])
orig(value) == orig(this.buffer[value])
this.buffer[this.size-1] == this.buffer[orig(value)]
this.buffer[return.size-1] == this.buffer[orig(value)]
this.buffer[orig(value)] == return.buffer[this.size-1]
this.buffer[orig(value)] == return.buffer[return.size-1]
this.buffer[] == [48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 48 }
this.size == 1
this.newLine == null
orig(value) == 0
this.buffer[orig(value)] == 48
orig(this.buffer[]) elements == orig(value)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
seq has only one value
seq.getClass().getName() == java.lang.String.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 115
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::EXIT481
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 122, 121, 101, 115, 83, 101, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 12
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 113
this.buffer[orig(this.size)] == 83
this.buffer[orig(this.size)-1] == 115
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[startIndex-1] == this.buffer[length]
this has only one value
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
seq has only one value
seq.getClass().getName() == java.lang.String.class
startIndex == 4
length == 3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 114
this.buffer[startIndex] == 97
this.buffer[length] == 98
this.buffer[length-1] == 111
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int):::EXIT499
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)] == this.buffer[orig(startIndex)]
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer[orig(startIndex)] == orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == return.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == orig(this.buffer[startIndex])
this.buffer[orig(startIndex)-1] == this.buffer[orig(length)]
this.buffer[orig(length)] == orig(this.buffer[post(startIndex)-1])
this.buffer[orig(length)] == orig(this.buffer[post(length)])
this.buffer[orig(length)] == return.buffer[orig(startIndex)-1]
this.buffer[orig(length)] == orig(this.buffer[startIndex-1])
this.buffer[orig(length)] == orig(this.buffer[length])
this.buffer[orig(length)-1] == orig(this.buffer[post(length)-1])
this.buffer[orig(length)-1] == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 100
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(startIndex)] == 97
this.buffer[orig(length)] == 98
this.buffer[orig(length)-1] == 111
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT463
this.newLine == orig(obj)
this.size one of { 0, 4, 8 }
orig(this.size) one of { 0, 4 }
orig(obj) == null
this.buffer[this.size] one of { 0, 44, 97 }
orig(this.buffer[this.size]) one of { 0, 97, 110 }
this.buffer[] >= orig(this.buffer[]) (elementwise)
orig(this.buffer[this.size]) in this.buffer[]
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT465
orig(obj) != null
this.buffer[orig(this.size)] one of { 54, 98, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) in this.buffer[]
this.size > orig(this.size)
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(this.size)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
orig(this.size) < this.buffer[this.size-1]
orig(this.size) < this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] >= this.buffer[orig(this.size)]
this.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] > orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[this.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1])
(orig(obj) != null)  ==>  (orig(this.buffer[post(return.size)-1]) in this.buffer[])
(orig(obj) != null)  ==>  (orig(this.buffer[post(this.size)-1]) <= return.buffer[return.size-1])
(orig(obj) != null)  ==>  (orig(this.buffer[post(this.size)-1]) in this.buffer[])
(orig(obj) != null)  ==>  (orig(this.size) < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (orig(this.size) < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (orig(this.size) < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (orig(this.size) < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (orig(this.size) < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (return.buffer[return.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (return.buffer[return.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (return.buffer[this.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (return.buffer[this.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (return.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[orig(this.size)] <= return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[orig(this.size)] <= return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[orig(this.size)] one of { 54, 98, 102 })
(orig(obj) != null)  ==>  (this.buffer[return.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (this.buffer[return.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[return.size-1] >= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[return.size-1] >= this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[this.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (this.buffer[this.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[this.size-1] >= this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= this.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= this.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.size != orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.size != orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.size != orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (this.size != this.buffer[this.size])
(orig(obj) != null)  ==>  (this.size < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.size < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.size < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.size < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.size < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.size > orig(this.size))
(orig(obj) != null)  ==>  (this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(orig(obj) == null)  ==>  (orig(this.buffer[this.size]) in this.buffer[])
(orig(obj) == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 97, 110 })
(orig(obj) == null)  ==>  (orig(this.size) one of { 0, 4 })
(orig(obj) == null)  ==>  (this.buffer[] >= orig(this.buffer[]) (elementwise))
(orig(obj) == null)  ==>  (this.buffer[this.size] <= orig(this.buffer[this.size]))
(orig(obj) == null)  ==>  (this.buffer[this.size] <= this.buffer[orig(this.size)])
(orig(obj) == null)  ==>  (this.buffer[this.size] one of { 0, 44, 97 })
(orig(obj) == null)  ==>  (this.newLine == orig(obj))
(orig(obj) == null)  ==>  (this.size one of { 0, 4, 8 })
this.newLine == null
return != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size <= this.buffer[orig(this.size)]
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) <= this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::ENTER
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine.toString == str.toString
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT511
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(size(this.buffer[]))
this.newLine == orig(str)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 15 }
this.newLine == null
this.nullText has only one value
this.nullText.toString == "NULL"
orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
orig(this.size) one of { 0, 11 }
this.buffer[this.size-1] == 76
this.buffer[orig(this.size)] == 78
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT520
orig(str) != null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
(orig(str) != null)  ==>  (size(this.buffer[]) one of { 32, 35, 41 })
(orig(str) != null)  ==>  (this.newLine.toString == "#")
(orig(str) != null)  ==>  (this.newLine.toString == str.toString)
(orig(str) != null)  ==>  (this.nullText.toString one of { "NULL", "null" })
(orig(str) == null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[]))
(orig(str) == null)  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (orig(this.buffer[post(return.size)-1]) == 0)
(orig(str) == null)  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(orig(str) == null)  ==>  (orig(this.buffer[this.size]) == 0)
(orig(str) == null)  ==>  (orig(this.size) one of { 0, 11 })
(orig(str) == null)  ==>  (return.buffer[return.size-1] == 76)
(orig(str) == null)  ==>  (return.buffer[this.size-1] == 76)
(orig(str) == null)  ==>  (this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1]))
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1]))
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size]))
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size])
(orig(str) == null)  ==>  (this.buffer[orig(this.size)] == 78)
(orig(str) == null)  ==>  (this.buffer[return.size-1] == 76)
(orig(str) == null)  ==>  (this.buffer[this.size-1] == 76)
(orig(str) == null)  ==>  (this.buffer[this.size] == 0)
(orig(str) == null)  ==>  (this.newLine == null)
(orig(str) == null)  ==>  (this.newLine == orig(str))
(orig(str) == null)  ==>  (this.nullText has only one value)
(orig(str) == null)  ==>  (this.nullText.toString == "NULL")
(orig(str) == null)  ==>  (this.size one of { 4, 15 })
return != null
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine.toString == str.toString
this.newLine.toString == return.newLine.toString
this.newLine.toString == orig(this.newLine.toString)
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
str.toString == orig(str.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 6 }
this.newLine == null
this.nullText.toString == "NULL"
str.toString one of { "abcbardef", "bar", "foo" }
startIndex one of { 0, 3, 4 }
length one of { 0, 1, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[startIndex] one of { 0, 97 }
this.buffer[length] one of { 0, 98, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[length]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > length
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[length]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= startIndex
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
length < size(this.buffer[])-1
length >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
length != this.buffer[length]
size(this.buffer[])-1 != this.buffer[startIndex]
size(this.buffer[])-1 != this.buffer[length]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[length]
this.buffer[startIndex] <= this.buffer[length]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT535
this.newLine == orig(str)
orig(this.size) == orig(startIndex)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT549
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6, 9 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 100, 111, 114 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)] == this.buffer[orig(startIndex)]
this.buffer[orig(startIndex)] == return.buffer[orig(this.size)]
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[startIndex]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[startIndex]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.size))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[startIndex]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.newLine == orig(str))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 100, 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3, 4 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[startIndex]) one of { 0, 97 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) one of { 0, 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.toString one of { "abcbardef", "bar", "foo" })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.newLine == null
this.nullText.toString == "NULL"
str.toString one of { "abcbardef", "bar", "foo" }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(length)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(length)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[startIndex]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.size >= orig(this.size)
this.size >= orig(startIndex)
this.size >= orig(length)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(startIndex)]
this.size != this.buffer[orig(length)]
orig(this.buffer[post(this.size)-1]) % this.size == 0
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[startIndex])
this.size != orig(this.buffer[length])
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
str.toString == orig(str.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(startIndex)]
orig(this.size) <= this.buffer[orig(length)]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) != this.buffer[orig(startIndex)]
orig(startIndex) <= this.buffer[orig(length)]
orig(length) < size(this.buffer[])-1
orig(length) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(length) < this.buffer[this.size-1]
orig(length) <= this.buffer[orig(startIndex)]
orig(length) != this.buffer[orig(length)]
orig(length) != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
size(this.buffer[])-1 != this.buffer[orig(length)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[startIndex])
size(this.buffer[])-1 != orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[length])
this.buffer[this.size-1] != this.buffer[orig(startIndex)]
this.buffer[this.size-1] != this.buffer[orig(length)]
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
this.buffer[this.size-1] > orig(this.buffer[startIndex])
this.buffer[this.size-1] > orig(this.buffer[length])
this.buffer[orig(startIndex)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(startIndex)] != orig(this.buffer[length])
this.buffer[orig(length)] >= orig(this.buffer[startIndex])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, java.lang.Object[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
objs.getClass().getName() == java.lang.Object[].class
size(objs[]) one of { 1, 2 }
objs[this.size] has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, java.lang.Object[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
objs[] == orig(objs[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.newLine == null
this.buffer[this.size-1] one of { 48, 101, 105 }
this.buffer[orig(this.size)] == 72
objs[orig(this.size)] has only one value
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
this.nullText.toString == "NULL"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::EXIT574
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 22 }
orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
orig(this.size) one of { 0, 3, 18 }
orig(str) == null
this.buffer[this.size-1] one of { 76, 111 }
this.buffer[orig(this.size)] one of { 0, 78 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::EXIT583
this.size one of { 3, 6, 25 }
orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
orig(this.size) one of { 0, 3, 22 }
this.buffer[this.size-1] one of { 111, 114, 122 }
this.buffer[orig(this.size)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(orig(str) == null)  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (orig(this.size) one of { 0, 3, 18 })
(orig(str) == null)  ==>  (this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (this.buffer[orig(this.size)] one of { 0, 78 })
(orig(str) == null)  ==>  (this.buffer[this.size-1] one of { 76, 111 })
(orig(str) == null)  ==>  (this.size one of { 3, 4, 22 })
this.newLine == null
this.nullText.toString == "NULL"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
orig(this.buffer[post(this.size)-1]) % this.size == 0
this.size != orig(this.buffer[post(this.size)-1])
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] != this.buffer[orig(this.size)]
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[startIndex]
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.nullText.toString == "NULL"
length one of { 0, 1, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[length] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::EXIT597
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(str) == null
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::EXIT611
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 111, 114 }
this.buffer[orig(startIndex)] one of { 0, 98, 102 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) elements one of { 0, 102, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 6 }
this.newLine == null
this.nullText.toString == "NULL"
orig(startIndex) one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 76, 111, 114 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[length]) % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 83, 101, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 12 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder):::EXIT633
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 83, 101, 113, 98, 108, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6, 15 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 100, 111, 114 }
this.buffer[orig(this.size)] one of { 0, 98, 102 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 6 }
this.newLine == null
startIndex one of { 0, 3, 4 }
length one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[startIndex] one of { 0, 97 }
this.buffer[length] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder, int, int):::EXIT662
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)] == this.buffer[orig(startIndex)]
this.buffer[orig(startIndex)] == return.buffer[orig(this.size)]
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6, 9 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 100, 111, 114 }
this.buffer[orig(length)] one of { 0, 98, 102 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[startIndex]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(long):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [48, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 1 }
this.newLine == null
value == 1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 48 }
this.buffer[value] one of { 0, 13 }
this.buffer[value-1] == 48
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(long):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(value)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[value])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == return.buffer[orig(this.size)]
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[this.size])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[this.size])
this.buffer[] one of { [48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 1, 2 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 13 }
this.buffer[this.size-1] == 49
this.buffer[orig(value)] one of { 13, 49 }
this.buffer[orig(value)-1] one of { 48, 49 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == str.newLine
this.nullText == str.newLine
str.newLine == str.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[str.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 6 }
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] elements >= 0
str.size one of { 0, 3 }
str.newLine == null
size(str.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[str.size] one of { 0, 98, 102 }
str.buffer[this.size] one of { 0, 102 }
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.buffer[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::EXIT674
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
orig(this.size) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(this.size) == 0
orig(str) == null
this.buffer[this.size-1] == 76
this.buffer[orig(this.size)] == 78
orig(this.buffer[]) elements == orig(this.size)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::EXIT683
this.newLine == this.nullText
this.newLine == str.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[str.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[orig(str.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(str.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[str.size])
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6, 9 }
this.buffer[this.size-1] one of { 111, 114, 115 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == str.newLine
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == str.newLine
this.nullText == return.nullText
this.nullText == orig(this.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
str.newLine == str.nullText
str.newLine == orig(str.newLine)
str.newLine == orig(str.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[str.size])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.size))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(this.size)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114, 115 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size]) in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size]) one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) one of { 0, 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (size(str.buffer[]) one of { 32, 35 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[] elements >= 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(this.size)] % this.size == 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(this.size)] in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(this.size)] one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] % this.buffer[this.size-1] == 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] % this.size == 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.newLine == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.size one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(this.size)] in str.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[str.size] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == str.newLine)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] elements >= 0
str.size one of { 0, 3 }
str.newLine == null
size(str.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[str.size] one of { 0, 98, 102 }
str.buffer[this.size-1] one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
str.buffer[orig(this.size)] one of { 0, 102 }
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.buffer[]
str.buffer[this.size-1] in this.buffer[]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
str.buffer[orig(this.size)] in this.buffer[]
orig(this.buffer[str.size]) in this.buffer[]
str.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
str.buffer[orig(this.size)] % this.size == 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
this.buffer[orig(this.size)] in str.buffer[]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.buffer[])
str.buffer[this.size-1] % this.buffer[this.size-1] == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.newLine == str.newLine
this.nullText == str.newLine
str.newLine == str.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[str.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[startIndex]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[str.size]
this.buffer[str.size] == str.buffer[str.size]
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
str.buffer[] elements >= 0
str.size one of { 3, 9 }
str.newLine == null
length one of { 0, 1, 3 }
size(str.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[str.size] == 0
this.buffer[str.size-1] one of { 0, 111 }
this.buffer[length] one of { 0, 102 }
str.buffer[str.size-1] one of { 102, 111, 114 }
str.buffer[startIndex] one of { 0, 98, 102 }
str.buffer[length] one of { 0, 98 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT697
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(str) == null
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT711
this.newLine == this.nullText
this.newLine == str.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(startIndex)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[startIndex])
this.buffer[orig(startIndex)] == str.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == orig(str.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(str.buffer[this.size])
this.buffer[orig(startIndex)] == orig(str.buffer[startIndex])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[str.size-1])
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 111, 114 }
this.buffer[orig(startIndex)] one of { 0, 98, 102 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == str.newLine
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == str.newLine
this.nullText == return.nullText
this.nullText == orig(this.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
str.newLine == str.nullText
str.newLine == orig(str.newLine)
str.newLine == orig(str.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[str.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[str.size])
this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)]
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[str.size-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) elements one of { 0, 102, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) == orig(this.buffer[str.size-1]))
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size-1]) in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (size(str.buffer[]) one of { 35, 41 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[] elements >= 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(length)] one of { 0, 98 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[str.size-1] one of { 102, 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size] one of { 0, 100 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.newLine == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.size one of { 3, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[str.size-1] one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == str.newLine)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 6 }
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
str.buffer[] elements >= 0
str.size one of { 3, 9 }
str.newLine == null
orig(startIndex) one of { 0, 3 }
size(str.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 76, 111, 114 }
this.buffer[str.size-1] one of { 0, 111 }
str.buffer[this.size] one of { 0, 100 }
str.buffer[this.size-1] one of { 111, 114 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
str.buffer[str.size-1] one of { 102, 111, 114 }
str.buffer[orig(startIndex)] one of { 0, 98, 102 }
str.buffer[orig(length)] one of { 0, 98 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
str.buffer[orig(startIndex)] in this.buffer[]
orig(this.buffer[str.size-1]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[length]) % this.size == 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
this.buffer[orig(startIndex)] in str.buffer[]
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Iterable):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Iterable):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 9 }
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Object[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
size(array[]) one of { 0, 3 }
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Object[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
array[] == orig(array[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 9 }
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.util.Iterator):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.util.Iterator):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 9 }
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(int, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.size == 0
this.newLine == null
value == 123
padChar == 45
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.buffer[] elements < value
this.size <= this.buffer[this.size]
value > width
value > this.buffer[this.size]
width < padChar
width < size(this.buffer[])-1
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(int, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.newLine == null
return has only one value
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.size)
this.buffer[] elements < orig(value)
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size < orig(value)
this.size >= orig(width)
this.size < orig(padChar)
this.size < size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= this.buffer[orig(this.size)]
orig(value) > this.buffer[orig(this.size)]
orig(width) < size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == 0
this.newLine == null
this.nullText.toString == "null"
obj.getClass().getName() == java.lang.String.class
padChar == 45
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= this.buffer[this.size]
width < padChar
width < size(this.buffer[])-1
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
this.nullText.toString == "null"
return != null
this.buffer[this.size] one of { 0, 45 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.size)
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size >= orig(width)
this.size < orig(padChar)
this.size < size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= this.buffer[this.size]
orig(this.size) <= this.buffer[orig(this.size)]
orig(width) < size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
orig(padChar) >= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(int, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.size == 0
this.newLine == null
value == 123
padChar == 45
this.buffer[this.size] one of { 0, 49 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.buffer[] elements < value
this.size <= this.buffer[this.size]
value > width
value > this.buffer[this.size]
width < padChar
width < size(this.buffer[])-1
padChar != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(int, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 49 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= orig(this.size)
this.buffer[] elements < orig(value)
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size < orig(value)
this.size >= orig(width)
this.size < orig(padChar)
this.size < size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= this.buffer[orig(this.size)]
orig(value) > this.buffer[orig(this.size)]
orig(width) < size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
orig(padChar) != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char):::ENTER
this.size == 0
this.newLine == null
this.nullText.toString == "null"
obj.getClass().getName() == java.lang.String.class
padChar == 45
size(this.buffer[]) one of { 1, 32 }
this.buffer[this.size] one of { 0, 49, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > width
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size in this.buffer[]
this.size <= size(this.buffer[])-1
this.size <= this.buffer[this.size]
width < padChar
width <= size(this.buffer[])
width != size(this.buffer[])-1
padChar > size(this.buffer[])
padChar != this.buffer[this.size]
size(this.buffer[]) != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] >= orig(this.buffer[]) (lexically)
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.newLine == null
this.nullText.toString == "null"
return != null
size(this.buffer[]) one of { 1, 32 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.size)
this.size >= orig(this.size)
this.size >= orig(width)
this.size < orig(padChar)
this.size != size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= size(this.buffer[])-1
orig(this.size) <= this.buffer[orig(this.size)]
orig(width) <= size(this.buffer[])
orig(width) != size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
orig(padChar) > size(this.buffer[])
orig(padChar) != this.buffer[orig(this.size)]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 != this.buffer[orig(this.size)]
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::ENTER
this.nullText == null
size(this.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 10, 13 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::EXIT437
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.newLine == null
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.size - orig(this.size) - 2 == 0
size(this.buffer[])-1 > this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::EXIT439
size(this.buffer[]) == this.buffer[this.size-1]
size(this.buffer[]) == this.buffer[return.size-1]
size(this.buffer[]) == this.buffer[orig(this.size)]
size(this.buffer[]) == return.buffer[this.size-1]
size(this.buffer[]) == return.buffer[return.size-1]
size(this.buffer[]) == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 35, 45 }
this.size == 4
this.newLine has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements one of { 0, 45 }
orig(this.size) == 3
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[orig(this.size)-1] == 45
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
(this.newLine == null)  <==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.buffer[orig(this.size)])
(this.newLine == null)  <==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.buffer[this.size-1])
(this.newLine == null)  <==>  (size(this.buffer[])-1 > this.buffer[orig(this.size)])
(this.newLine == null)  <==>  (size(this.buffer[])-1 > this.buffer[this.size-1])
(this.newLine == null)  <==>  (this.buffer[orig(this.size)] == 13)
(this.newLine == null)  <==>  (this.buffer[this.size-1] < this.buffer[orig(this.size)])
(this.newLine == null)  <==>  (this.buffer[this.size-1] == 10)
(this.newLine == null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 10 })
(this.newLine == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 10, 13 })
(this.newLine == null)  ==>  (size(this.buffer[]) one of { 32, 35 })
(this.newLine == null)  ==>  (this.newLine == this.nullText)
(this.newLine == null)  ==>  (this.size - orig(this.size) - 2 == 0)
(this.newLine has only one value)  <==>  (size(this.buffer[]) == this.buffer[orig(this.size)])
(this.newLine has only one value)  <==>  (size(this.buffer[]) == this.buffer[this.size-1])
(this.newLine has only one value)  <==>  (this.buffer[orig(this.size)] == 35)
(this.newLine has only one value)  <==>  (this.buffer[this.size-1] == 35)
(this.newLine has only one value)  ==>  (orig(this) has only one value)
(this.newLine has only one value)  ==>  (orig(this.buffer[]) == [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.newLine has only one value)  ==>  (orig(this.buffer[]) elements one of { 0, 45 })
(this.newLine has only one value)  ==>  (orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)]) == 0)
(this.newLine has only one value)  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.newLine has only one value)  ==>  (orig(this.buffer[this.size-1]) == 45)
(this.newLine has only one value)  ==>  (orig(this.buffer[this.size]) == 0)
(this.newLine has only one value)  ==>  (orig(this.size) == 3)
(this.newLine has only one value)  ==>  (return has only one value)
(this.newLine has only one value)  ==>  (return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0)
(this.newLine has only one value)  ==>  (return.buffer[orig(this.size)-1] == 45)
(this.newLine has only one value)  ==>  (size(this.buffer[]) == 35)
(this.newLine has only one value)  ==>  (this.buffer has only one value)
(this.newLine has only one value)  ==>  (this.buffer[] == [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.newLine has only one value)  ==>  (this.buffer[] elements one of { 0, 35, 45 })
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0)
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)]))
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1]))
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size]))
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.newLine has only one value)  ==>  (this.buffer[orig(this.size)-1] == 45)
(this.newLine has only one value)  ==>  (this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1]))
(this.newLine has only one value)  ==>  (this.newLine.toString == "#")
(this.newLine has only one value)  ==>  (this.size == 4)
this.nullText == null
return != null
size(this.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 10, 35 }
this.buffer[orig(this.size)] one of { 13, 35 }
orig(this.buffer[post(this.size)-1]) one of { 0, 10 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size > orig(this.size)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size <= this.buffer[orig(this.size)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
this.newLine.toString == return.newLine.toString
this.newLine.toString == orig(this.newLine.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) != this.buffer[this.size-1]
orig(this.size) < this.buffer[orig(this.size)]
size(this.buffer[]) >= this.buffer[this.size-1]
size(this.buffer[]) >= this.buffer[orig(this.size)]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size-1]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 > orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 > orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[this.size-1] <= this.buffer[orig(this.size)]
this.buffer[orig(this.size)] > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) <= orig(this.buffer[this.size])
25 * this.size - 25 * orig(this.size) + this.buffer[this.size-1] - 60 == 0
22 * this.size - 22 * orig(this.size) + this.buffer[orig(this.size)] - 57 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::EXIT449
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.buffer[this.size] one of { 0, 97 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::EXIT451
this.nullText != null
this.buffer[this.size] one of { 0, 44 }
this.buffer[this.size-1] one of { 76, 108 }
this.buffer[orig(this.size)] one of { 78, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 108 }
orig(this.buffer[this.size]) one of { 0, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) in this.buffer[]
this.size - orig(this.size) - 4 == 0
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(this.size)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
orig(this.size) < this.buffer[this.size-1]
orig(this.size) < this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] < this.buffer[this.size-1]
this.buffer[this.size] < this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] < this.buffer[orig(this.size)]
this.buffer[this.size-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)] > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
(this.nullText != null)  <==>  (this.buffer[orig(this.size)] one of { 78, 110 })
(this.nullText != null)  <==>  (this.buffer[this.size] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[this.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[this.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1])
(this.nullText != null)  ==>  (orig(this.buffer[post(return.size)-1]) <= orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (orig(this.buffer[post(return.size)-1]) in this.buffer[])
(this.nullText != null)  ==>  (orig(this.buffer[post(return.size)-1]) one of { 0, 108 })
(this.nullText != null)  ==>  (orig(this.buffer[post(this.size)-1]) <= orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (orig(this.buffer[post(this.size)-1]) in this.buffer[])
(this.nullText != null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 108 })
(this.nullText != null)  ==>  (orig(this.buffer[this.size]) one of { 0, 110 })
(this.nullText != null)  ==>  (orig(this.size) < return.buffer[return.size-1])
(this.nullText != null)  ==>  (orig(this.size) < return.buffer[this.size-1])
(this.nullText != null)  ==>  (orig(this.size) < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (orig(this.size) < this.buffer[return.size-1])
(this.nullText != null)  ==>  (orig(this.size) < this.buffer[this.size-1])
(this.nullText != null)  ==>  (return.buffer[return.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (return.buffer[return.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (return.buffer[this.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (return.buffer[this.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[return.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (this.buffer[return.size-1] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.buffer[return.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (this.buffer[this.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (this.buffer[this.size-1] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.buffer[this.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (this.buffer[this.size] < return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] < return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] < this.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] < this.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] <= orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.buffer[this.size] <= orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[this.size] one of { 0, 44 })
(this.nullText != null)  ==>  (this.nullText.toString one of { "NULL", "null" })
(this.nullText != null)  ==>  (this.size != orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.size != orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.size != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (this.size != this.buffer[this.size])
(this.nullText != null)  ==>  (this.size - orig(this.size) - 4 == 0)
(this.nullText != null)  ==>  (this.size < return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.size < return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.size < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.size < this.buffer[return.size-1])
(this.nullText != null)  ==>  (this.size < this.buffer[this.size-1])
(this.nullText != null)  ==>  (this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.nullText == null)  <==>  (this.buffer[orig(this.size)] one of { 0, 97 })
(this.nullText == null)  <==>  (this.size == orig(this.size))
(this.nullText == null)  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.nullText == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 97 })
(this.nullText == null)  ==>  (orig(this.size) one of { 0, 3, 4 })
(this.nullText == null)  ==>  (this.buffer[] == orig(this.buffer[]))
(this.nullText == null)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.nullText == null)  ==>  (this.buffer[this.size] one of { 0, 97 })
(this.nullText == null)  ==>  (this.newLine == this.nullText)
(this.nullText == null)  ==>  (this.size one of { 0, 3, 4 })
this.newLine == null
return != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 44, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendPadding(int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4 }
this.newLine == null
padChar == 45
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 45, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendPadding(int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 20 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 45, 111 }
this.buffer[orig(this.size)] one of { 0, 45 }
this.buffer[orig(this.size)-1] one of { 45, 111 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
separator == 44
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
standard == 44
defaultIfEmpty == 58
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == return.buffer[orig(this.size)]
this.buffer has only one value
this.buffer[] one of { [58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 1, 5 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 44, 58 }
orig(defaultIfEmpty) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
separator == 44
loopIndex one of { -1, 0, 1 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
separator has only one value
separator.toString == ","
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
separator.toString == ","
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
separator.toString == orig(separator.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
separator has only one value
separator.toString == ","
loopIndex one of { -1, 0, 1 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
separator.toString == ","
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
separator.toString == orig(separator.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
standard.toString == ","
defaultIfEmpty.toString == "order by "
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
standard.toString == ","
defaultIfEmpty.toString == "order by "
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
standard.toString == orig(standard.toString)
defaultIfEmpty.toString == orig(defaultIfEmpty.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Iterable, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == 0
this.newLine == null
this.nullText.toString == "null"
separator.toString == ","
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Iterable, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
this.nullText.toString == "null"
this.buffer[this.size] one of { 0, 97, 122 }
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 98, 97, 114, 44, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.nullText.toString == "null"
array.getClass().getName() == java.lang.Object[].class
separator.toString == ","
size(array[]) one of { 0, 3 }
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
array[] == orig(array[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
this.nullText.toString == "null"
this.buffer[this.size] one of { 0, 97, 122 }
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 98, 97, 114, 44, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
separator.toString == ","
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.newLine == null
return has only one value
this.buffer[this.size] one of { 0, 97, 122 }
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.buffer[this.size] one of { 0, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] one of { [102, 97, 108, 115, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 7 }
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] one of { 102, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
chars has only one value
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
size(chars[]) == 3
chars[this.size] == 102
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == chars[orig(this.size)]
chars[orig(this.size)] == return.buffer[orig(this.size)]
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
return has only one value
this.buffer[this.size-1] == 10
chars[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[], int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
length == size(chars[])
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
chars has only one value
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
length == 3
chars[startIndex] == 102
chars[length-1] == 111
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(this.size)] == chars[orig(startIndex)]
this.buffer[orig(startIndex)] == chars[orig(startIndex)]
this.buffer[orig(length)-1] == chars[orig(length)-1]
chars[orig(startIndex)] == return.buffer[orig(this.size)]
chars[orig(startIndex)] == return.buffer[orig(startIndex)]
chars[orig(length)-1] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(length)] == 13
chars[orig(startIndex)] == 102
chars[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(double):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [50, 46, 51, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 0
this.newLine == null
value == 4.5
this.buffer[this.size] == 50
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(double):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [52, 46, 53, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 52
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(float):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 0
this.newLine == null
value == 2.3
this.buffer[this.size] == 49
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(float):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [50, 46, 51, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 50
this.buffer[this.size-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == value
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[value]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(value) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(value) == this.buffer[this.size]
orig(value) == this.buffer[return.size]
orig(value) == return.buffer[this.size]
orig(value) == orig(this.buffer[post(this.size)])
orig(value) == orig(this.buffer[post(this.size)-1])
orig(value) == orig(this.buffer[post(value)])
orig(value) == return.buffer[return.size]
orig(value) == orig(this.buffer[post(return.size)])
orig(value) == orig(this.buffer[post(return.size)-1])
orig(value) == orig(this.buffer[this.size])
orig(value) == orig(this.buffer[value])
this.buffer has only one value
this.buffer[] == [48, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
this.newLine == null
return has only one value
orig(value) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(value)] == 48
orig(this.buffer[]) elements == orig(value)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 2, 7 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 102, 111, 111, 13, 10, 54, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 2, 7, 10 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] one of { 13, 54, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.toString == "foo"
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.toString == "foo"
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.toString == "foo"
length == 3
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.toString == "foo"
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(startIndex)] == 102
this.buffer[orig(length)] == 13
this.buffer[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, java.lang.Object[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == size(objs[])-1
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.newLine == null
format has only one value
format.toString == "Hello %s"
objs has only one value
objs.getClass().getName() == java.lang.Object[].class
objs[] contains no nulls and has only one value, of length 1
objs[] elements has only one value
size(objs[]) == 1
this.buffer[] elements == this.size
objs[] elements == objs[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, java.lang.Object[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
objs[] == orig(objs[])
return == orig(this)
orig(this.size) == size(objs[])-1
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 13
this.newLine == null
format.toString == "Hello %s"
objs[] contains no nulls and has only one value, of length 1
objs[] elements has only one value
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 72
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
this.size in this.buffer[]
objs[] elements == objs[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
length == 3
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(startIndex)] == 102
this.buffer[orig(length)] == 13
this.buffer[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuilder, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
length == 3
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(startIndex)] == 102
this.buffer[orig(length)] == 13
this.buffer[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(long):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this.buffer[this.size] == this.buffer[value-1]
this has only one value
this.buffer has only one value
this.buffer[] == [48, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 0
this.newLine == null
value == 1
this.buffer[this.size] == 48
this.buffer[value] == 13
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(long):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == this.buffer[orig(value)-1]
this.buffer[orig(this.size)] == return.buffer[orig(value)-1]
this.buffer[orig(value)] == orig(this.buffer[post(value)])
this.buffer[orig(value)] == orig(this.buffer[value])
orig(this.buffer[post(value)-1]) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 49
this.buffer[orig(value)] == 13
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[str.size]
this.size == this.buffer[str.size-1]
this.size == str.buffer[str.size]
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
size(str.buffer[]) == 35
str.buffer[this.size] == 102
str.buffer[str.size-1] == 111
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == str.buffer[this.size]
orig(this.size) == str.buffer[this.size-1]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(str.buffer[post(this.size)])
orig(this.size) == orig(str.buffer[post(this.size)-1])
orig(this.size) == str.buffer[str.size]
orig(this.size) == str.buffer[return.size]
orig(this.size) == str.buffer[return.size-1]
orig(this.size) == str.buffer[orig(str.size)]
orig(this.size) == orig(this.buffer[post(str.size)])
orig(this.size) == orig(this.buffer[post(str.size)-1])
orig(this.size) == orig(str.buffer[post(str.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
orig(this.size) == orig(str.buffer[post(return.size)])
orig(this.size) == orig(str.buffer[post(return.size)-1])
this.buffer[str.size-1] == str.buffer[str.size-1]
this.buffer[str.size-1] == str.buffer[orig(str.size)-1]
this.buffer[str.size-1] == orig(str.buffer[post(str.size)-1])
this.buffer[str.size-1] == orig(str.buffer[str.size-1])
this.buffer[orig(this.size)] == str.buffer[orig(this.size)]
this.buffer[orig(this.size)] == orig(str.buffer[this.size])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
return has only one value
size(str.buffer[]) == 35
this.buffer[this.size-1] == 10
this.buffer[str.size] == 13
this.buffer[str.size-1] == 111
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[str.size]
this.size == this.buffer[str.size-1]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.size == str.buffer[str.size]
this.size == str.buffer[length]
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
str.size == length
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
length == 3
size(str.buffer[]) == 35
str.buffer[startIndex] == 102
str.buffer[length-1] == 111
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
str.size == orig(length)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
orig(startIndex) == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == str.buffer[this.size]
orig(startIndex) == str.buffer[this.size-1]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(str.buffer[post(this.size)])
orig(startIndex) == orig(str.buffer[post(this.size)-1])
orig(startIndex) == str.buffer[str.size]
orig(startIndex) == str.buffer[return.size]
orig(startIndex) == str.buffer[return.size-1]
orig(startIndex) == str.buffer[orig(str.size)]
orig(startIndex) == str.buffer[orig(length)]
orig(startIndex) == orig(this.buffer[post(str.size)])
orig(startIndex) == orig(this.buffer[post(str.size)-1])
orig(startIndex) == orig(str.buffer[post(str.size)])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == orig(str.buffer[post(length)])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(str.buffer[post(return.size)])
orig(startIndex) == orig(str.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[str.size])
orig(startIndex) == orig(this.buffer[str.size-1])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
orig(startIndex) == orig(str.buffer[str.size])
orig(startIndex) == orig(str.buffer[length])
this.buffer[str.size-1] == str.buffer[str.size-1]
this.buffer[str.size-1] == str.buffer[orig(str.size)-1]
this.buffer[str.size-1] == str.buffer[orig(length)-1]
this.buffer[str.size-1] == orig(str.buffer[post(str.size)-1])
this.buffer[str.size-1] == orig(str.buffer[post(length)-1])
this.buffer[str.size-1] == orig(str.buffer[str.size-1])
this.buffer[str.size-1] == orig(str.buffer[length-1])
this.buffer[orig(startIndex)] == str.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)]
this.buffer[orig(startIndex)] == orig(str.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(str.buffer[this.size])
this.buffer[orig(startIndex)] == orig(str.buffer[startIndex])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
return has only one value
orig(startIndex) == 0
size(str.buffer[]) == 35
this.buffer[this.size-1] == 10
this.buffer[str.size] == 13
this.buffer[str.size-1] == 111
this.buffer[orig(startIndex)] == 102
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.clear():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == null
this.nullText.toString == "null"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.clear():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.size == 0
this.newLine == null
this.nullText.toString == "null"
return != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.size
this.size <= orig(this.size)
this.size <= this.buffer[this.size]
this.size <= this.buffer[orig(this.size)]
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.size) < size(this.buffer[])-1
orig(this.size) <= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::ENTER
capacity >= 1
org.apache.commons.lang3.text.StrBuilder.CAPACITY > capacity
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[capacity-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > capacity
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[capacity-1]
this.size <= capacity
this.size <= size(this.buffer[])-1
capacity <= size(this.buffer[])
capacity != size(this.buffer[])-1
capacity != this.buffer[this.size]
capacity != this.buffer[capacity-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[capacity-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
return != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(capacity)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(capacity)-1]
this.size <= orig(capacity)
this.size <= size(this.buffer[])-1
this.newLine.toString == return.newLine.toString
this.newLine.toString == orig(this.newLine.toString)
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(capacity) <= size(this.buffer[])
orig(capacity) != size(this.buffer[])-1
orig(capacity) != this.buffer[this.size]
orig(capacity) != this.buffer[orig(capacity)-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[orig(capacity)-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char[], int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(destination[])
this.newLine == this.nullText
startIndex == destinationIndex
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[endIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[endIndex-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[destinationIndex]
this.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9 }
this.newLine == null
startIndex one of { 0, 3 }
endIndex one of { 3, 6 }
destination[] elements one of { 0, 102, 111 }
destination[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 102, 111 }
this.buffer[startIndex] one of { 98, 102 }
this.buffer[endIndex] one of { 0, 100 }
this.buffer[endIndex-1] one of { 111, 114 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char[], int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(endIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(endIndex)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[orig(endIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(destinationIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[endIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[endIndex-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[destinationIndex])
this.buffer[orig(startIndex)] == destination[orig(startIndex)]
this.buffer[orig(endIndex)-1] == destination[orig(endIndex)-1]
this.buffer[orig(destinationIndex)] == destination[orig(startIndex)]
orig(this.buffer[post(startIndex)]) == destination[orig(startIndex)]
orig(this.buffer[post(endIndex)-1]) == destination[orig(endIndex)-1]
destination[orig(startIndex)] == orig(this.buffer[post(destinationIndex)])
destination[orig(startIndex)] == orig(this.buffer[startIndex])
destination[orig(startIndex)] == orig(this.buffer[destinationIndex])
destination[orig(endIndex)-1] == orig(this.buffer[endIndex-1])
this.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9 }
this.newLine == null
destination[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
destination[] elements >= 0
size(this.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 102, 111 }
this.buffer[orig(endIndex)] one of { 0, 100 }
destination[this.size-1] one of { 0, 111 }
destination[orig(startIndex)] one of { 98, 102 }
destination[orig(endIndex)-1] one of { 111, 114 }
destination[this.size-1] in this.buffer[]
this.buffer[this.size-1] in destination[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNullText():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.nullText has only one value
this.nullText.toString == "null"
this.buffer[this.size] one of { 45, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNullText():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == orig(this.newLine)
this.nullText == return
return == orig(this.nullText)
this.buffer[] one of { [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
return has only one value
return.toString == "null"
this.buffer[this.size] one of { 45, 102 }
this.nullText.toString == return.toString
return.toString == orig(this.nullText.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this has only one value
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 10 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == this.buffer[this.size]
orig(index) == this.buffer[return.size]
orig(index) == return.buffer[this.size]
orig(index) == orig(this.buffer[post(this.size)])
orig(index) == orig(this.buffer[post(this.size)-1])
orig(index) == return.buffer[return.size]
orig(index) == orig(this.buffer[post(return.size)])
orig(index) == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] one of { [102, 97, 108, 115, 101, 116, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 10, 15 }
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 97, 114 }
this.buffer[orig(this.size)-1] one of { 97, 98 }
this.buffer[orig(index)] one of { 102, 116 }
orig(this.buffer[post(index)]) == 98
orig(this.buffer[post(index)-1]) one of { 101, 114 }
orig(this.buffer[post(index)]) in this.buffer[]
orig(this.buffer[post(index)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this has only one value
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 98, 97, 122, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 6
this.newLine == null
value one of { 33, 48 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 114, 122 }
this.buffer[this.size-1] == 122
this.buffer[index] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == this.buffer[orig(index)]
orig(value) == return.buffer[orig(index)]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == return.buffer[orig(this.size)]
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[this.size])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [33, 98, 97, 114, 98, 97, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [48, 98, 97, 114, 98, 97, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 7
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 117
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] == 97
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 13 }
this.newLine == null
this.nullText.toString == "null"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
size(chars[]) one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::EXIT1519
this.buffer[this.size] == orig(this.buffer[this.size])
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 17 }
orig(chars) == null
this.buffer[orig(this.size)-1] one of { 97, 122 }
this.buffer[orig(index)] one of { 98, 110 }
this.buffer[orig(index)] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::EXIT1528
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == orig(this.buffer[index])
return.buffer[orig(this.size)] == orig(this.buffer[index])
orig(this.buffer[this.size]) == orig(this.buffer[index])
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9 }
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.size) == 6
this.buffer[orig(this.size)-1] one of { 114, 122 }
this.buffer[orig(index)] one of { 98, 102 }
orig(this.buffer[index]) == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
(orig(chars) == null)  ==>  (orig(this.buffer[]) one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (orig(this.buffer[index]) one of { 98, 102 })
(orig(chars) == null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 122 })
(orig(chars) == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 98 })
(orig(chars) == null)  ==>  (orig(this.size) one of { 6, 13 })
(orig(chars) == null)  ==>  (this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (this.buffer[orig(index)] in orig(this.buffer[]))
(orig(chars) == null)  ==>  (this.buffer[orig(index)] one of { 98, 110 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)-1] one of { 97, 122 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)] one of { 98, 114 })
(orig(chars) == null)  ==>  (this.buffer[this.size] == orig(this.buffer[this.size]))
(orig(chars) == null)  ==>  (this.nullText.toString == "null")
(orig(chars) == null)  ==>  (this.size one of { 6, 17 })
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9, 17 }
this.newLine == null
this.nullText.toString == "null"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
orig(index) == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 98, 114 }
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
this.buffer[orig(index)] one of { 98, 102, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 122 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
offset == length
this.buffer[index] == this.buffer[offset]
this.buffer[index] == this.buffer[length]
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 17 }
this.newLine == null
this.nullText.toString == "null"
chars[] one of { [], [97, 98, 99, 102, 111, 111, 100, 101, 102] }
offset one of { 0, 3 }
size(chars[]) one of { 0, 9 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 110 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::EXIT1545
orig(index) == orig(offset)
orig(index) == orig(length)
this.buffer[this.size] == orig(this.buffer[this.size])
this.buffer[orig(index)] == orig(this.buffer[post(index)])
this.buffer[orig(index)] == orig(this.buffer[post(offset)])
this.buffer[orig(index)] == orig(this.buffer[post(length)])
this.buffer[orig(index)] == orig(this.buffer[index])
this.buffer[orig(index)] == orig(this.buffer[offset])
this.buffer[orig(index)] == orig(this.buffer[length])
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 21 }
orig(chars) == null
this.buffer[orig(this.size)-1] one of { 97, 122 }
this.buffer[orig(index)] one of { 98, 110 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::EXIT1559
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == this.buffer[orig(offset)]
this.buffer[orig(offset)] == return.buffer[orig(this.size)]
this.buffer[orig(offset)] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9 }
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.size) == 6
this.buffer[orig(this.size)-1] one of { 114, 122 }
this.buffer[orig(index)] one of { 98, 102 }
this.buffer[orig(offset)] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer[orig(offset)] == orig(this.buffer[post(index)])
this.buffer[orig(offset)] == orig(this.buffer[post(offset)])
this.buffer[orig(offset)] == orig(this.buffer[post(length)])
this.buffer[orig(offset)] == orig(this.buffer[index])
this.buffer[orig(offset)] == orig(this.buffer[offset])
this.buffer[orig(offset)] == orig(this.buffer[length])
(orig(chars) == null)  ==>  (orig(index) == orig(offset))
(orig(chars) == null)  ==>  (orig(offset) == 0)
(orig(chars) == null)  ==>  (orig(this.buffer[]) one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 122 })
(orig(chars) == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 98 })
(orig(chars) == null)  ==>  (orig(this.size) one of { 6, 17 })
(orig(chars) == null)  ==>  (this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (this.buffer[orig(index)] one of { 98, 110 })
(orig(chars) == null)  ==>  (this.buffer[orig(offset)] one of { 98, 110 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)-1] one of { 97, 122 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)] one of { 98, 114 })
(orig(chars) == null)  ==>  (this.buffer[this.size] == orig(this.buffer[this.size]))
(orig(chars) == null)  ==>  (this.nullText.toString == "null")
(orig(chars) == null)  ==>  (this.size one of { 6, 21 })
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9, 21 }
this.newLine == null
this.nullText.toString == "null"
chars[] one of { [], [97, 98, 99, 102, 111, 111, 100, 101, 102] }
orig(index) == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 98, 114 }
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
this.buffer[orig(index)] one of { 98, 102, 110 }
this.buffer[orig(offset)] one of { 98, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 122 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
this.buffer[this.size] % this.buffer[orig(index)] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, double):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[index]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 114, 98, 97, 122, 98, 97, 122, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
value == 4.5
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] == 98
this.buffer[this.size-1] == 122
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, double):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(index)])
this.buffer[this.size] == return.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[this.size])
this.buffer[this.size] == orig(this.buffer[index])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [52, 46, 53, 98, 97, 114, 98, 97, 122, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 98
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(index)] == 52
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, float):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[this.size-1]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 114, 98, 97, 122, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
value == 2.3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] == 122
this.buffer[index] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, float):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(index)])
this.buffer[this.size] == return.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[index])
this.buffer[this.size-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [50, 46, 51, 98, 97, 114, 98, 97, 122, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 98
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(index)] == 50
orig(this.buffer[post(this.size)-1]) == 101
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 10 }
this.newLine == null
this.nullText.toString == "null"
obj.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 110 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::EXIT1475
this.newLine == orig(obj)
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 10 }
orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.size) == 6
orig(obj) == null
this.buffer[orig(this.size)] one of { 0, 114 }
this.buffer[orig(this.size)-1] one of { 97, 122 }
this.buffer[orig(index)] one of { 98, 110 }
orig(this.buffer[index]) == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::EXIT1477
orig(index) == orig(this.buffer[post(this.size)-1])
orig(index) == orig(this.buffer[post(return.size)-1])
this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 9, 13 }
orig(obj) has only one value
this.buffer[orig(this.size)] == 98
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(index)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == this.buffer[this.size]
orig(index) == this.buffer[return.size]
orig(index) == return.buffer[this.size]
orig(index) == orig(this.buffer[post(this.size)])
orig(index) == return.buffer[return.size]
orig(index) == orig(this.buffer[post(return.size)])
orig(index) == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(obj) has only one value)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(index)] == 102)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)-1] == 114)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)] == 98)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 9, 13 })
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(index) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(obj.getClass().getName()) == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[index]) one of { 98, 110 })
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) one of { 6, 10 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(obj) == null)
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(index)] one of { 98, 110 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)-1] one of { 97, 122 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)] one of { 0, 114 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 6, 10 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[index]) == 98)
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 122 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) == 6)
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == orig(obj))
this.newLine == null
this.nullText.toString == "null"
orig(index) == 0
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 0, 98, 114 }
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
this.buffer[orig(index)] one of { 98, 102, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 122 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.nullText.toString == "null"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 102, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[index]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[index]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] elements <= this.buffer[this.size-1]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[index]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[index]
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] > this.buffer[index]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.newLine == null
this.nullText.toString == "null"
return != null
orig(index) == 0
this.buffer[this.size] one of { 0, 98, 117 }
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(index)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(index)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= orig(index)
this.buffer[] elements <= this.buffer[this.size-1]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.size >= orig(this.size)
this.size > orig(index)
this.size < size(this.buffer[])-1
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size < this.buffer[orig(index)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[index])
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= orig(index)
orig(this.buffer[]) elements <= this.buffer[this.size-1]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
orig(this.size) > orig(index)
orig(this.size) < size(this.buffer[])-1
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) < this.buffer[orig(index)]
orig(this.size) != orig(this.buffer[post(this.size)-1])
orig(index) <= this.buffer[this.size]
orig(index) <= this.buffer[orig(this.size)]
orig(index) < this.buffer[orig(this.size)-1]
orig(index) < this.buffer[orig(index)]
orig(index) <= orig(this.buffer[post(this.size)-1])
orig(index) <= orig(this.buffer[this.size])
orig(index) < orig(this.buffer[index])
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[this.size] < this.buffer[this.size-1]
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] != this.buffer[orig(this.size)-1]
this.buffer[this.size] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] <= orig(this.buffer[this.size])
this.buffer[this.size-1] >= this.buffer[orig(this.size)]
this.buffer[this.size-1] >= this.buffer[orig(this.size)-1]
this.buffer[this.size-1] > this.buffer[orig(index)]
this.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] >= orig(this.buffer[this.size])
this.buffer[this.size-1] > orig(this.buffer[index])
this.buffer[orig(this.size)] != this.buffer[orig(this.size)-1]
this.buffer[orig(this.size)-1] != this.buffer[orig(index)]
this.buffer[orig(this.size)-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] != orig(this.buffer[index])
this.buffer[orig(index)] != orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) != orig(this.buffer[index])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, long):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[this.size-1]
this.buffer[index] == this.buffer[value-1]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 114, 98, 97, 122, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
value == 1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] == 122
this.buffer[index] == 98
this.buffer[value] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, long):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == return.buffer[orig(this.size)]
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer[orig(this.size)-1] == orig(this.buffer[value])
this.buffer[orig(index)] == this.buffer[orig(value)-1]
this.buffer[orig(index)] == return.buffer[orig(value)-1]
this.buffer[orig(value)] == orig(this.buffer[post(index)])
this.buffer[orig(value)] == orig(this.buffer[post(value)-1])
this.buffer[orig(value)] == orig(this.buffer[index])
this.buffer[orig(value)] == orig(this.buffer[value-1])
return.buffer[orig(this.size)-1] == orig(this.buffer[value])
this.buffer has only one value
this.buffer[] == [49, 98, 97, 114, 98, 97, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 7
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 117
this.buffer[this.size-1] == 122
this.buffer[orig(index)] == 49
this.buffer[orig(value)] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT278
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == true
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT278;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT279
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9, 12 }
return == false
this.buffer[this.size-1] one of { 32, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT279;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (return == true)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 0)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == 0)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.size)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (return == false)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 9, 12 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 32, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[this.size-1]) one of { 32, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(this.size)-1] one of { 32, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[this.size-1] one of { 32, 111 })
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT;condition="return == true"
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == true
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT;condition="not(return == true)"
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9, 12 }
return == false
this.buffer[this.size-1] one of { 32, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.length():::ENTER
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.length():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == return
this.newLine == orig(this.newLine)
this.nullText == orig(this.nullText)
return == orig(this.size)
return >= 0
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine.toString == orig(this.newLine.toString)
this.nullText.toString == orig(this.nullText.toString)
return < size(this.buffer[])-1
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[return]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[return]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String):::ENTER
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] elements one of { 0, 35, 45 }
this.buffer[] one of { [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4 }
this.nullText == null
newLine.toString == "#"
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 35, 45 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.newLine == return.newLine
this.newLine == orig(newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] elements one of { 0, 35, 45 }
this.buffer[] one of { [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4 }
this.nullText == null
newLine.toString == "#"
return has only one value
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 35, 45 }
this.newLine.toString == newLine.toString
newLine.toString == return.newLine.toString
newLine.toString == orig(newLine.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
nullText != null
nullText.toString one of { "NULL", "null" }
this.buffer[this.size] one of { 0, 45, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.nullText == return.nullText
this.nullText == orig(nullText)
return == orig(this)
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.nullText != null
nullText.toString one of { "NULL", "null" }
return != null
this.buffer[this.size] one of { 0, 45, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= this.buffer[this.size]
this.nullText.toString == nullText.toString
nullText.toString == return.nullText.toString
nullText.toString == orig(nullText.toString)
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.size():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.size():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == return
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) == this.buffer[return]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.newLine == null
return one of { 0, 3, 4 }
this.buffer[return] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toString():::ENTER
this.newLine == null
size(this.buffer[]) one of { 1, 32, 35 }
this.size != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toString():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == orig(this.newLine)
this.nullText == orig(this.nullText)
this.newLine == null
return != null
size(this.buffer[]) one of { 1, 32, 35 }
this.size != size(this.buffer[])-1
this.nullText.toString == orig(this.nullText.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.validateIndex(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.nullText.toString == "null"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 122
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[index]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[index]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] elements <= this.buffer[this.size-1]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[index]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[index]
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] > this.buffer[index]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.validateIndex(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == orig(this.newLine)
this.nullText == orig(this.nullText)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.nullText.toString == "null"
orig(index) == 0
this.buffer[this.size-1] == 122
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(index)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(index)]
this.buffer[] elements >= orig(index)
this.buffer[] elements <= this.buffer[this.size-1]
this.size > orig(index)
this.size < size(this.buffer[])-1
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(index)]
this.nullText.toString == orig(this.nullText.toString)
orig(index) <= this.buffer[this.size]
orig(index) < this.buffer[orig(index)]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] > this.buffer[orig(index)]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.append(org.apache.commons.lang3.text.StrBuilder, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.newLine == str.newLine
this.newLine == str.nullText
str.size == length
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.val$count[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[str.size-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[length]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[length-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[length]
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[str.size-1]
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[length-1]
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == str.buffer[startIndex]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
length == 3
size(str.buffer[]) == 35
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == 111
str.buffer[startIndex] == 102
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.size in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == str.size
this.size == return.size
this.size == orig(str.size)
this.size == orig(length)
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
orig(startIndex) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[orig(str.size)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[orig(str.size)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(str.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(str.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(str.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.val$count[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(length)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(length)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(length)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[orig(str.size)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.val$count[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[str.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[str.size-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[length])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[length-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[str.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[str.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[orig(str.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[str.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[orig(str.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == str.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[str.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(str.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[orig(str.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[str.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(str.buffer[length-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == str.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == str.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == orig(str.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == return.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == orig(str.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == orig(str.buffer[startIndex])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
return has only one value
orig(startIndex) == 0
size(str.buffer[]) == 35
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(startIndex) in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in str.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$10.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.append(char[]):::ENTER
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
size(this.val$count[]) == size(str[])-1
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[this.size]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == str[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
size(str[]) == 3
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == 111
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == 102
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.append(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(size(str[]))
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
str[] == orig(str[])
orig(this.size) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
size(this.val$count[]) == size(str[])-1
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[]) == orig(size(str[]))-1
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[this.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[return.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == str[this.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[this.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(str[post(this.size)-1])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == str[return.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[return.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(str[post(return.size)-1])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == return.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == this.buffer[orig(this.size)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == str[orig(this.size)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == return.buffer[orig(this.size)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == orig(str[this.size])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
return has only one value
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == 0
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == 111
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(this.size) in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$11.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID == orig(size($hidden$2[]))-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig($hidden$2[post(this.size)])
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] == orig($hidden$2[]) (elementwise)
this.val$count[] is the reverse of orig($hidden$2[])
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
orig($hidden$2[]) elements == this.size
this.size in orig($hidden$2[])
orig($hidden$2[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.append(char[], int, int):::ENTER
this.size == startIndex
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
length == size(str[])
size(this.val$count[]) == size(str[])-1
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.val$count[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[length]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[length-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == str[length-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == str[startIndex]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
length == 3
size(str[]) == 3
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == 111
str[startIndex] == 102
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.append(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.size == orig(size(str[]))
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
str[] == orig(str[])
orig(startIndex) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
size(this.val$count[]) == size(str[])-1
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[]) == orig(size(str[]))-1
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.val$count[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(length)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(length)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.val$count[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[length])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[length-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[this.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[return.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[orig(length)-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == str[this.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[this.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(str[post(this.size)-1])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == str[return.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == str[orig(length)-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(str[post(length)-1])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[return.size-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[orig(length)-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(str[post(return.size)-1])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(str[length-1])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == return.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == this.buffer[orig(this.size)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == this.buffer[orig(startIndex)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == str[orig(this.size)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == str[orig(startIndex)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == orig(str[post(startIndex)])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == return.buffer[orig(this.size)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == return.buffer[orig(startIndex)]
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == orig(str[this.size])
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == orig(str[startIndex])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
return has only one value
orig(startIndex) == 0
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == 0
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == 111
str[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(startIndex) in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$12.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.toString():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.toString():::EXIT
return has only one value
return.toString == "foo"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID == size(this.val$count[])-1
this.val$count[] < this.buffer[] (lexically)
this.val$count[] <= this.buffer[] (lexically)
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1, 2 }
this.val$count[] sorted by >=
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 11, 13 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] one of { 0, 1 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] one of { 0, 101 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] one of { 0, 72 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID != this.size
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[] elements < org.apache.commons.lang3.text.StrBuilder.CAPACITY
this.val$count[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
this.val$count[] elements <= this.size
this.val$count[] elements <= size(this.val$count[])
this.val$count[] elements < size(this.buffer[])-1
this.val$count[] elements >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.val$count[] elements <= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[] elements <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.val$count[] elements <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != size(this.val$count[])
this.size != size(this.val$count[])-1
this.size < size(this.buffer[])-1
this.size >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.size >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.size <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.size <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
size(this.val$count[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.val$count[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
size(this.val$count[])-1 >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.val$count[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.val$count[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
size(this.buffer[])-1 > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.buffer[])-1 > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] <= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] >= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.append(java.lang.String):::ENTER
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 1] }
this.val$count[] elements are equal
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 11 }
str.toString one of { "\r\n", "Hello Alice" }
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.append(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] one of { [1, 0], [2, 1] }
this.buffer[] one of { [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 11, 13 }
str.toString one of { "\r\n", "Hello Alice" }
return has only one value
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] one of { 1, 2 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == 101
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] == 72
this.buffer[this.size-1] one of { 10, 101 }
this.buffer[orig(this.size)] one of { 13, 72 }
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
size(this.val$count[])-1 in this.val$count[]
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
size(this.buffer[]) in this.buffer[]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)]) in this.buffer[]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)-1]) in this.buffer[]
str.toString == orig(str.toString)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.val$count[] elements one of { 0, 1 }
this.buffer[] == [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 11
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == 101
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] == 72
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
size(this.buffer[]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == this.buffer[orig(this.size)]
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[]) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [2, 1]
this.val$count[] elements one of { 1, 2 }
this.buffer[] == [72, 101, 108, 108, 111, 32, 65, 108, 105, 99, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 13
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID] == 101
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID-1] == 72
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
this.size in this.buffer[]
size(this.buffer[]) in this.buffer[]
size(this.buffer[]) in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID == size(this.val$count[])-1
this.val$count[] < this.buffer[] (lexically)
this.val$count[] <= this.buffer[] (lexically)
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1, 2 }
this.val$count[] sorted by >=
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] one of { 0, 1 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID != this.size
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[] elements < org.apache.commons.lang3.text.StrBuilder.CAPACITY
this.val$count[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
this.val$count[] elements <= this.size
this.val$count[] elements <= size(this.val$count[])
this.val$count[] elements < size(this.buffer[])-1
this.val$count[] elements >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.val$count[] elements <= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[] elements <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.val$count[] elements <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.buffer[] elements <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != size(this.val$count[])
this.size != size(this.val$count[])-1
this.size < size(this.buffer[])-1
this.size >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.size >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.size <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.size <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
size(this.val$count[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.val$count[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
size(this.val$count[])-1 >= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.val$count[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.val$count[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
size(this.buffer[])-1 > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.buffer[])-1 > this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] <= this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] <= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] >= this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.append(java.lang.String):::ENTER
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 1] }
this.val$count[] elements are equal
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
str.toString one of { "\r\n", "foo" }
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.append(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] one of { [1, 0], [2, 1] }
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 5 }
str.toString one of { "\r\n", "foo" }
return has only one value
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] one of { 1, 2 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] == 102
this.buffer[this.size-1] one of { 10, 111 }
this.buffer[orig(this.size)] one of { 13, 102 }
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
size(this.val$count[])-1 in this.val$count[]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)]) in this.buffer[]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)-1]) in this.buffer[]
str.toString == orig(str.toString)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.val$count[] elements one of { 0, 1 }
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[]) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [2, 1]
this.val$count[] elements one of { 1, 2 }
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.append(java.lang.String, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.val$count[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[length]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[length-1]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str.toString == "foo"
length == 3
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.append(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(startIndex) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.val$count[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(length)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(length)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.val$count[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[length])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[length-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == return.buffer[orig(startIndex)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str.toString == "foo"
return has only one value
orig(startIndex) == 0
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(startIndex) in this.val$count[]
orig(startIndex) in this.buffer[]
str.toString == orig(str.toString)
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.append(java.lang.StringBuffer):::ENTER
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.append(java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(this.size) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == return.buffer[orig(this.size)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
return has only one value
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(this.size) in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.append(java.lang.StringBuilder):::ENTER
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.append(java.lang.StringBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(this.size) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == return.buffer[orig(this.size)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
return has only one value
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(this.size) in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.append(java.lang.StringBuffer, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.val$count[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[length]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[length-1]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
length == 3
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.append(java.lang.StringBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(startIndex) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.val$count[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(length)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(length)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.val$count[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[length])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[length-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == return.buffer[orig(startIndex)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
return has only one value
orig(startIndex) == 0
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(startIndex) in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.append(java.lang.StringBuilder, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.val$count[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[startIndex]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[length]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[length-1]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
length == 3
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.append(java.lang.StringBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(startIndex) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.val$count[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(startIndex)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(length)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(length)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[orig(length)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.val$count[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[startIndex])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[length])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[length-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == return.buffer[orig(startIndex)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
return has only one value
orig(startIndex) == 0
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(startIndex) in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9:::OBJECT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID == size(this.val$count[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] one of { 0, 111 }
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] one of { 0, 102 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID == size($hidden$2[])-1
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
$hidden$2[] == orig($hidden$2[])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig($hidden$2[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)-1])
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.val$count[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == $hidden$2[this.size]
$hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig($hidden$2[post(this.size)])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.append(org.apache.commons.lang3.text.StrBuilder):::ENTER
this.size == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.newLine == str.newLine
this.newLine == str.nullText
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.val$count[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[str.size-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[str.size-1]
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == str.buffer[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
size(str.buffer[]) == 35
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == 111
str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == 102
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.size in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.append(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == str.size
this.size == return.size
this.size == orig(str.size)
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
orig(this.size) == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[orig(str.size)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[this.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(this.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(this.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[orig(str.size)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[str.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(str.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(str.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(str.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[return.size]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[orig(str.size)]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(return.size)-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(return.size)])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.val$count[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[this.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[str.size])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[str.size-1])
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[str.size])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[str.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[orig(str.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[str.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == str.buffer[orig(str.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[str.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(str.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[return.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[orig(str.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(str.buffer[str.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == str.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == str.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == orig(str.buffer[this.size])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
return has only one value
size(str.buffer[]) == 35
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID in this.val$count[]
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
orig(this.size) in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.size) in str.buffer[]
orig(this.val$count[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
orig(this.buffer[]) elements == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.appendNewLine():::ENTER
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[this.size-1]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID]
size(this.val$count[])-1 == this.val$count[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1]
size(this.val$count[])-1 == orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)-1])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == return.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)-1])
orig(this.val$count[post(org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID)]) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID] == 111
this.buffer[org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID-1] == 102
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID in this.val$count[]
this.val$count[] elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.serialVersionUID
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.val$count[] elements == size(this.val$count[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest:::CLASS
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP != null
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO != null
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest:::OBJECT
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.StrBuilderAppendInsertTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_FormattedString():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuilder_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == java.lang.String.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT120
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
message == null
expected >= 1
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::EXIT
===========================================================================
org.junit.Assert.assertEquals(long, long):::ENTER
expected == actual
expected >= 1
===========================================================================
org.junit.Assert.assertEquals(long, long):::EXIT
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.fCanUseSuiteMethod == true
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::ENTER
canUseSuiteMethod == true
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::EXIT
this.fCanUseSuiteMethod == orig(canUseSuiteMethod)
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == return.fSuiteBuilder.parents
this.parents == orig(this.parents)
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.fSuiteBuilder has only one value
return.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.parents has only one value
this.parents.getClass().getName() == return.fSuiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT31
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT54
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
this.parents.getClass().getName() == return.parents.getClass().getName()
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this has only one value
this.fSuiteBuilder has only one value
this.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.fSuiteBuilder.parents has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
this.fSuiteBuilder.parents.getClass().getName() == this.parents.getClass().getName()
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.fSuiteBuilder == orig(suiteBuilder)
this.fSuiteBuilder.parents == suiteBuilder.parents
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
this.fSuiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
this.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT25
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
this.fSuiteBuilder == orig(this.fSuiteBuilder)
this.fSuiteBuilder.parents == orig(this.fSuiteBuilder.parents)
this.parents == orig(this.parents)
return == null
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.fSuiteBuilder.getClass().getName() == orig(this.fSuiteBuilder.getClass().getName())
this.parents.getClass().getName() == orig(this.fSuiteBuilder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == false
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == false
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fNotifier.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[] elements != null
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.fNotifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fChildren[] elements != null
this.fDescription.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDescription.fAnnotations[] elements != null
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fDescription.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fNotifier.fListeners[]) == 1
size(this.fDescription.fChildren[]) one of { 0, 1, 51 }
size(this.fDescription.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDescription.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDescription.fDisplayName.toString
size(this.fNotifier.fListeners[]) != size(this.fDescription.fChildren[])-1
size(this.fNotifier.fListeners[]) >= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[]) != size(this.fDescription.fAnnotations[])
size(this.fDescription.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[])-1 != size(this.fDescription.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(notifier.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 1
size(description.fChildren[]) one of { 0, 1, 51 }
size(description.fAnnotations[]) one of { 0, 1 }
notifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[]) >= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.fNotifier == orig(notifier)
this.fNotifier.fListeners == notifier.fListeners
this.fNotifier.fListeners[] == notifier.fListeners[]
this.fNotifier.fPleaseStop == notifier.fPleaseStop
this.fDescription == orig(description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fChildren[] == description.fChildren[]
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fAnnotations == description.fAnnotations
this.fDescription.fAnnotations[] == description.fAnnotations[]
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(notifier.fListeners[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(notifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 1
size(description.fChildren[]) one of { 0, 1, 51 }
size(description.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() == notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[]) >= size(description.fAnnotations[])
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == size(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[]) == orig(size(this.fDescription.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fNotifier.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable:::OBJECT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable():::EXIT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::ENTER
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::EXIT
return.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod:::OBJECT
this.fTarget.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
target.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestMethod == orig(testMethod)
this.fTestMethod.fMethod == testMethod.fMethod
this.fTarget == orig(target)
testMethod.fMethod == orig(testMethod.fMethod)
this.fTarget.getClass().getName() == orig(target.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::EXIT
this.fTestMethod == orig(this.fTestMethod)
this.fTestMethod.fMethod == orig(this.fTestMethod.fMethod)
this.fTarget == orig(this.fTarget)
this.fTarget.getClass().getName() == orig(this.fTarget.getClass().getName())
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
org.junit.runner.Computer.this has only one value
this.parents has only one value
this.parents.getClass().getName() == java.util.HashSet.class
this.val$builder.parents.getClass().getName() == this.parents.getClass().getName()
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.parents == $hidden$2.parents
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
$hidden$2.parents == orig($hidden$2.parents)
$hidden$2.parents has only one value
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.parents.getClass().getName() == $hidden$2.parents.getClass().getName()
this.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.parents == orig(this.parents)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
this.fChildren[] elements != null
this.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] elements != null
this.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fAnnotations[])-1
size(this.fChildren[]) >= size(this.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fChildren[] == this.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == this.fChildren[].getClass().getName()
this.fDisplayName == orig(displayName)
this.fAnnotations == orig(annotations)
this.fAnnotations[] == annotations[]
annotations[] == orig(annotations[])
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
annotations[] elements != null
org.junit.runner.Description.EMPTY.fChildren[] is the reverse of this.fChildren[]
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
this.fDisplayName.toString == displayName.toString
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
displayName.toString == orig(displayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(annotations[])-1
size(this.fChildren[]) <= size(this.fAnnotations[])
size(this.fChildren[]) >= size(annotations[])-1
size(this.fChildren[])-1 <= size(annotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(description.fChildren[]) one of { 0, 51 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) % size(description.fChildren[])-1 == 0
size(this.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
size(this.fChildren[])-1 == orig(size(this.fChildren[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fChildren[]) >= 1
size(description.fChildren[]) one of { 0, 51 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
orig(description) in this.fChildren[]
this.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString == orig(this.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= orig(size(this.fChildren[]))-1
size(description.fChildren[]) % size(this.fChildren[]) == 0
size(this.fChildren[]) != size(description.fChildren[])
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) >= size(description.fAnnotations[])
size(description.fAnnotations[])-1 % size(this.fChildren[]) == 0
size(this.fChildren[])-1 != size(description.fChildren[])-1
size(this.fChildren[])-1 % size(description.fChildren[])-1 == 0
size(this.fChildren[])-1 >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])
name.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))
name.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
clazz has only one value
annotations[] elements != null
size(annotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
annotations[] == return.fAnnotations[]
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))-1
annotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString < return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.getChildren():::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
===========================================================================
org.junit.runner.Description.getChildren():::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == return
this.fChildren[] == return[]
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
return == orig(this.fChildren)
return[] == orig(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
return[] elements != null
return[].getClass().getName() elements == org.junit.runner.Description.class
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(return[])
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(return[])-1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fNotifier.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fNotifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.fNotifier.fPleaseStop == false
size(this.fNotifier.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fNotifier.fListeners[]) == 1
listener in this.fNotifier.fListeners[]
this.fNotifier.fListeners[] elements == listener
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::ENTER
size(this.fNotifier.fListeners[]) == size(classes[])-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[]):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == return.fFailures[]
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
classes[] == orig(classes[])
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(classes[])-1
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fIgnoreCount == orig(size(classes[]))-1
return.fFailures[] == orig(this.fNotifier.fListeners[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount == 51
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 5963
return.fStartTime == 1501551037884L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
classes[] elements == classes[return.fIgnoreCount]
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == return.fFailures[]
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fFailures[] == orig(this.fNotifier.fListeners[])
return has only one value
return.fCount == 51
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 5963
return.fStartTime == 1501551037884L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == return.fFailures[]
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
return.fIgnoreCount == size(this.fNotifier.fListeners[])
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(this.fNotifier.fListeners[]))
return.fFailures[] == orig(this.fNotifier.fListeners[])
return has only one value
return.fCount == 51
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 5963
return.fStartTime == 1501551037884L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::ENTER
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runClasses(java.lang.Class[]):::EXIT
classes[] == orig(classes[])
return.fIgnoreCount == size(classes[])-1
return.fIgnoreCount == size(return.fFailures[])
return.fIgnoreCount == orig(size(classes[]))-1
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount == 51
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fRunTime == 5963
return.fStartTime == 1501551037884L
classes[] elements == classes[return.fIgnoreCount]
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
return == orig(this.val$runner)
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
this.val$runner.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.val$runner.getClass().getName())
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Result.this.fFailures[])
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount >= 0
org.junit.runner.Result.this.fIgnoreCount == 0
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.ArrayList.class
org.junit.runner.Result.this.fRunTime one of { 0, 5963 }
org.junit.runner.Result.this.fStartTime one of { 0, 1501551037884L }
org.junit.runner.Result.this.fCount >= org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount >= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fIgnoreCount <= org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime >= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime >= size(org.junit.runner.Result.this.fFailures[])
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fCount == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
org.junit.runner.Result.this.fStartTime == 1501551037884L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fCount < org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount >= size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fIgnoreCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Result.this.fStartTime == 1501551037884L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fCount > org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fIgnoreCount % org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fCount < org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount - orig(org.junit.runner.Result.this.fCount) - 1 == 0
size(org.junit.runner.Description.EMPTY.fChildren[]) % org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fCount >= size(description.fAnnotations[])
org.junit.runner.Result.this.fIgnoreCount <= orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Result.this.fStartTime > orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fIgnoreCount]
orig(org.junit.runner.Result.this.fCount) >= size(org.junit.runner.Description.EMPTY.fChildren[])
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fIgnoreCount == result.fRunTime
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fStartTime == result.fStartTime
org.junit.runner.Result.this.fCount == 51
org.junit.runner.Result.this.fStartTime == 1501551037884L
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fRunTime == result.fRunTime
org.junit.runner.Result.this.fStartTime == result.fStartTime
result.fCount == orig(org.junit.runner.Result.this.fCount)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fRunTime)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fIgnoreCount == orig(result.fRunTime)
result.fIgnoreCount == size(result.fFailures[])
result.fFailures == orig(org.junit.runner.Result.this.fFailures)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
result.fStartTime == orig(result.fStartTime)
result.fCount == 51
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fRunTime == 5963
result.fStartTime == 1501551037884L
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
org.junit.runner.Result.this.fCount == 0
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fCount]
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fIgnoreCount
org.junit.runner.Result.this.fCount == org.junit.runner.Result.this.fRunTime
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fCount == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
org.junit.runner.Result.this.fCount == 0
org.junit.runner.Result.this.fStartTime == 1501551037884L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fCount]
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.Result:::OBJECT
this.fCount == this.fIgnoreCount
this.fCount == this.fRunTime
this.fCount == this.fStartTime
this.fCount == size(this.fFailures[])
this has only one value
this.fCount == 0
this.fFailures has only one value
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runner.Result.Result():::EXIT
===========================================================================
org.junit.runner.Result.createListener():::ENTER
===========================================================================
org.junit.runner.Result.createListener():::EXIT
this.fCount == orig(this.fCount)
this.fCount == orig(this.fIgnoreCount)
this.fCount == orig(this.fRunTime)
this.fCount == orig(this.fStartTime)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
return has only one value
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.runner.manipulation.Sorter$1.():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.manipulation.Sorter:::CLASS
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter:::OBJECT
this == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fComparator
this has only one value
this.fComparator has only one value
this.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fComparator.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::ENTER
comparator has only one value
comparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::ENTER
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != object.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(object.getClass().getName())
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
this has only one value
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
this has only one value
this.val$description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fChildren[] contains no nulls and has only one value, of length 1
this.val$description.fChildren[] elements has only one value
this.val$description.fChildren[].getClass().getName() == [org.junit.runner.Description]
this.val$description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "null"
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fChildren[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fChildren[] == $hidden$2.fChildren[]
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fChildren[])
size($hidden$2.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size($hidden$2.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
this.val$result.fIgnoreCount == size(this.val$result.fFailures[])
size(this.val$result.fFailures[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
this has only one value
this.val$result has only one value
this.val$result.fCount == 51
this.val$result.fIgnoreCount == 0
this.val$result.fFailures has only one value
this.val$result.fFailures[] == []
this.val$result.fFailures[].getClass().getName() == []
this.val$result.fFailures.getClass().getName() == java.util.ArrayList.class
this.val$result.fRunTime one of { 0, 5963 }
this.val$result.fStartTime == 1501551037884L
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
this.val$result.fFailures.getClass().getName() == org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
$hidden$2.fIgnoreCount == $hidden$2.fRunTime
$hidden$2.fIgnoreCount == size($hidden$2.fFailures[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fFailures[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
$hidden$2.fCount == 51
$hidden$2.fIgnoreCount == 0
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] == []
$hidden$2.fFailures[].getClass().getName() == []
$hidden$2.fStartTime == 1501551037884L
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fIgnoreCount]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
this.val$result.fCount == $hidden$2.fCount
this.val$result.fIgnoreCount == $hidden$2.fIgnoreCount
this.val$result.fFailures == $hidden$2.fFailures
this.val$result.fFailures[] == $hidden$2.fFailures[]
this.val$result.fRunTime == $hidden$2.fIgnoreCount
this.val$result.fStartTime == $hidden$2.fStartTime
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fCount == orig($hidden$2.fCount)
$hidden$2.fIgnoreCount == $hidden$2.fRunTime
$hidden$2.fIgnoreCount == orig($hidden$2.fIgnoreCount)
$hidden$2.fIgnoreCount == orig($hidden$2.fRunTime)
$hidden$2.fIgnoreCount == size($hidden$2.fFailures[])
$hidden$2.fFailures == orig($hidden$2.fFailures)
$hidden$2.fFailures[] == orig($hidden$2.fFailures[])
$hidden$2.fStartTime == orig($hidden$2.fStartTime)
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fFailures[])
size($hidden$2.fFailures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
$hidden$2.fCount == 51
$hidden$2.fIgnoreCount == 0
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] == []
$hidden$2.fFailures[].getClass().getName() == []
$hidden$2.fFailures.getClass().getName() == java.util.ArrayList.class
$hidden$2.fStartTime == 1501551037884L
this.val$result.fFailures.getClass().getName() == $hidden$2.fFailures.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fIgnoreCount]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
$hidden$2.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fFailures.getClass().getName() == orig($hidden$2.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
this.val$result.fIgnoreCount == this.val$result.fRunTime
each == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
this.val$result.fCount == orig(this.val$result.fCount)
this.val$result.fIgnoreCount == orig(this.val$result.fIgnoreCount)
this.val$result.fIgnoreCount == orig(this.val$result.fRunTime)
this.val$result.fFailures == orig(this.val$result.fFailures)
this.val$result.fFailures[] == orig(this.val$result.fFailures[])
this.val$result.fStartTime == orig(this.val$result.fStartTime)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
orig(each) == org.junit.runner.notification.RunNotifier.this.fListeners[this.val$result.fIgnoreCount]
size(this.val$result.fFailures[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
this.val$result.fRunTime == 5963
this.val$result.fFailures.getClass().getName() == orig(this.val$result.fFailures.getClass().getName())
this.val$result.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size($hidden$2.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$7:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(this.val$description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size($hidden$2.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each has only one value
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == each
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
org.junit.runner.notification.RunNotifier.this.fListeners[] elements == orig(each)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
this.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 1
org.junit.runner.notification.RunNotifier.this.fListeners[] elements has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.ArrayList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.fListeners has only one value
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.fListeners[].getClass().getName() one of { [], [org.junit.runner.Result.Listener] }
this.fListeners.getClass().getName() == java.util.ArrayList.class
this.fPleaseStop == false
size(this.fListeners[]) one of { 0, 1 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[])-1 == orig(size(this.fListeners[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[]) == orig(size(description.fAnnotations[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
result.fIgnoreCount == result.fRunTime
result.fIgnoreCount == size(this.fListeners[])-1
size(this.fListeners[])-1 == size(result.fFailures[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result has only one value
result.fCount == 51
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fStartTime == 1501551037884L
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[result.fIgnoreCount]
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fIgnoreCount == orig(result.fRunTime)
result.fIgnoreCount == size(result.fFailures[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(result.fStartTime)
size(this.fListeners[])-1 == size(result.fFailures[])
size(result.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
result.fCount == 51
result.fIgnoreCount == 0
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fRunTime == 5963
result.fStartTime == 1501551037884L
size(this.fListeners[]) == 1
this.fListeners[] elements == this.fListeners[result.fIgnoreCount]
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(this.fListeners[]) == size(description.fChildren[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(this.fListeners[]) == size(description.fChildren[])
size(this.fListeners[]) == orig(size(description.fChildren[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[]) == size(description.fAnnotations[])
size(this.fListeners[]) == orig(size(description.fAnnotations[]))
size(this.fListeners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fListeners[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 1
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
listener has only one value
size(this.fListeners[]) == 1
listener in this.fListeners[]
this.fListeners[] elements == listener
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[]) == orig(size(this.fListeners[]))-1
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1:::OBJECT
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::ENTER
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler has only one value
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fClass)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.BlockJUnit4ClassRunner.this.fFilter == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator)
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler)
return.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() != return.getClass().getName()
org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.BlockJUnit4ClassRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this has only one value
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations has only one value
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler has only one value
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(klass)
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] contains no nulls and has only one value, of length 51
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 51
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == false
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] contains no nulls and has only one value, of length 51
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 51
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT381
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == null
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != annotation.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != annotation.getClass().getName()
this.fScheduler.getClass().getName() != annotation.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT393
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == 0
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(annotation.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(annotation.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(annotation.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT;condition="return == true"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
notifier.fListeners == return.fNotifier.fListeners
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == return.fNotifier.fListeners[]
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == return.fNotifier.fPleaseStop
notifier.fPleaseStop == orig(notifier.fPleaseStop)
return.fNotifier == orig(notifier)
size(notifier.fListeners[]) == size(return.fDescription.fAnnotations[])
size(notifier.fListeners[])-1 == size(return.fDescription.fChildren[])
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.fNotifier has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
return.fDescription.fChildren[] == []
return.fDescription.fChildren[].getClass().getName() == []
return.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fDescription.fAnnotations[] elements != null
return.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == return.fNotifier.fListeners.getClass().getName()
notifier.fListeners.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT264
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != next.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != next.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != next.getClass().getName()
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(next)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT84
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != notifier.fListeners.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != test.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != next.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != test.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != next.getClass().getName()
this.fScheduler.getClass().getName() != test.getClass().getName()
this.fScheduler.getClass().getName() != next.getClass().getName()
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(next)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(test.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(test.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != target.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != statement.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != target.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != statement.getClass().getName()
this.fScheduler.getClass().getName() != target.getClass().getName()
this.fScheduler.getClass().getName() != statement.getClass().getName()
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(target.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(target.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fScheduler == null
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
childStatement.getClass().getName() == org.junit.runners.ParentRunner$3.class
org.junit.runners.ParentRunner.this.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != childStatement.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(childStatement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.fListeners == $hidden$2.fListeners
this.val$notifier.fListeners[] == $hidden$2.fListeners[]
this.val$notifier.fPleaseStop == $hidden$2.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$2.fListeners == orig($hidden$2.fListeners)
$hidden$2.fListeners[] == orig($hidden$2.fListeners[])
$hidden$2.fPleaseStop == orig($hidden$2.fPleaseStop)
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 1
$hidden$2.fListeners[] elements has only one value
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$2.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$2.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 1
this.val$notifier.fListeners.getClass().getName() == $hidden$2.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$2.fListeners.getClass().getName() == orig($hidden$2.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 1
this.val$notifier.fListeners[] elements has only one value
this.val$notifier.fListeners[] elements != null
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
this.val$notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
this.val$notifier.fListeners.getClass().getName() == java.util.ArrayList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 1
this.val$each.getClass().getName() != this.val$notifier.fListeners.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$3 has only one value
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
$hidden$2.getClass().getName() != $hidden$3.fListeners.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$notifier == orig($hidden$3)
this.val$notifier.fListeners == $hidden$3.fListeners
this.val$notifier.fListeners[] == $hidden$3.fListeners[]
this.val$notifier.fPleaseStop == $hidden$3.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$3.fListeners == orig($hidden$3.fListeners)
$hidden$3.fListeners[] == orig($hidden$3.fListeners[])
$hidden$3.fPleaseStop == orig($hidden$3.fPleaseStop)
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 1
$hidden$3.fListeners[] elements has only one value
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
$hidden$3.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
$hidden$3.fListeners.getClass().getName() == java.util.ArrayList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 1
this.val$each.getClass().getName() != $hidden$3.fListeners.getClass().getName()
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$3.fListeners.getClass().getName() == orig($hidden$3.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.run():::EXIT
this.val$each == orig(this.val$each)
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
o1.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
org.junit.runners.ParentRunner.this.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != o1.getClass().getName()
o1.getClass().getName() == o2.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
return == 0
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(o1.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(testClass)
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.comparator():::ENTER
===========================================================================
org.junit.runners.ParentRunner.comparator():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.junit.runners.ParentRunner$4.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fChildren[].getClass().getName() one of { [org.junit.runner.Description], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
return.fDisplayName.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
size(return.fChildren[]) one of { 1, 51 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 51 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getName():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getName():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
this.fTestClass == return
this.fTestClass.fClass == return.fClass
this.fTestClass.fMethodsForAnnotations == return.fMethodsForAnnotations
this.fTestClass.fFieldsForAnnotations == return.fFieldsForAnnotations
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fTestClass)
return.fClass == orig(this.fTestClass.fClass)
return.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
return.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
return.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
this.fTestClass.fFieldsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == return.fFieldsForAnnotations.getClass().getName()
return.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fListeners.getClass().getName() == java.util.ArrayList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 1
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::ENTER
this.getClass().getName() != each.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != each.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != each.getClass().getName()
this.fScheduler.getClass().getName() != each.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(each.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(each.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(each.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::ENTER
org.junit.runner.manipulation.Sorter.NULL == sorter
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
this has only one value
this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL == orig(sorter)
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(sorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(sorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != errors.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != errors.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != errors.getClass().getName()
this.fScheduler.getClass().getName() != errors.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(errors.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(errors.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(errors.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.Suite:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this has only one value
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 1
this.fRunners[] elements has only one value
this.fRunners[] elements != null
this.fRunners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
this.fRunners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == java.util.ArrayList.class
this.fTestClass has only one value
this.fTestClass.fClass == null
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fFieldsForAnnotations has only one value
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler has only one value
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.fRunners[]) == 1
this.fRunners.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.fRunners.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fRunners.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.fRunners == orig(runners)
this.fRunners[] == runners[]
this.fTestClass.fClass == orig(klass)
runners[] == orig(runners[])
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == orig(runners.getClass().getName())
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
size(this.fRunners[]) == orig(size(classes[]))
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
child has only one value
child.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
child in this.fRunners[]
this.fRunners[] elements == child
child.getClass().getName() in this.fRunners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(this.fRunners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fRunners[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() == [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description]
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.lang3.text.StrBuilderAppendInsertTest"
return.fAnnotations has only one value
size(return.fChildren[]) == 51
orig(child) in this.fRunners[]
this.fRunners[] elements == orig(child)
orig(child.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.fRunners == return
this.fRunners[] == return[]
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fRunners)
return[] == orig(this.fRunners[])
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fRunners.getClass().getName() == return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(this.fRunners.getClass().getName())
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
size(this.fRunners[]) == size(notifier.fListeners[])
runner has only one value
runner.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fPleaseStop == false
runner in this.fRunners[]
this.fRunners[] elements == runner
runner.getClass().getName() in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == notifier.fListeners.getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
size(this.fRunners[]) == size(notifier.fListeners[])
size(this.fRunners[]) == orig(size(notifier.fListeners[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 1
notifier.fListeners[] elements has only one value
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener]
notifier.fListeners[].getClass().getName() elements == org.junit.runner.Result.Listener.class
notifier.fPleaseStop == false
orig(runner) in this.fRunners[]
this.fRunners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == notifier.fListeners.getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
this.fRunners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkField:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field):::ENTER
===========================================================================
org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field):::EXIT
this.fField == orig(field)
===========================================================================
org.junit.runners.model.FrameworkField.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkField.getAnnotations():::EXIT
this.fField == orig(this.fField)
return has only one value
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
===========================================================================
org.junit.runners.model.FrameworkMember:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMember.FrameworkMember():::EXIT
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::ENTER
this.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
members has only one value
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
members.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != members.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT
members[] == orig(members[])
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return == false
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod$1:::OBJECT
this.val$target.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.val$params.getClass().getName() == java.lang.Object[].class
this.val$params[] == []
this.val$params[].getClass().getName() == []
this.val$target.getClass().getName() != this.val$params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::ENTER
$hidden$2.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
$hidden$3.getClass().getName() == java.lang.Object[].class
$hidden$3[] == []
$hidden$2.getClass().getName() != $hidden$3.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::EXIT
this.val$target == orig($hidden$2)
this.val$params == orig($hidden$3)
this.val$params[] == $hidden$3[]
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
$hidden$3[] == orig($hidden$3[])
$hidden$3[] == []
this.val$target.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$params.getClass().getName() == orig($hidden$3.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::EXIT
this.val$target == orig(this.val$target)
this.val$params == orig(this.val$params)
this.val$params[] == orig(this.val$params[])
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
return == null
this.val$target.getClass().getName() == orig(this.val$target.getClass().getName())
this.val$params.getClass().getName() == orig(this.val$params.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::EXIT
this.fMethod == orig(method)
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] elements != null
size(return[]) one of { 0, 1 }
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::EXIT
this.fMethod == orig(this.fMethod)
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::ENTER
target.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
params.getClass().getName() == java.lang.Object[].class
params[] == []
target.getClass().getName() != params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::EXIT
this.fMethod == orig(this.fMethod)
params[] == orig(params[])
params[] == []
return == null
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT
this.fMethod == orig(this.fMethod)
other.fMethod == orig(other.fMethod)
return == false
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == orig(parent)
this.parents has only one value
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents has only one value
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT57
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fMethodsForAnnotations.getClass().getName() == this.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.fClass == orig(klass)
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() != member.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT56
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() != orig(member.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::ENTER
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return[].getClass().getName() one of { [], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 51 }
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT129
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT130
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass has only one value)  ==>  (return has only one value)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
this.fClass == return
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return == orig(this.fClass)
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getName():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT109
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "null"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT110
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "org.apache.commons.lang3.text.StrBuilderAppendInsertTest"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass == null)  <==>  (return.toString == "null")
(this.fClass has only one value)  <==>  (return.toString == "org.apache.commons.lang3.text.StrBuilderAppendInsertTest")
return.toString one of { "null", "org.apache.commons.lang3.text.StrBuilderAppendInsertTest" }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
this.fClass == testClass
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fClass == orig(testClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[].getClass().getName() elements == java.lang.Class.class
return[].getClass().getName() one of { [], [java.lang.Class, java.lang.Class] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 2 }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotation has only one value
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return == false
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="not(return == true)"
