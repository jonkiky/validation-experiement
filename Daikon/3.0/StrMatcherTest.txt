===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected one of { 0, 1, 2 }
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected one of { 0, 1, 2 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
expected.getClass().getName() == java.lang.Integer.class
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message != null
message.toString == "TestCase.fName cannot be null"
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 14
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.text.StrMatcherTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 14
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
size(this.fTests[]) == 14
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 14
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest]
names[] contains no nulls and has only one value, of length 14
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 14
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 14)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 14)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 14
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest]
return == false
size(this.fTests[]) == 14
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 14)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 14)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrMatcherTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 14
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest]
return == false
size(this.fTests[]) == 14
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 14
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest, org.apache.commons.lang3.text.StrMatcherTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 15 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 14 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 14
runTime == 1242
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 14
return has only one value
return.toString == "1.242"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 1242
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 14
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 14
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 14
runTime == 1242
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 14
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrMatcherTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 14 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 14
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 14
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 14
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 14
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 14
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183
org.apache.commons.lang3.StringUtils.sunAvailable == return
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT184
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT184;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
(return == false)  <==>  (orig(cs) has only one value)
(return == false)  ==>  (org.apache.commons.lang3.StringUtils.sunAvailable == return)
(return == true)  ==>  (org.apache.commons.lang3.StringUtils.java6Available == return)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="return == true"
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
org.apache.commons.lang3.StringUtils.sunAvailable == return
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.daikon.StrMatcherTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.StrMatcherTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher:::OBJECT
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.CharMatcher(char):::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.CharMatcher(char):::EXIT
this.ch == orig(ch)
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.isMatch(char[], int, int, int):::ENTER
bufferEnd == size(buffer[])
buffer[] one of { [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34], [97, 98, 99, 100, 101, 102] }
buffer[] elements >= 0
bufferStart == 0
bufferEnd one of { 6, 13 }
size(buffer[]) one of { 6, 13 }
buffer[bufferStart] one of { 48, 97 }
buffer[bufferEnd-1] one of { 34, 102 }
this.ch in buffer[]
this.ch > pos
bufferStart % this.ch == 0
this.ch > bufferStart
this.ch != bufferEnd
this.ch != size(buffer[])
this.ch != size(buffer[])-1
this.ch != buffer[bufferStart]
buffer[] elements >= bufferStart
pos >= bufferStart
pos < bufferEnd
pos <= size(buffer[])-1
pos != buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart < size(buffer[])-1
bufferStart <= buffer[pos]
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd != buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd < buffer[bufferEnd-1]
size(buffer[]) != buffer[pos]
size(buffer[]) < buffer[bufferStart]
size(buffer[]) < buffer[bufferEnd-1]
size(buffer[])-1 != buffer[pos]
buffer[bufferStart] != buffer[bufferEnd-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.isMatch(char[], int, int, int):::EXIT
this.ch == orig(this.ch)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] one of { [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34], [97, 98, 99, 100, 101, 102] }
buffer[] elements >= 0
return one of { 0, 1 }
buffer[orig(bufferStart)] one of { 48, 97 }
buffer[orig(bufferEnd)-1] one of { 34, 102 }
this.ch in buffer[]
this.ch > return
this.ch > orig(pos)
orig(bufferStart) % this.ch == 0
this.ch > orig(bufferStart)
this.ch != orig(bufferEnd)
this.ch != size(buffer[])-1
this.ch != orig(size(buffer[]))
this.ch != buffer[orig(bufferStart)]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements >= orig(bufferStart)
return <= orig(pos)
return >= orig(bufferStart)
return < orig(bufferEnd)
return < size(buffer[])-1
return < buffer[return]
return <= buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
orig(pos) <= size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) != buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < buffer[return]
orig(bufferStart) <= buffer[orig(pos)]
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) < buffer[return]
orig(bufferEnd) != buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
size(buffer[])-1 != buffer[orig(pos)]
orig(size(buffer[])) < buffer[return]
orig(size(buffer[])) != buffer[orig(pos)]
orig(size(buffer[])) < buffer[orig(bufferStart)]
orig(size(buffer[])) < buffer[orig(bufferEnd)-1]
buffer[return] != buffer[orig(bufferEnd)-1]
buffer[orig(bufferStart)] != buffer[orig(bufferEnd)-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:::OBJECT
this.chars[] one of { [9, 10, 12, 13, 32], [34, 39], [97, 99, 101] }
this.chars[] sorted by <
size(this.chars[]) one of { 2, 3, 5 }
this.chars[] elements > size(this.chars[])
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.CharSetMatcher(char[]):::ENTER
chars[] one of { [32, 9, 10, 13, 12], [39, 34], [97, 99, 101] }
size(chars[]) one of { 2, 3, 5 }
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.CharSetMatcher(char[]):::EXIT
chars[] == orig(chars[])
size(this.chars[]) == orig(size(chars[]))
chars[] one of { [32, 9, 10, 13, 12], [39, 34], [97, 99, 101] }
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.isMatch(char[], int, int, int):::ENTER
bufferEnd == size(buffer[])
buffer[] one of { [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34], [97, 98, 99, 100, 101, 102] }
buffer[] elements >= 0
bufferStart == 0
bufferEnd one of { 6, 13 }
size(buffer[]) one of { 6, 13 }
this.chars[bufferStart] one of { 9, 34, 97 }
buffer[bufferStart] one of { 48, 97 }
buffer[bufferEnd-1] one of { 34, 102 }
this.chars[] elements > bufferStart
this.chars[] elements >= this.chars[bufferStart]
buffer[] elements >= bufferStart
this.chars[bufferStart] in buffer[]
pos >= bufferStart
pos < bufferEnd
pos <= size(buffer[])-1
pos != buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart < size(this.chars[])-1
bufferStart < size(buffer[])-1
bufferStart < this.chars[bufferStart]
bufferStart <= buffer[pos]
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd > size(this.chars[])
bufferEnd != this.chars[bufferStart]
bufferEnd < buffer[bufferStart]
bufferEnd < buffer[bufferEnd-1]
size(this.chars[]) < size(buffer[])-1
size(this.chars[]) < this.chars[bufferStart]
size(this.chars[]) != buffer[pos]
size(this.chars[]) < buffer[bufferStart]
size(this.chars[]) < buffer[bufferEnd-1]
size(this.chars[])-1 != buffer[pos]
size(buffer[]) != this.chars[bufferStart]
size(buffer[]) < buffer[bufferStart]
size(buffer[]) < buffer[bufferEnd-1]
size(buffer[])-1 != this.chars[bufferStart]
this.chars[bufferStart] <= buffer[bufferStart]
this.chars[bufferStart] <= buffer[bufferEnd-1]
buffer[bufferStart] != buffer[bufferEnd-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.isMatch(char[], int, int, int):::EXIT
this.chars == orig(this.chars)
this.chars[] == orig(this.chars[])
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] one of { [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34], [97, 98, 99, 100, 101, 102] }
buffer[] elements >= 0
return one of { 0, 1 }
this.chars[orig(bufferStart)] one of { 9, 34, 97 }
buffer[orig(bufferStart)] one of { 48, 97 }
buffer[orig(bufferEnd)-1] one of { 34, 102 }
this.chars[] elements > return
this.chars[] elements > orig(bufferStart)
this.chars[] elements >= this.chars[orig(bufferStart)]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements >= orig(bufferStart)
this.chars[return] in buffer[]
this.chars[orig(bufferStart)] in buffer[]
return != orig(pos)
return >= orig(bufferStart)
return < orig(bufferEnd)
return <= size(this.chars[])-1
return < size(buffer[])-1
return < this.chars[return]
return < this.chars[orig(bufferStart)]
return < buffer[return]
return <= buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
orig(pos) <= size(buffer[])-1
orig(pos) != this.chars[return]
orig(pos) < buffer[return]
orig(pos) != buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < size(this.chars[])-1
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < this.chars[return]
orig(bufferStart) < this.chars[orig(bufferStart)]
orig(bufferStart) < buffer[return]
orig(bufferStart) <= buffer[orig(pos)]
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) > size(this.chars[])
orig(bufferEnd) != this.chars[return]
orig(bufferEnd) != this.chars[orig(bufferStart)]
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(bufferStart)]
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
size(this.chars[]) < size(buffer[])-1
size(this.chars[]) < this.chars[return]
size(this.chars[]) < this.chars[orig(bufferStart)]
size(this.chars[]) < buffer[return]
size(this.chars[]) != buffer[orig(pos)]
size(this.chars[]) < buffer[orig(bufferStart)]
size(this.chars[]) < buffer[orig(bufferEnd)-1]
size(this.chars[])-1 != buffer[orig(pos)]
size(buffer[])-1 != this.chars[return]
size(buffer[])-1 != this.chars[orig(bufferStart)]
orig(size(buffer[])) != this.chars[return]
orig(size(buffer[])) != this.chars[orig(bufferStart)]
orig(size(buffer[])) < buffer[return]
orig(size(buffer[])) < buffer[orig(bufferStart)]
orig(size(buffer[])) < buffer[orig(bufferEnd)-1]
this.chars[return] >= this.chars[orig(bufferStart)]
this.chars[orig(bufferStart)] <= buffer[return]
this.chars[orig(bufferStart)] <= buffer[orig(bufferStart)]
this.chars[orig(bufferStart)] <= buffer[orig(bufferEnd)-1]
buffer[return] != buffer[orig(pos)]
buffer[return] != buffer[orig(bufferEnd)-1]
buffer[orig(bufferStart)] != buffer[orig(bufferEnd)-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher.NoMatcher():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher.isMatch(char[], int, int, int):::ENTER
bufferEnd == size(buffer[])
buffer has only one value
buffer[] == [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34]
buffer[] elements >= 0
bufferStart == 0
bufferEnd == 13
size(buffer[]) == 13
buffer[bufferStart] == 48
buffer[bufferEnd-1] == 34
bufferStart in buffer[]
buffer[] elements >= bufferStart
bufferEnd in buffer[]
size(buffer[]) in buffer[]
size(buffer[])-1 in buffer[]
pos >= bufferStart
pos < bufferEnd
pos <= size(buffer[])-1
pos != buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart <= buffer[pos]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher.isMatch(char[], int, int, int):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
return == orig(bufferStart)
buffer[] == [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34]
buffer[] elements >= 0
return == 0
buffer[return] == 48
buffer[orig(bufferEnd)-1] == 34
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements >= return
return in buffer[]
orig(bufferEnd) in buffer[]
size(buffer[])-1 in buffer[]
orig(size(buffer[])) in buffer[]
return <= orig(pos)
return <= buffer[orig(pos)]
orig(pos) <= size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) != buffer[orig(pos)]
orig(pos) < buffer[orig(bufferEnd)-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher:::OBJECT
this.chars[] == [98, 99]
this.chars[] elements one of { 98, 99 }
this.chars[] sorted by <
size(this.chars[]) == 2
this.chars[] elements > size(this.chars[])
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.StringMatcher(java.lang.String):::ENTER
str has only one value
str.toString == "bc"
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.StringMatcher(java.lang.String):::EXIT
str.toString == "bc"
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::ENTER
buffer has only one value
buffer[] == [97, 98, 99, 100, 101, 102]
buffer[] sorted by <
bufferStart one of { 0, 1 }
bufferEnd one of { 2, 3, 6 }
size(buffer[]) == 6
buffer[bufferStart] one of { 97, 98 }
buffer[bufferEnd-1] one of { 98, 99, 102 }
this.chars[] elements > pos
this.chars[] elements > bufferStart
this.chars[] elements > bufferEnd
this.chars[] elements > size(buffer[])
this.chars[] elements >= buffer[bufferStart]
buffer[] elements > pos
buffer[] elements > bufferStart
buffer[] elements > bufferEnd
buffer[] elements > size(this.chars[])
buffer[] elements > size(buffer[])
this.chars[bufferStart] in buffer[]
pos >= bufferStart
pos < bufferEnd
pos <= size(buffer[])-1
pos < this.chars[bufferStart]
pos - buffer[pos] + 97 == 0
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart <= size(this.chars[])-1
bufferStart < size(buffer[])-1
bufferStart < this.chars[bufferStart]
bufferStart < buffer[pos]
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd >= size(this.chars[])
bufferEnd <= size(buffer[])
bufferEnd != size(buffer[])-1
bufferEnd < this.chars[bufferStart]
bufferEnd < buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd < buffer[bufferEnd-1]
buffer[bufferEnd-1] % bufferEnd == 0
size(this.chars[]) < this.chars[bufferStart]
size(this.chars[]) < buffer[pos]
size(this.chars[]) < buffer[bufferStart]
size(this.chars[]) < buffer[bufferEnd-1]
size(buffer[]) < this.chars[bufferStart]
size(buffer[]) < buffer[pos]
size(buffer[]) < buffer[bufferStart]
size(buffer[]) < buffer[bufferEnd-1]
this.chars[bufferStart] > buffer[bufferStart]
this.chars[bufferStart] <= buffer[bufferEnd-1]
buffer[pos] >= buffer[bufferStart]
buffer[pos] <= buffer[bufferEnd-1]
buffer[bufferStart] < buffer[bufferEnd-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT369
return == orig(bufferStart)
buffer[orig(pos)] == buffer[orig(bufferEnd)-1]
buffer[orig(pos)] == orig(buffer[post(bufferEnd)-1])
buffer[orig(pos)] == orig(buffer[bufferEnd-1])
return == 0
orig(pos) one of { 1, 5 }
orig(bufferEnd) one of { 2, 6 }
this.chars[return] == 98
buffer[return] == 97
buffer[orig(pos)] one of { 98, 102 }
buffer[orig(pos)-1] one of { 97, 101 }
this.chars[return] in buffer[]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT373
return == orig(bufferStart)
orig(bufferEnd) == orig(size(buffer[]))
this.chars has only one value
return == 0
orig(this) has only one value
orig(bufferEnd) == 6
this.chars[return] == 98
buffer[return] == 97
buffer[orig(bufferEnd)-1] == 102
this.chars[return] in buffer[]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT376
return == size(this.chars[])
orig(pos) == size(this.chars[])-1
this.chars[return-1] == buffer[return]
this.chars[orig(pos)] == buffer[return]
this.chars[orig(pos)-1] == buffer[return-1]
buffer[return] == orig(buffer[post(pos)-1])
buffer[return] == orig(this.chars[post(return)-1])
buffer[return] == orig(this.chars[pos])
buffer[return-1] == buffer[orig(pos)]
buffer[return-1] == orig(this.chars[pos-1])
buffer[return-1] == orig(buffer[pos])
return == 2
orig(pos) == 1
orig(bufferEnd) one of { 3, 6 }
buffer[return] == 99
buffer[return-1] == 98
buffer[orig(pos)-1] == 97
buffer[orig(bufferEnd)-1] one of { 99, 102 }
orig(buffer[post(pos)]) == 100
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT
this.chars == orig(this.chars)
this.chars[] == orig(this.chars[])
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] == [97, 98, 99, 100, 101, 102]
buffer[] sorted by <
return one of { 0, 2 }
buffer[return] one of { 97, 99 }
buffer[orig(bufferStart)] one of { 97, 98 }
buffer[orig(bufferEnd)-1] one of { 98, 99, 102 }
this.chars[] elements > return
this.chars[] elements > orig(pos)
this.chars[] elements > orig(bufferStart)
this.chars[] elements > orig(bufferEnd)
this.chars[] elements > orig(size(buffer[]))
this.chars[] elements >= buffer[orig(bufferStart)]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements > return
buffer[] elements > orig(pos)
buffer[] elements > orig(bufferStart)
buffer[] elements > orig(bufferEnd)
buffer[] elements > size(this.chars[])
buffer[] elements > orig(size(buffer[]))
this.chars[orig(bufferStart)] in buffer[]
return >= orig(bufferStart)
return < orig(bufferEnd)
return <= size(this.chars[])
return != size(this.chars[])-1
return < size(buffer[])-1
return < this.chars[orig(bufferStart)]
return < buffer[return]
return < buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
return < orig(buffer[post(pos)])
orig(pos) <= size(buffer[])-1
orig(pos) < this.chars[orig(bufferStart)]
orig(pos) < buffer[return]
orig(pos) - buffer[orig(pos)] + 97 == 0
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(pos) < orig(buffer[post(pos)])
orig(bufferStart) <= size(this.chars[])-1
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < this.chars[orig(bufferStart)]
orig(bufferStart) < buffer[return]
orig(bufferStart) < buffer[orig(pos)]
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < orig(buffer[post(pos)])
orig(bufferEnd) >= size(this.chars[])
orig(bufferEnd) != size(buffer[])-1
orig(bufferEnd) < this.chars[orig(bufferStart)]
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
buffer[orig(bufferEnd)-1] % orig(bufferEnd) == 0
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) < orig(buffer[post(pos)])
size(this.chars[]) < this.chars[orig(bufferStart)]
size(this.chars[]) < buffer[return]
size(this.chars[]) < buffer[orig(pos)]
size(this.chars[]) < buffer[orig(bufferStart)]
size(this.chars[]) < buffer[orig(bufferEnd)-1]
size(this.chars[]) < orig(buffer[post(pos)])
orig(size(buffer[])) < this.chars[orig(bufferStart)]
orig(size(buffer[])) < buffer[return]
orig(size(buffer[])) < buffer[orig(pos)]
orig(size(buffer[])) < buffer[orig(bufferStart)]
orig(size(buffer[])) < buffer[orig(bufferEnd)-1]
orig(size(buffer[])) < orig(buffer[post(pos)])
this.chars[orig(bufferStart)] > buffer[orig(bufferStart)]
this.chars[orig(bufferStart)] <= buffer[orig(bufferEnd)-1]
buffer[return] >= buffer[orig(bufferStart)]
buffer[return] <= buffer[orig(bufferEnd)-1]
buffer[return] <= orig(buffer[post(pos)])
buffer[orig(pos)] >= buffer[orig(bufferStart)]
buffer[orig(pos)] <= buffer[orig(bufferEnd)-1]
buffer[orig(pos)] <= orig(buffer[post(pos)])
buffer[orig(bufferStart)] < buffer[orig(bufferEnd)-1]
buffer[orig(bufferStart)] <= orig(buffer[post(pos)])
return + orig(pos) - orig(buffer[post(pos)]) + 97 == 0
return + buffer[orig(pos)] - orig(buffer[post(pos)]) == 0
orig(pos) + buffer[return] - orig(buffer[post(pos)]) == 0
buffer[return] + buffer[orig(pos)] - orig(buffer[post(pos)]) - 97 == 0
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher.TrimMatcher():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher.isMatch(char[], int, int, int):::ENTER
bufferEnd == size(buffer[])
buffer has only one value
buffer[] == [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34]
buffer[] elements >= 0
bufferStart == 0
bufferEnd == 13
size(buffer[]) == 13
buffer[bufferStart] == 48
buffer[bufferEnd-1] == 34
bufferStart in buffer[]
buffer[] elements >= bufferStart
bufferEnd in buffer[]
size(buffer[]) in buffer[]
size(buffer[])-1 in buffer[]
bufferStart % pos == 0
pos > bufferStart
pos < bufferEnd
pos < size(buffer[])-1
pos != buffer[pos]
pos < buffer[pos-1]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart <= buffer[pos]
bufferStart < buffer[pos-1]
buffer[pos] != buffer[pos-1]
buffer[pos] != buffer[bufferStart]
buffer[pos] != buffer[bufferEnd-1]
buffer[pos-1] != buffer[bufferStart]
buffer[pos-1] != buffer[bufferEnd-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher.isMatch(char[], int, int, int):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] == [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34]
buffer[] elements >= 0
return one of { 0, 1 }
buffer[return] one of { 44, 48 }
buffer[orig(bufferStart)] == 48
buffer[orig(bufferEnd)-1] == 34
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements >= orig(bufferStart)
orig(bufferStart) in buffer[]
orig(bufferEnd) in buffer[]
size(buffer[])-1 in buffer[]
orig(size(buffer[])) in buffer[]
return < orig(pos)
return >= orig(bufferStart)
return < orig(bufferEnd)
return < size(buffer[])-1
return < buffer[return]
return != buffer[orig(pos)]
return < buffer[orig(pos)-1]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
orig(pos) < size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) != buffer[orig(pos)]
orig(pos) < buffer[orig(pos)-1]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < buffer[return]
orig(bufferStart) <= buffer[orig(pos)]
orig(bufferStart) < buffer[orig(pos)-1]
orig(bufferEnd) < buffer[return]
orig(size(buffer[])) < buffer[return]
buffer[return] != buffer[orig(pos)]
buffer[return] != buffer[orig(pos)-1]
buffer[return] <= buffer[orig(bufferStart)]
buffer[return] > buffer[orig(bufferEnd)-1]
buffer[orig(pos)] != buffer[orig(pos)-1]
buffer[orig(pos)] != buffer[orig(bufferStart)]
buffer[orig(pos)] != buffer[orig(bufferEnd)-1]
buffer[orig(pos)-1] != buffer[orig(bufferStart)]
buffer[orig(pos)-1] != buffer[orig(bufferEnd)-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher:::OBJECT
===========================================================================
org.apache.commons.lang3.text.StrMatcher.StrMatcher():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charMatcher(char):::ENTER
ch == 99
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charMatcher(char):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(char[]):::ENTER
chars[] elements one of { 97, 99, 101 }
chars[] one of { [], [97], [97, 99, 101] }
size(chars[]) one of { 0, 1, 3 }
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(char[]):::EXIT175
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
chars[] == []
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(char[]):::EXIT178
chars[] == [97]
chars[] elements == 97
return has only one value
orig(chars) has only one value
orig(size(chars[])) == 1
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(char[]):::EXIT180
chars[] == [97, 99, 101]
return has only one value
orig(chars) has only one value
orig(size(chars[])) == 3
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(char[]):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
chars[] == orig(chars[])
chars[] elements one of { 97, 99, 101 }
chars[] one of { [], [97], [97, 99, 101] }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(java.lang.String):::ENTER
chars.toString one of { "", "a", "ace" }
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(java.lang.String):::EXIT191
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
chars.toString == ""
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(java.lang.String):::EXIT194
chars.toString == "a"
return has only one value
orig(chars) has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(java.lang.String):::EXIT196
chars.toString == "ace"
return has only one value
orig(chars) has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charSetMatcher(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
chars.toString one of { "", "a", "ace" }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
chars.toString == orig(chars.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcher.commaMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.commaMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int):::ENTER
buffer[] one of { [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34], [97, 98, 99, 100, 101, 102] }
buffer[] elements >= 0
pos >= 0
size(buffer[]) one of { 6, 13 }
pos <= size(buffer[])-1
pos != buffer[pos]
===========================================================================
org.apache.commons.lang3.text.StrMatcher.isMatch(char[], int):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] one of { [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34], [97, 98, 99, 100, 101, 102] }
buffer[] elements >= 0
return one of { 0, 1, 2 }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return < size(buffer[])-1
return < buffer[return]
orig(pos) <= size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) != buffer[orig(pos)]
orig(size(buffer[])) < buffer[return]
===========================================================================
org.apache.commons.lang3.text.StrMatcher.noneMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.noneMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.quoteMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.quoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.singleQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.spaceMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.spaceMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.splitMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.splitMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::ENTER
str.toString one of { "", "bc" }
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::EXIT207
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
str.toString == ""
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::EXIT209
str.toString == "bc"
return.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$StringMatcher.class
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
(str.toString == "")  <==>  (org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName())
(str.toString == "")  <==>  (return.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class)
(str.toString == "")  ==>  (org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return)
(str.toString == "")  ==>  (return has only one value)
(str.toString == "bc")  <==>  (orig(str) has only one value)
(str.toString == "bc")  <==>  (return.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$StringMatcher.class)
str.toString one of { "", "bc" }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcher.tabMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.tabMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.trimMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.trimMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest:::CLASS
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 has only one value
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 != null
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == [48, 44, 49, 9, 50, 32, 51, 10, 13, 12, 0, 39, 34]
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] elements >= 0
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 has only one value
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 != null
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == [97, 98, 99, 100, 101, 102]
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] sorted by <
size(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[]) == 13
size(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[]) == 6
size(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[]) in org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[]
size(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])-1 in org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[]
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] elements > size(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] elements > size(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.StrMatcherTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.StrMatcherTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCharMatcher_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCharMatcher_char"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCharMatcher_char():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCharMatcher_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCharSetMatcher_String"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_String():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCharSetMatcher_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_charArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCharSetMatcher_charArray"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCharSetMatcher_charArray():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCharSetMatcher_charArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCommaMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCommaMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testCommaMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCommaMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testDoubleQuoteMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDoubleQuoteMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testDoubleQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDoubleQuoteMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testMatcherIndices():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMatcherIndices"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testMatcherIndices():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMatcherIndices"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testNoneMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testNoneMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testNoneMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testNoneMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testQuoteMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testQuoteMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testQuoteMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testSingleQuoteMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSingleQuoteMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testSingleQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSingleQuoteMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testSpaceMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSpaceMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testSpaceMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSpaceMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testSplitMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSplitMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testSplitMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSplitMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStringMatcher_String"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testStringMatcher_String():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStringMatcher_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testTabMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testTabMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testTabMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testTabMatcher"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testTrimMatcher():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testTrimMatcher"
===========================================================================
org.apache.commons.lang3.text.StrMatcherTest.testTrimMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER1[])
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2 == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2)
org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[] == orig(org.apache.commons.lang3.text.StrMatcherTest.BUFFER2[])
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testTrimMatcher"
this.fName.toString == orig(this.fName.toString)
