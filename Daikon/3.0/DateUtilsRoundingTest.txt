===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message != null
message.toString == "TestCase.fName cannot be null"
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message != null
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
this.fName != null
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fName != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fName != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
name != null
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName != null
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 22
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 22
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.time.DateUtilsRoundingTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 22
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
size(this.fTests[]) == 22
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT87
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 22 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 22
result.fStop == false
size(this.fTests[]) one of { 1, 22 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 22 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest, org.apache.commons.lang3.time.DateUtilsRoundingTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 22 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 23 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 22 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 22
runTime == 1277
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 22
return has only one value
return.toString == "1.277"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 22
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 1277
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 22
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 22
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 22
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 22
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 22
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 22
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 22
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 22
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 22
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 22
runTime == 1277
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 22
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsRoundingTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 22 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 22
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 22
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 22
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 22
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 22
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.Validate:::CLASS
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified exclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified inclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX has only one value
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == "The string %s does not match the pattern %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == "The validated object is null"
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == "The validated expression is false"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == "The validated array contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == "The validated collection contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == "The validated character sequence is blank"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == "The validated array is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == "The validated collection is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == "The validated map is empty"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == "The validated array index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == "The validated collection index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == "The validated state is false"
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == "The validated class can not be converted to the %s class"
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == "The validated object is not an instance of %s"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::ENTER
expression == true
message has only one value
message.toString == "Negative values should not be possible"
value one of { 2007, 2008 }
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
message.toString == "Negative values should not be possible"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.daikon.DateUtilsRoundingTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.DateUtilsRoundingTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.time.DateUtils:::CLASS
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY == org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY == org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY-1] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND-1]
org.apache.commons.lang3.time.DateUtils.fields has only one value
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == int[][].class
org.apache.commons.lang3.time.DateUtils.fields[] contains no nulls and has only one value, of length 8
org.apache.commons.lang3.time.DateUtils.fields[] elements != null
size(org.apache.commons.lang3.time.DateUtils.fields[]) == 8
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] has only one value
===========================================================================
org.apache.commons.lang3.time.DateUtils.add(java.util.Date, int, int):::ENTER
calendarField == 14
amount one of { -1, 1 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > amount
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY >= amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER > amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY > amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY > amount
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE != amount
calendarField > amount
amount < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.add(java.util.Date, int, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(amount) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMilliseconds(java.util.Date, int):::ENTER
amount one of { -1, 1 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > amount
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY >= amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER > amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY > amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY > amount
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE != amount
amount < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMilliseconds(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(amount) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::ENTER
val.getClass().getName() == java.util.GregorianCalendar.class
field >= 1
modType one of { 0, 1 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > modType
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > modType
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > modType
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > modType
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > modType
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != val.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY >= modType
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY > modType
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE > modType
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER > modType
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY > modType
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY > modType
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE <= modType
field >= modType
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
modType < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::EXIT908
orig(field) == 14
orig(field) > orig(modType)
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::EXIT986
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(val.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
orig(modType) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::EXIT724
orig(date.getClass().getName()) == java.util.Date.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::EXIT726
orig(date.getClass().getName()) == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Calendar, int):::ENTER
date.getClass().getName() == java.util.GregorianCalendar.class
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Calendar, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
return.getClass().getName() == orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Date, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::EXIT803
orig(date.getClass().getName()) == java.util.Date.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::EXIT805
orig(date.getClass().getName()) == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Calendar, int):::ENTER
date.getClass().getName() == java.util.GregorianCalendar.class
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Calendar, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
return.getClass().getName() == orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Date, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest:::OBJECT
this.targetDateDate == this.targetDayOfMonthDate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.dateTimeParser.getClass().getName() == java.text.SimpleDateFormat.class
this.januaryOneCalendar.getClass().getName() == java.util.GregorianCalendar.class
this.fdf has only one value
this.fdf != null
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache != null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache != null
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache != null
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache != null
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.fdf.mPattern has only one value
this.fdf.mPattern != null
this.fdf.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.fdf.mTimeZone has only one value
this.fdf.mTimeZone != null
this.fdf.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.fdf.mLocale has only one value
this.fdf.mLocale != null
this.fdf.mRules has only one value
this.fdf.mRules != null
this.fdf.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
this.fdf.mRules[] contains no nulls and has only one value, of length 11
this.fdf.mRules[] elements != null
this.fdf.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.fdf.mMaxLengthEstimate == 19
size(this.fdf.mRules[]) == 11
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
this.dateTimeParser.getClass().getName() != this.januaryOneCalendar.getClass().getName()
this.dateTimeParser.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName()
this.dateTimeParser.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
this.dateTimeParser.getClass().getName() != this.fdf.mTimeZone.getClass().getName()
this.dateTimeParser.getClass().getName() != this.fdf.mRules.getClass().getName()
this.januaryOneCalendar.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName()
this.januaryOneCalendar.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
this.januaryOneCalendar.getClass().getName() != this.fdf.mTimeZone.getClass().getName()
this.januaryOneCalendar.getClass().getName() != this.fdf.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.fdf.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.fdf.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.fdf.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.fdf.mRules.getClass().getName()
this.fdf.mPattern.toString > this.fName.toString
this.fdf.mTimeZone.getClass().getName() != this.fdf.mRules.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.DateUtilsRoundingTest():::EXIT
this.januaryOneDate == this.targetYearDate
this.januaryOneDate == this.targetDateDate
this.januaryOneDate == this.targetDayOfMonthDate
this.januaryOneDate == this.targetAmDate
this.januaryOneDate == this.targetPmDate
this.januaryOneDate == this.targetHourOfDayDate
this.januaryOneDate == this.targetHourDate
this.januaryOneDate == this.targetMinuteDate
this.januaryOneDate == this.targetSecondDate
this.januaryOneDate == this.targetMilliSecondDate
this.dateTimeParser == null
this.januaryOneDate == null
this.januaryOneCalendar == null
this.fName == null
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.baseRoundTest(java.util.Date, java.util.Date, java.util.Date, int):::ENTER
this.dateTimeParser != null
this.januaryOneDate != null
this.targetYearDate != null
this.targetDateDate != null
this.targetAmDate != null
this.targetPmDate != null
this.targetHourOfDayDate != null
this.targetHourDate != null
this.targetMinuteDate != null
this.targetSecondDate != null
this.targetMilliSecondDate != null
this.januaryOneCalendar != null
this.fName != null
roundedUpDate != null
roundedDownDate != null
lastRoundDownDate != null
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= calendarField
org.apache.commons.lang3.time.FastDateFormat.FULL < calendarField
org.apache.commons.lang3.time.FastDateFormat.SHORT != calendarField
org.apache.commons.lang3.time.FormatCache.NONE < calendarField
this.fdf.mMaxLengthEstimate != calendarField
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.baseRoundTest(java.util.Date, java.util.Date, java.util.Date, int):::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser != null
this.januaryOneDate != null
this.targetYearDate != null
this.targetDateDate != null
this.targetAmDate != null
this.targetPmDate != null
this.targetHourOfDayDate != null
this.targetHourDate != null
this.targetMinuteDate != null
this.targetSecondDate != null
this.targetMilliSecondDate != null
this.januaryOneCalendar != null
this.fName != null
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fdf.mMaxLengthEstimate != orig(calendarField)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.baseTruncateTest(java.util.Date, java.util.Date, int):::ENTER
this.dateTimeParser != null
this.januaryOneDate != null
this.targetYearDate != null
this.targetDateDate != null
this.targetAmDate != null
this.targetPmDate != null
this.targetHourOfDayDate != null
this.targetHourDate != null
this.targetMinuteDate != null
this.targetSecondDate != null
this.targetMilliSecondDate != null
this.januaryOneCalendar != null
this.fName != null
truncatedDate != null
lastTruncateDate != null
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= calendarField
org.apache.commons.lang3.time.FastDateFormat.FULL < calendarField
org.apache.commons.lang3.time.FastDateFormat.SHORT != calendarField
org.apache.commons.lang3.time.FormatCache.NONE < calendarField
this.fdf.mMaxLengthEstimate != calendarField
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.baseTruncateTest(java.util.Date, java.util.Date, int):::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser != null
this.januaryOneDate != null
this.targetYearDate != null
this.targetDateDate != null
this.targetAmDate != null
this.targetPmDate != null
this.targetHourOfDayDate != null
this.targetHourDate != null
this.targetMinuteDate != null
this.targetSecondDate != null
this.targetMilliSecondDate != null
this.januaryOneCalendar != null
this.fName != null
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fdf.mMaxLengthEstimate != orig(calendarField)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.roundToJanuaryFirst(java.util.Date, java.util.Date, int):::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < calendarField
org.apache.commons.lang3.time.FastDateFormat.FULL < calendarField
org.apache.commons.lang3.time.FastDateFormat.MEDIUM <= calendarField
org.apache.commons.lang3.time.FastDateFormat.SHORT != calendarField
org.apache.commons.lang3.time.FormatCache.NONE < calendarField
this.fdf.mMaxLengthEstimate != calendarField
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.roundToJanuaryFirst(java.util.Date, java.util.Date, int):::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fdf.mMaxLengthEstimate != orig(calendarField)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.setUp():::ENTER
this.januaryOneDate == this.targetYearDate
this.januaryOneDate == this.targetDateDate
this.januaryOneDate == this.targetDayOfMonthDate
this.januaryOneDate == this.targetAmDate
this.januaryOneDate == this.targetPmDate
this.januaryOneDate == this.targetHourOfDayDate
this.januaryOneDate == this.targetHourDate
this.januaryOneDate == this.targetMinuteDate
this.januaryOneDate == this.targetSecondDate
this.januaryOneDate == this.targetMilliSecondDate
this.dateTimeParser == null
this.januaryOneDate == null
this.januaryOneCalendar == null
this.fName != null
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.setUp():::EXIT
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser != null
this.januaryOneDate != null
this.targetYearDate != null
this.targetDateDate != null
this.targetAmDate != null
this.targetPmDate != null
this.targetHourOfDayDate != null
this.targetHourDate != null
this.targetMinuteDate != null
this.targetSecondDate != null
this.targetMilliSecondDate != null
this.januaryOneCalendar != null
this.fName != null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundAmPm"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundAmPm():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundAmPm"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundDate"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDate():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundDate"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundDayOfMonth"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundDayOfMonth():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundDayOfMonth"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundHour"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHour():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundHour"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundHourOfDay"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundHourOfDay():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundHourOfDay"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundMilliSecond"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMilliSecond():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundMilliSecond"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundMinute"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMinute():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundMinute"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundMonth"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundMonth():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundMonth"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundSecond"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSecond():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundSecond"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundSemiMonth"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundSemiMonth():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundSemiMonth"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundYear"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testRoundYear():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testRoundYear"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateAmPm"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateAmPm():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateAmPm"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateDate"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDate():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateDate"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateDayOfMonth"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateDayOfMonth():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateDayOfMonth"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateHour"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHour():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateHour"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateHourOfDay"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateHourOfDay():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateHourOfDay"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateMilliSecond"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMilliSecond():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateMilliSecond"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateMinute"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMinute():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateMinute"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateMonth"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateMonth():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateMonth"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateSecond"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSecond():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateSecond"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateSemiMonth"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateSemiMonth():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateSemiMonth"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear():::ENTER
this has only one value
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateYear"
===========================================================================
org.apache.commons.lang3.time.DateUtilsRoundingTest.testTruncateYear():::EXIT
this.dateTimeParser == orig(this.dateTimeParser)
this.januaryOneDate == orig(this.januaryOneDate)
this.targetYearDate == orig(this.targetYearDate)
this.targetDateDate == orig(this.targetDateDate)
this.targetDateDate == orig(this.targetDayOfMonthDate)
this.targetAmDate == orig(this.targetAmDate)
this.targetPmDate == orig(this.targetPmDate)
this.targetHourOfDayDate == orig(this.targetHourOfDayDate)
this.targetHourDate == orig(this.targetHourDate)
this.targetMinuteDate == orig(this.targetMinuteDate)
this.targetSecondDate == orig(this.targetSecondDate)
this.targetMilliSecondDate == orig(this.targetMilliSecondDate)
this.januaryOneCalendar == orig(this.januaryOneCalendar)
this.fdf == orig(this.fdf)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.fdf.mPattern == orig(this.fdf.mPattern)
this.fdf.mTimeZone == orig(this.fdf.mTimeZone)
this.fdf.mLocale == orig(this.fdf.mLocale)
this.fdf.mRules == orig(this.fdf.mRules)
this.fdf.mRules[] == orig(this.fdf.mRules[])
this.fdf.mMaxLengthEstimate == orig(this.fdf.mMaxLengthEstimate)
this.fName == orig(this.fName)
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.fdf.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.fdf.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.dateTimeParser has only one value
this.januaryOneDate has only one value
this.targetYearDate has only one value
this.targetDateDate has only one value
this.targetAmDate has only one value
this.targetPmDate has only one value
this.targetHourOfDayDate has only one value
this.targetHourDate has only one value
this.targetMinuteDate has only one value
this.targetSecondDate has only one value
this.targetMilliSecondDate has only one value
this.januaryOneCalendar has only one value
this.fName has only one value
this.fName.toString == "testTruncateYear"
this.dateTimeParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.januaryOneCalendar.getClass().getName() == orig(this.januaryOneCalendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.fdf.mPattern.toString == orig(this.fdf.mPattern.toString)
this.fdf.mTimeZone.getClass().getName() == orig(this.fdf.mTimeZone.getClass().getName())
this.fdf.mRules.getClass().getName() == orig(this.fdf.mRules.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::CLASS
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::OBJECT
this has only one value
this.cInstanceCache has only one value
this.cInstanceCache != null
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.cDateTimeInstanceCache != null
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
this.cInstanceCache.getClass().getName() != timeZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
return.mPattern == orig(pattern)
return.mTimeZone == orig(timeZone)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
this.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
this.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::EXIT
this.mValue == orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this.mValue one of { 45, 58, 84 }
buffer != null
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mValue == orig(this.mValue)
this.mValue one of { 45, 58, 84 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 1
this.mValue > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:::OBJECT
this.mField == 1
this.mSize == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::ENTER
field == 1
size == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::EXIT
this.mField == orig(field)
this.mSize == orig(size)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
this has only one value
buffer != null
value one of { 2007, 2008 }
this.mField < value
this.mSize < value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
this.mField < orig(value)
this.mSize < orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this has only one value
buffer != null
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mSize == return
return == orig(this.mSize)
return == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral:::OBJECT
this has only one value
this.mValue has only one value
this.mValue.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::ENTER
value has only one value
value.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::EXIT
this.mValue == orig(value)
value.toString == ", "
this.mValue.toString == value.toString
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 2
this.mValue.toString == orig(this.mValue.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField:::OBJECT
this.mField one of { 2, 7 }
this.mValues.getClass().getName() == java.lang.String[].class
this.mValues[].getClass().getName() elements == java.lang.String.class
this.mValues[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.mValues[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(this.mValues[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::ENTER
field one of { 2, 7 }
values.getClass().getName() == java.lang.String[].class
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(values[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::EXIT
this.mField == orig(field)
this.mValues == orig(values)
this.mValues[] == values[]
values[] == orig(values[])
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
this.mValues.getClass().getName() == orig(values.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mValues == orig(this.mValues)
this.mValues[] == orig(this.mValues[])
return == 3
this.mValues.getClass().getName() == orig(this.mValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == true
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == false
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::EXIT
this.mColon == orig(colon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
this.mColon == orig(this.mColon)
return == 5
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE has only one value
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE != null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::OBJECT
this == org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE
this has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.TwoDigitMonthField():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::ENTER
buffer != null
value >= 1
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
buffer != null
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
return == 2
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::EXIT
this.mField == orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
buffer != null
value >= 0
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
buffer != null
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
return == 2
this.mField > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::CLASS
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache != null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache != null
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache != null
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache != null
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::OBJECT
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mPattern != null
this.mTimeZone != null
this.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.mLocale has only one value
this.mLocale != null
this.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
this.mRules[] elements != null
this.mMaxLengthEstimate >= 0
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL <= this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mRules.getClass().getName()
org.apache.commons.lang3.time.FormatCache.NONE < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mRules.getClass().getName()
this.mTimeZone.getClass().getName() != this.mRules.getClass().getName()
this.mMaxLengthEstimate > size(this.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.mPattern == orig(pattern)
this.mTimeZone == orig(timeZone)
this.mLocale == orig(locale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
buf != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != calendar.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != calendar.getClass().getName()
this.mTimeZone.getClass().getName() != calendar.getClass().getName()
this.mRules.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
return != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(calendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(calendar.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mTimeZone.getClass().getName() != orig(calendar.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
this.mRules.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != calendar.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != calendar.getClass().getName()
this.mTimeZone.getClass().getName() != calendar.getClass().getName()
this.mRules.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
return != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(calendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(calendar.getClass().getName())
this.mPattern.toString > return.toString
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mTimeZone.getClass().getName() != orig(calendar.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
this.mRules.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
calendar != null
calendar.getClass().getName() == java.util.GregorianCalendar.class
buf != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != calendar.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != calendar.getClass().getName()
this.mTimeZone.getClass().getName() != calendar.getClass().getName()
this.mRules.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
return != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(calendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(calendar.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mTimeZone.getClass().getName() != orig(calendar.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
this.mRules.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
date != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules != null
this.mRules[] contains no nulls and has only one value, of length 11
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
this.mMaxLengthEstimate == 19
return != null
size(this.mRules[]) == 11
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString > return.toString
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::ENTER
pattern has only one value
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
return has only one value
return.mPattern has only one value
return.mTimeZone has only one value
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
return.mRules[] contains no nulls and has only one value, of length 15
return.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
return.mMaxLengthEstimate == 31
size(return.mRules[]) == 15
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return[org.apache.commons.lang3.time.FastDateFormat.FULL]
return[org.apache.commons.lang3.time.FastDateFormat.FULL] == return[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mRules == null
return.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == size(indexRef[])
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
this.mPattern == pattern
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef != null
indexRef[] elements >= 0
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mPattern.toString == pattern.toString
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mPattern == orig(pattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
return != null
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.serialVersionUID
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
pattern.toString != return.toString
pattern.toString == orig(this.mPattern.toString)
pattern.toString == orig(pattern.toString)
indexRef[] >= orig(indexRef[]) (elementwise)
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(indexRef[]) elements <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
padding one of { 2, 4 }
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= field
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < padding
org.apache.commons.lang3.time.FastDateFormat.FULL < field
org.apache.commons.lang3.time.FastDateFormat.FULL < padding
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != field
org.apache.commons.lang3.time.FastDateFormat.MEDIUM <= padding
org.apache.commons.lang3.time.FastDateFormat.SHORT != field
org.apache.commons.lang3.time.FastDateFormat.SHORT != padding
org.apache.commons.lang3.time.FormatCache.NONE < field
org.apache.commons.lang3.time.FormatCache.NONE < padding
field != padding
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT657
org.apache.commons.lang3.time.FastDateFormat.MEDIUM == orig(padding)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < orig(field)
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < orig(field)
org.apache.commons.lang3.time.FastDateFormat.SHORT < orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT659
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == orig(field)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.class
orig(padding) == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules == null
return != null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey:::OBJECT
this.keys != null
this.keys.getClass().getName() == java.lang.Object[].class
this.keys[] elements != null
this.keys[].getClass().getName() == [java.lang.String, sun.util.calendar.ZoneInfo, java.util.Locale]
size(this.keys[]) == 3
this.hashCode != size(this.keys[])
this.hashCode != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::ENTER
keys.getClass().getName() == java.lang.Object[].class
size(keys[]) == 3
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::EXIT
this.keys == orig(keys)
this.keys[] == keys[]
keys[] == orig(keys[])
this.hashCode == 0
this.keys.getClass().getName() == orig(keys.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.hashCode == return
this.keys.getClass().getName() == orig(this.keys.getClass().getName())
orig(this.hashCode) % return == 0
return != size(this.keys[])
return != size(this.keys[])-1
orig(this.hashCode) != size(this.keys[])
orig(this.hashCode) != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache:::CLASS
===========================================================================
org.apache.commons.lang3.time.FormatCache:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
this.cInstanceCache has only one value
this.cInstanceCache != null
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.cDateTimeInstanceCache != null
this.getClass().getName() != this.cInstanceCache.getClass().getName()
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FormatCache.FormatCache():::EXIT
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone == null
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.class
this.cInstanceCache.getClass().getName() != return.getClass().getName()
this.cInstanceCache.getClass().getName() != orig(this.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
pattern.toString == orig(pattern.toString)
return.getClass().getName() != orig(this.getClass().getName())
