===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected one of { 5, 6, 7 }
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == java.util.ArrayList.class
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected one of { 5, 6, 7 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
actual != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 8
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 8
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.exception.DefaultExceptionContextTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 8
this.fTests[].getClass().getName() == [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
size(this.fTests[]) == 8
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.exception.DefaultExceptionContextTest], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
names[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 1, 8 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT87
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 1, 8 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.exception.DefaultExceptionContextTest], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.exception.DefaultExceptionContextTest], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
return == false
size(this.fTests[]) one of { 1, 8 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 1, 8 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.exception.DefaultExceptionContextTest], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.exception.DefaultExceptionContextTest], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
return == false
size(this.fTests[]) one of { 1, 8 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 8 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 8
result.fStop == false
size(this.fTests[]) one of { 1, 8 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 8 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest, org.apache.commons.lang3.exception.DefaultExceptionContextTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 8 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 9 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 8 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 8
runTime == 867
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 8
return has only one value
return.toString == "0.867"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 8
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 867
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 8
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 8
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 8
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 8
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 8
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 8
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 8
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 8
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 8
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 8
runTime == 867
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 8
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 8 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 8
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 8
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 8
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 8
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 8
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(byte[]):::ENTER
objectData has only one value
objectData[] == [-84, -19, 0, 5, 115, 114, 0, 58, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 46, 68, 101, 102, 97, 117, 108, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 111, 110, 116, 101, 120, 116, 0, 0, 0, 0, 1, 50, -35, 114, 2, 0, 1, 76, 0, 13, 99, 111, 110, 116, 101, 120, 116, 86, 97, 108, 117, 101, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 5, 119, 4, 0, 0, 0, 5, 115, 114, 0, 44, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 116, 117, 112, 108, 101, 46, 73, 109, 109, 117, 116, 97, 98, 108, 101, 80, 97, 105, 114, 68, -61, 104, 122, 109, -22, -1, -47, 2, 0, 2, 76, 0, 4, 108, 101, 102, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 0, 5, 114, 105, 103, 104, 116, 113, 0, 126, 0, 6, 120, 114, 0, 35, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 116, 117, 112, 108, 101, 46, 80, 97, 105, 114, 68, -61, 104, 122, 109, -22, -1, -47, 2, 0, 0, 120, 112, 116, 0, 5, 116, 101, 115, 116, 49, 112, 115, 113, 0, 126, 0, 5, 116, 0, 5, 116, 101, 115, 116, 50, 116, 0, 10, 115, 111, 109, 101, 32, 118, 97, 108, 117, 101, 115, 113, 0, 126, 0, 5, 116, 0, 9, 116, 101, 115, 116, 32, 68, 97, 116, 101, 115, 114, 0, 14, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 68, 97, 116, 101, 104, 106, -127, 1, 75, 89, 116, 25, 3, 0, 0, 120, 112, 119, 8, 0, 0, 1, 93, -103, -14, -53, -105, 120, 115, 113, 0, 126, 0, 5, 116, 0, 8, 116, 101, 115, 116, 32, 78, 98, 114, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 5, 115, 113, 0, 126, 0, 5, 116, 0, 23, 116, 101, 115, 116, 32, 80, 111, 111, 114, 108, 121, 32, 119, 114, 105, 116, 116, 101, 110, 32, 111, 98, 106, 116, 0, 24, 115, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101, 32, 114, 101, 112, 108, 97, 99, 101, 109, 101, 110, 116, 120]
size(objectData[]) == 569
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(byte[]):::EXIT
objectData[] == orig(objectData[])
objectData[] == [-84, -19, 0, 5, 115, 114, 0, 58, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 46, 68, 101, 102, 97, 117, 108, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 111, 110, 116, 101, 120, 116, 0, 0, 0, 0, 1, 50, -35, 114, 2, 0, 1, 76, 0, 13, 99, 111, 110, 116, 101, 120, 116, 86, 97, 108, 117, 101, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 5, 119, 4, 0, 0, 0, 5, 115, 114, 0, 44, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 116, 117, 112, 108, 101, 46, 73, 109, 109, 117, 116, 97, 98, 108, 101, 80, 97, 105, 114, 68, -61, 104, 122, 109, -22, -1, -47, 2, 0, 2, 76, 0, 4, 108, 101, 102, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 0, 5, 114, 105, 103, 104, 116, 113, 0, 126, 0, 6, 120, 114, 0, 35, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 116, 117, 112, 108, 101, 46, 80, 97, 105, 114, 68, -61, 104, 122, 109, -22, -1, -47, 2, 0, 0, 120, 112, 116, 0, 5, 116, 101, 115, 116, 49, 112, 115, 113, 0, 126, 0, 5, 116, 0, 5, 116, 101, 115, 116, 50, 116, 0, 10, 115, 111, 109, 101, 32, 118, 97, 108, 117, 101, 115, 113, 0, 126, 0, 5, 116, 0, 9, 116, 101, 115, 116, 32, 68, 97, 116, 101, 115, 114, 0, 14, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 68, 97, 116, 101, 104, 106, -127, 1, 75, 89, 116, 25, 3, 0, 0, 120, 112, 119, 8, 0, 0, 1, 93, -103, -14, -53, -105, 120, 115, 113, 0, 126, 0, 5, 116, 0, 8, 116, 101, 115, 116, 32, 78, 98, 114, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 5, 115, 113, 0, 126, 0, 5, 116, 0, 23, 116, 101, 115, 116, 32, 80, 111, 111, 114, 108, 121, 32, 119, 114, 105, 116, 116, 101, 110, 32, 111, 98, 106, 116, 0, 24, 115, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101, 32, 114, 101, 112, 108, 97, 99, 101, 109, 101, 110, 116, 120]
return has only one value
return.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContext.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(java.io.InputStream):::ENTER
inputStream has only one value
inputStream.getClass().getName() == java.io.ByteArrayInputStream.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(java.io.InputStream):::EXIT
return has only one value
return.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContext.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::ENTER
obj has only one value
obj.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContext.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::EXIT
return has only one value
return[] == [-84, -19, 0, 5, 115, 114, 0, 58, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 101, 120, 99, 101, 112, 116, 105, 111, 110, 46, 68, 101, 102, 97, 117, 108, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 111, 110, 116, 101, 120, 116, 0, 0, 0, 0, 1, 50, -35, 114, 2, 0, 1, 76, 0, 13, 99, 111, 110, 116, 101, 120, 116, 86, 97, 108, 117, 101, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 114, 0, 19, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 65, 114, 114, 97, 121, 76, 105, 115, 116, 120, -127, -46, 29, -103, -57, 97, -99, 3, 0, 1, 73, 0, 4, 115, 105, 122, 101, 120, 112, 0, 0, 0, 5, 119, 4, 0, 0, 0, 5, 115, 114, 0, 44, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 116, 117, 112, 108, 101, 46, 73, 109, 109, 117, 116, 97, 98, 108, 101, 80, 97, 105, 114, 68, -61, 104, 122, 109, -22, -1, -47, 2, 0, 2, 76, 0, 4, 108, 101, 102, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 0, 5, 114, 105, 103, 104, 116, 113, 0, 126, 0, 6, 120, 114, 0, 35, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 116, 117, 112, 108, 101, 46, 80, 97, 105, 114, 68, -61, 104, 122, 109, -22, -1, -47, 2, 0, 0, 120, 112, 116, 0, 5, 116, 101, 115, 116, 49, 112, 115, 113, 0, 126, 0, 5, 116, 0, 5, 116, 101, 115, 116, 50, 116, 0, 10, 115, 111, 109, 101, 32, 118, 97, 108, 117, 101, 115, 113, 0, 126, 0, 5, 116, 0, 9, 116, 101, 115, 116, 32, 68, 97, 116, 101, 115, 114, 0, 14, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 68, 97, 116, 101, 104, 106, -127, 1, 75, 89, 116, 25, 3, 0, 0, 120, 112, 119, 8, 0, 0, 1, 93, -103, -14, -53, -105, 120, 115, 113, 0, 126, 0, 5, 116, 0, 8, 116, 101, 115, 116, 32, 78, 98, 114, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 5, 115, 113, 0, 126, 0, 5, 116, 0, 23, 116, 101, 115, 116, 32, 80, 111, 111, 114, 108, 121, 32, 119, 114, 105, 116, 116, 101, 110, 32, 111, 98, 106, 116, 0, 24, 115, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101, 32, 114, 101, 112, 108, 97, 99, 101, 109, 101, 110, 116, 120]
size(return[]) == 569
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::ENTER
obj has only one value
obj.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContext.class
outputStream has only one value
outputStream.getClass().getName() == java.io.ByteArrayOutputStream.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::EXIT
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::ENTER
cs1.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != cs1.getClass().getName()
cs1.getClass().getName() == cs2.getClass().getName()
===========================================================================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
(return == false)  ==>  (org.apache.commons.lang3.StringUtils.sunAvailable == return)
(return == true)  ==>  (org.apache.commons.lang3.StringUtils.java6Available == return)
(return == true)  ==>  (orig(cs1) == orig(cs2))
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != orig(cs1.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT;condition="return == true"
org.apache.commons.lang3.StringUtils.java6Available == return
orig(cs1) == orig(cs2)
===========================================================================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT;condition="not(return == true)"
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.daikon.DefaultExceptionContextTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.DefaultExceptionContextTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest$ObjectWithFaultyToString:::OBJECT
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest$ObjectWithFaultyToString.ObjectWithFaultyToString():::EXIT
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest:::CLASS
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 has only one value
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 != null
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == "This is monotonous"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE has only one value
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE != null
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == "Test Message"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString > org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContextTest.class
this.exceptionContext.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContext.class
this.getClass().getName() != this.exceptionContext.getClass().getName()
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString < this.fName.toString
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString < this.fName.toString
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.AbstractExceptionContextTest():::EXIT
this.exceptionContext == null
this.fName == null
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.setUp():::ENTER
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.setUp():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() != orig(this.getClass().getName())
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testAddContextValue():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testAddContextValue"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testAddContextValue():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testAddContextValue"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetContextEntries():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetContextEntries"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetContextEntries():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetContextEntries"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetContextLabels():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetContextLabels"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetContextLabels():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetContextLabels"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetContextValues():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetContextValues"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetContextValues():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetContextValues"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetFirstContextValue():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetFirstContextValue"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testGetFirstContextValue():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testGetFirstContextValue"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testJavaSerialization():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testJavaSerialization"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testJavaSerialization():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testJavaSerialization"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testSetContextValue():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testSetContextValue"
===========================================================================
org.apache.commons.lang3.exception.AbstractExceptionContextTest.testSetContextValue():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.exceptionContext == orig(this.exceptionContext)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testSetContextValue"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext:::CLASS
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext:::OBJECT
this.contextValues[] elements != null
this.contextValues[].getClass().getName() elements == org.apache.commons.lang3.tuple.ImmutablePair.class
this.contextValues.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.exception.DefaultExceptionContext.serialVersionUID > size(this.contextValues[])
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.DefaultExceptionContext():::EXIT
this.contextValues[] == []
this.contextValues[].getClass().getName() == []
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.addContextValue(java.lang.String, java.lang.Object):::ENTER
this.contextValues.getClass().getName() != value.getClass().getName()
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.addContextValue(java.lang.String, java.lang.Object):::EXIT
this.contextValues == return.contextValues
this.contextValues == orig(this.contextValues)
this.contextValues[] == return.contextValues[]
return == orig(this)
size(this.contextValues[])-1 == orig(size(this.contextValues[]))
size(this.contextValues[]) >= 1
this.contextValues.getClass().getName() == return.contextValues.getClass().getName()
this.contextValues.getClass().getName() == orig(this.contextValues.getClass().getName())
this.contextValues.getClass().getName() != orig(value.getClass().getName())
label.toString == orig(label.toString)
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getContextEntries():::ENTER
size(this.contextValues[]) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getContextEntries():::EXIT
this.contextValues == return
this.contextValues[] == return[]
return == orig(this.contextValues)
return[] == orig(this.contextValues[])
return[].getClass().getName() elements == org.apache.commons.lang3.tuple.ImmutablePair.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 5, 6, 7 }
org.apache.commons.lang3.exception.DefaultExceptionContext.serialVersionUID > size(return[])
this.contextValues.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.contextValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getContextLabels():::ENTER
size(this.contextValues[]) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getContextLabels():::EXIT
this.contextValues == orig(this.contextValues)
this.contextValues[] == orig(this.contextValues[])
return.getClass().getName() == java.util.HashSet.class
size(this.contextValues[]) one of { 5, 6, 7 }
this.contextValues.getClass().getName() != return.getClass().getName()
this.contextValues.getClass().getName() == orig(this.contextValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getContextValues(java.lang.String):::ENTER
this has only one value
this.contextValues has only one value
this.contextValues[] contains no nulls and has only one value, of length 6
this.contextValues[].getClass().getName() == [org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair]
label.toString one of { "test1", "test2" }
size(this.contextValues[]) == 6
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getContextValues(java.lang.String):::EXIT
this.contextValues == orig(this.contextValues)
this.contextValues[] == orig(this.contextValues[])
this.contextValues has only one value
this.contextValues[] contains no nulls and has only one value, of length 6
this.contextValues[].getClass().getName() == [org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair]
label.toString one of { "test1", "test2" }
return[].getClass().getName() one of { [null], [java.lang.String, java.lang.String] }
return.getClass().getName() == java.util.ArrayList.class
size(this.contextValues[]) == 6
size(return[]) one of { 1, 2 }
this.contextValues.getClass().getName() == return.getClass().getName()
label.toString == orig(label.toString)
return.getClass().getName() == orig(this.contextValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getFirstContextValue(java.lang.String):::ENTER
size(this.contextValues[]) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getFirstContextValue(java.lang.String):::EXIT90
label.toString one of { "test Poorly written obj", "test1", "test2" }
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getFirstContextValue(java.lang.String):::EXIT93
this.contextValues[].getClass().getName() one of { [org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair], [org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair] }
label.toString == "crap"
return == null
orig(label) has only one value
size(this.contextValues[]) one of { 6, 7 }
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getFirstContextValue(java.lang.String):::EXIT
this.contextValues == orig(this.contextValues)
this.contextValues[] == orig(this.contextValues[])
(label.toString == "crap")  ==>  (orig(label) has only one value)
(label.toString == "crap")  ==>  (return == null)
(label.toString == "crap")  ==>  (size(this.contextValues[]) one of { 6, 7 })
(label.toString == "crap")  ==>  (this.contextValues[].getClass().getName() one of { [org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair], [org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair, org.apache.commons.lang3.tuple.ImmutablePair] })
(label.toString one of { "test Poorly written obj", "test1", "test2" })  ==>  (size(this.contextValues[]) one of { 5, 6, 7 })
size(this.contextValues[]) one of { 5, 6, 7 }
this.contextValues.getClass().getName() == orig(this.contextValues.getClass().getName())
label.toString == orig(label.toString)
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getFormattedExceptionMessage(java.lang.String):::ENTER
baseMessage.toString == "Test Message"
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.getFormattedExceptionMessage(java.lang.String):::EXIT
this.contextValues == orig(this.contextValues)
this.contextValues[] == orig(this.contextValues[])
baseMessage.toString == "Test Message"
this.contextValues.getClass().getName() == orig(this.contextValues.getClass().getName())
baseMessage.toString == orig(baseMessage.toString)
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.setContextValue(java.lang.String, java.lang.Object):::ENTER
label.toString one of { "test Poorly written obj", "test2", "test3" }
value.getClass().getName() == java.lang.String.class
size(this.contextValues[]) one of { 5, 6, 7 }
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContext.setContextValue(java.lang.String, java.lang.Object):::EXIT
this.contextValues == return.contextValues
this.contextValues == orig(this.contextValues)
this.contextValues[] == return.contextValues[]
return == orig(this)
label.toString one of { "test Poorly written obj", "test2", "test3" }
size(this.contextValues[]) one of { 5, 6, 7 }
this.contextValues.getClass().getName() == return.contextValues.getClass().getName()
this.contextValues.getClass().getName() == orig(this.contextValues.getClass().getName())
label.toString == orig(label.toString)
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest:::CLASS
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 has only one value
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 != null
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == "This is monotonous"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE has only one value
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE != null
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == "Test Message"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString > org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest:::OBJECT
this.exceptionContext.getClass().getName() == org.apache.commons.lang3.exception.DefaultExceptionContext.class
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString < this.fName.toString
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString < this.fName.toString
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest.DefaultExceptionContextTest():::EXIT
this.exceptionContext == null
this.fName == null
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest.setUp():::ENTER
this.exceptionContext == null
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest.setUp():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.fName == orig(this.fName)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest.testFormattedExceptionMessageNull():::ENTER
this has only one value
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testFormattedExceptionMessageNull"
===========================================================================
org.apache.commons.lang3.exception.DefaultExceptionContextTest.testFormattedExceptionMessageNull():::EXIT
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2 == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE)
this.fName == orig(this.fName)
this.exceptionContext has only one value
this.fName has only one value
this.fName.toString == "testFormattedExceptionMessageNull"
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE_2.toString)
org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString == orig(org.apache.commons.lang3.exception.AbstractExceptionContextTest.TEST_MESSAGE.toString)
this.exceptionContext.getClass().getName() == orig(this.exceptionContext.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils:::CLASS
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER has only one value
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == " [wrapped] "
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES has only one value
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] contains no nulls and has only one value, of length 12
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].getClass().getName() elements == java.lang.String.class
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].toString == [getCause, getNextException, getTargetException, getException, getSourceException, getRootCause, getCausedByException, getNested, getLinkedException, getNestedException, getLinkedCause, getThrowable]
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) == 12
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
return.toString one of { "java.lang.RuntimeException: Crap\r\n\tat org.apache.commons.lang3.exception.AbstractExceptionContextTest$ObjectWithFaultyToString.toString(AbstractExceptionContextTest.java:44)\r\n\tat org.apache.commons.lang3.exception.DefaultExceptionContext.getFormattedExceptionMessage(DefaultExceptionContext.java:145)\r\n\tat org.apache.commons.lang3.exception.AbstractExceptionContextTest.testAddContextValue(AbstractExceptionContextTest.java:59)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:134)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:128)\r\n\tat junit.framework.TestResult.run(TestResult.java:113)\r\n\tat junit.framework.TestCase.run(TestCase.java:124)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:77)\r\n\tat org.apache.commons.lang3.daikon.DefaultExceptionContextTest.main(DefaultExceptionContextTest.java:7)\r\n", "java.lang.RuntimeException: Crap\r\n\tat org.apache.commons.lang3.exception.AbstractExceptionContextTest$ObjectWithFaultyToString.toString(AbstractExceptionContextTest.java:44)\r\n\tat org.apache.commons.lang3.exception.DefaultExceptionContext.getFormattedExceptionMessage(DefaultExceptionContext.java:145)\r\n\tat org.apache.commons.lang3.exception.AbstractExceptionContextTest.testAddContextValue(AbstractExceptionContextTest.java:81)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:134)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:128)\r\n\tat junit.framework.TestResult.run(TestResult.java:113)\r\n\tat junit.framework.TestCase.run(TestCase.java:124)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:77)\r\n\tat org.apache.commons.lang3.daikon.DefaultExceptionContextTest.main(DefaultExceptionContextTest.java:7)\r\n", "java.lang.RuntimeException: Crap\r\n\tat org.apache.commons.lang3.exception.AbstractExceptionContextTest$ObjectWithFaultyToString.toString(AbstractExceptionContextTest.java:44)\r\n\tat org.apache.commons.lang3.exception.DefaultExceptionContext.getFormattedExceptionMessage(DefaultExceptionContext.java:145)\r\n\tat org.apache.commons.lang3.exception.AbstractExceptionContextTest.testSetContextValue(AbstractExceptionContextTest.java:89)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat java.lang.reflect.Method.invoke(Unknown Source)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:134)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:128)\r\n\tat junit.framework.TestResult.run(TestResult.java:113)\r\n\tat junit.framework.TestCase.run(TestCase.java:124)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:116)\r\n\tat junit.textui.TestRunner.doRun(TestRunner.java:109)\r\n\tat junit.textui.TestRunner.run(TestRunner.java:77)\r\n\tat org.apache.commons.lang3.daikon.DefaultExceptionContextTest.main(DefaultExceptionContextTest.java:7)\r\n" }
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair:::CLASS
org.apache.commons.lang3.tuple.ImmutablePair.serialVersionUID == org.apache.commons.lang3.tuple.Pair.serialVersionUID
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair:::OBJECT
this.left.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.ImmutablePair(java.lang.Object, java.lang.Object):::ENTER
left.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.ImmutablePair(java.lang.Object, java.lang.Object):::EXIT
this.left == orig(left)
this.right == orig(right)
this.left.getClass().getName() == orig(left.getClass().getName())
this.right.getClass().getName() == orig(right.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getLeft():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getLeft():::EXIT
this.left == return
this.right == orig(this.right)
return == orig(this.left)
return.getClass().getName() == java.lang.String.class
this.left.getClass().getName() == return.getClass().getName()
this.right.getClass().getName() == orig(this.right.getClass().getName())
return.getClass().getName() == orig(this.left.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getRight():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getRight():::EXIT
this.left == orig(this.left)
this.right == return
return == orig(this.right)
this.left.getClass().getName() == orig(this.left.getClass().getName())
this.right.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.right.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.Pair:::CLASS
===========================================================================
org.apache.commons.lang3.tuple.Pair:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.tuple.ImmutablePair.class
===========================================================================
org.apache.commons.lang3.tuple.Pair.Pair():::EXIT
===========================================================================
org.apache.commons.lang3.tuple.Pair.getKey():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.Pair.getKey():::EXIT
return.getClass().getName() == java.lang.String.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.Pair.getValue():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.Pair.getValue():::EXIT
return.getClass().getName() != orig(this.getClass().getName())
