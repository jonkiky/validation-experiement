===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected == 1
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message.toString == "Arrays are unequal length. "
expected one of { 1, 7, 15 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
message.toString == "Arrays are unequal length. "
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message.toString == "Arrays are unequal length. "
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == "Arrays are unequal length. "
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected != null
actual != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
expected != null
actual != null
message.toString != expected.toString
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
message.toString != expected.toString
message.toString == orig(message.toString)
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message.toString one of { "Token equal to Token with different count. ", "Token equal to Token with wrong value class. ", "Token equal to non-Token class. " }
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString one of { "Token equal to Token with different count. ", "Token equal to Token with wrong value class. ", "Token equal to non-Token class. " }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 14
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 14
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.time.DurationFormatUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 14
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
size(this.fTests[]) == 14
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
size(this.fTests[]) one of { 9, 12, 14 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 9, 12, 14 })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 9, 12, 14 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 9, 12, 14 })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 9, 12, 14 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 14
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest, org.apache.commons.lang3.time.DurationFormatUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 14 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 15 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 14 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 14
runTime == 364467
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 14
return has only one value
return.toString == "364.467"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 364467
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 14
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 14
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 14
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 14
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 14
runTime == 364467
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 14
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 14 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 14
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 14
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 14
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 14
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 14
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != cs.getClass().getName()
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == return
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != orig(cs.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::ENTER
size >= 1
padChar == 48
org.apache.commons.lang3.StringUtils.EMPTY.toString < str.toString
org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND < size
org.apache.commons.lang3.StringUtils.PAD_LIMIT > size
size < padChar
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT4720
return == orig(str)
orig(size) one of { 1, 2, 3 }
str.toString == return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT4725
orig(size) one of { 2, 3, 4 }
str.toString != return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
org.apache.commons.lang3.StringUtils.EMPTY.toString < str.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < return.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(char, int):::ENTER
org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND < ch
org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND < repeat
org.apache.commons.lang3.StringUtils.PAD_LIMIT > ch
org.apache.commons.lang3.StringUtils.PAD_LIMIT > repeat
ch > repeat
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(char, int):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
org.apache.commons.lang3.StringUtils.EMPTY.toString < return.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::ENTER
org.apache.commons.lang3.StringUtils.EMPTY.toString < str.toString
org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND < repeat
org.apache.commons.lang3.StringUtils.PAD_LIMIT > repeat
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT4470
return == orig(str)
orig(repeat) == 1
str.toString == return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT4473
orig(repeat) one of { 2, 3, 4 }
str.toString < return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
org.apache.commons.lang3.StringUtils.EMPTY.toString < str.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < return.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
str.toString <= return.toString
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::ENTER
max == 1
org.apache.commons.lang3.StringUtils.EMPTY.toString < text.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < searchString.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString <= replacement.toString
text.toString != replacement.toString
searchString.toString > replacement.toString
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT3857
return == orig(text)
text.toString != searchString.toString
text.toString == return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT3873
text.toString != return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
org.apache.commons.lang3.StringUtils.EMPTY.toString < text.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < searchString.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString <= replacement.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < return.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
text.toString != replacement.toString
text.toString == orig(text.toString)
searchString.toString > replacement.toString
searchString.toString != return.toString
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
===========================================================================
org.apache.commons.lang3.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String):::ENTER
org.apache.commons.lang3.StringUtils.EMPTY.toString < text.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < searchString.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString <= replacement.toString
text.toString != replacement.toString
searchString.toString > replacement.toString
===========================================================================
org.apache.commons.lang3.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
org.apache.commons.lang3.StringUtils.EMPTY.toString < text.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < searchString.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString <= replacement.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < return.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
text.toString != replacement.toString
text.toString == orig(text.toString)
searchString.toString > replacement.toString
searchString.toString != return.toString
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
===========================================================================
org.apache.commons.lang3.Validate:::CLASS
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified exclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified inclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX has only one value
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == "The string %s does not match the pattern %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == "The validated object is null"
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == "The validated expression is false"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == "The validated array contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == "The validated collection contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == "The validated character sequence is blank"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == "The validated array is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == "The validated collection is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == "The validated map is empty"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == "The validated array index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == "The validated collection index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == "The validated state is false"
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == "The validated class can not be converted to the %s class"
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == "The validated object is not an instance of %s"
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::ENTER
expression == true
message has only one value
message.toString == "Negative values should not be possible"
value == 2002
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
message.toString == "Negative values should not be possible"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.daikon.DurationFormatUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.DurationFormatUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token:::OBJECT
this.value != null
this.count >= 1
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.Token(java.lang.Object):::ENTER
value != null
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.Token(java.lang.Object):::EXIT
this.value == orig(value)
this.count == 1
this.value.getClass().getName() == orig(value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.Token(java.lang.Object, int):::ENTER
value != null
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.Token(java.lang.Object, int):::EXIT
this.value == orig(value)
this.count == orig(count)
this.value.getClass().getName() == orig(value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::ENTER
tokens != null
tokens.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
tokens[] elements != null
tokens[].value elements != null
tokens[].count elements >= 1
value != null
value.getClass().getName() == java.lang.String.class
size(tokens[]) >= 1
tokens.getClass().getName() != value.getClass().getName()
value.getClass().getName() in tokens[].value.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT556
return == true
orig(value) in tokens[].value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT556;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT559
return == false
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT559;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT
tokens[] == orig(tokens[])
tokens[].value == orig(tokens[].value)
tokens[].count == orig(tokens[].count)
(return == true)  ==>  (orig(value) in tokens[].value)
tokens[] elements != null
tokens[].value elements != null
tokens[].count elements >= 1
orig(value.getClass().getName()) in tokens[].value.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT;condition="return == true"
return == true
orig(value) in tokens[].value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::ENTER
obj2 != null
this.value.getClass().getName() != obj2.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT623
this.value has only one value
this.value.getClass().getName() == java.lang.String.class
this.count == 4
return == false
orig(this) has only one value
orig(obj2) has only one value
orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT623;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT626
this.value has only one value
this.value.getClass().getName() == java.lang.String.class
this.count == 4
return == false
orig(this) has only one value
orig(obj2) has only one value
orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT626;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT629
this.value.getClass().getName() == java.lang.StringBuffer.class
this.count == 1
return == true
orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT629;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT631
orig(this) == orig(obj2)
this.value has only one value
this.value.getClass().getName() == java.lang.Integer.class
this.count == 4
return == true
orig(this) has only one value
orig(obj2) has only one value
orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT631;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT633
this.value.getClass().getName() == java.lang.String.class
return == true
orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT633;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT636
this.value has only one value
this.value.getClass().getName() == java.lang.String.class
this.count == 4
return == false
orig(this) has only one value
orig(obj2) has only one value
orig(obj2.getClass().getName()) == java.lang.Object.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT636;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT
this.value == orig(this.value)
this.count == orig(this.count)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (this.count == 4)
(return == false)  ==>  (this.value has only one value)
(return == false)  ==>  (this.value.getClass().getName() == java.lang.String.class)
(return == true)  ==>  (orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class)
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() != orig(obj2.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
orig(obj2.getClass().getName()) == org.apache.commons.lang3.time.DurationFormatUtils$Token.class
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.equals(java.lang.Object):::EXIT;condition="not(return == true)"
this.value has only one value
this.value.getClass().getName() == java.lang.String.class
this.count == 4
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getCount():::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getCount():::EXIT
this.value == orig(this.value)
this.count == return
return == orig(this.count)
return >= 1
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getValue():::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getValue():::EXIT
this.value == return
this.count == orig(this.count)
return == orig(this.value)
return != null
this.value.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.increment():::ENTER
this.value.getClass().getName() == java.lang.String.class
this.count one of { 1, 2, 3 }
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.increment():::EXIT
this.value == orig(this.value)
this.value.getClass().getName() == java.lang.String.class
this.count one of { 2, 3, 4 }
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.count > orig(this.count)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.toString():::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.toString():::EXIT
this.value == orig(this.value)
this.count == orig(this.count)
return != null
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils:::CLASS
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN has only one value
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'"
org.apache.commons.lang3.time.DurationFormatUtils.y has only one value
org.apache.commons.lang3.time.DurationFormatUtils.y != null
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.time.DurationFormatUtils.M has only one value
org.apache.commons.lang3.time.DurationFormatUtils.M != null
org.apache.commons.lang3.time.DurationFormatUtils.d has only one value
org.apache.commons.lang3.time.DurationFormatUtils.d != null
org.apache.commons.lang3.time.DurationFormatUtils.H has only one value
org.apache.commons.lang3.time.DurationFormatUtils.H != null
org.apache.commons.lang3.time.DurationFormatUtils.m has only one value
org.apache.commons.lang3.time.DurationFormatUtils.m != null
org.apache.commons.lang3.time.DurationFormatUtils.s has only one value
org.apache.commons.lang3.time.DurationFormatUtils.s != null
org.apache.commons.lang3.time.DurationFormatUtils.S has only one value
org.apache.commons.lang3.time.DurationFormatUtils.S != null
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.DurationFormatUtils():::EXIT
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.format(org.apache.commons.lang3.time.DurationFormatUtils$Token[], int, int, int, int, int, int, int, boolean):::ENTER
tokens != null
tokens.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
tokens[] elements != null
tokens[].value elements != null
tokens[].count elements >= 1
years >= 0
months >= 0
days >= 0
hours >= 0
minutes >= 0
seconds >= 0
size(tokens[]) >= 1
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() != tokens.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() in tokens[].value.getClass().getName()
milliseconds != size(tokens[])
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.format(org.apache.commons.lang3.time.DurationFormatUtils$Token[], int, int, int, int, int, int, int, boolean):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
tokens[] == orig(tokens[])
tokens[].value == orig(tokens[].value)
tokens[].count == orig(tokens[].count)
tokens[] elements != null
tokens[].value elements != null
tokens[].count elements >= 1
return != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() in tokens[].value.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() != orig(tokens.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String):::ENTER
durationMillis >= 0
format != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < format.toString
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < format.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
format.toString > return.toString
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean):::ENTER
durationMillis >= 0
format != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString <= format.toString
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString <= format.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
format.toString != return.toString
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationHMS(long):::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationHMS(long):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationISO(long):::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationISO(long):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(long, boolean, boolean):::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords(long, boolean, boolean):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String):::ENTER
startMillis != 0
endMillis != 0
format != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < format.toString
startMillis <= endMillis
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < format.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
format.toString > return.toString
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone):::ENTER
startMillis != 0
endMillis != 0
format != null
timezone != null
timezone.getClass().getName() == sun.util.calendar.ZoneInfo.class
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString <= format.toString
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() != timezone.getClass().getName()
startMillis <= endMillis
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString <= format.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString < return.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() != orig(timezone.getClass().getName())
format.toString != return.toString
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.lexx(java.lang.String):::ENTER
format != null
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString <= format.toString
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.lexx(java.lang.String):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return != null
return.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
return[] elements != null
return[].value elements != null
return[].count elements >= 1
size(return[]) >= 1
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString <= format.toString
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() in return[].value.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest:::CLASS
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.DurationFormatUtilsTest(java.lang.String):::ENTER
s != null
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.DurationFormatUtilsTest(java.lang.String):::EXIT
this.fName == orig(s)
this.fName.toString == s.toString
s.toString == orig(s.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.assertArrayEquals(org.apache.commons.lang3.time.DurationFormatUtils$Token[], org.apache.commons.lang3.time.DurationFormatUtils$Token[]):::ENTER
obj1[].count == obj2[].count
size(obj1[]) == size(obj2[])
this has only one value
this.fName has only one value
this.fName.toString == "testLexx"
obj1.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
obj1[].count one of { [1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 1, 2, 1, 3], [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
obj1[].count elements >= 1
size(obj1[]) one of { 7, 15 }
obj1.getClass().getName() == obj2.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.assertArrayEquals(org.apache.commons.lang3.time.DurationFormatUtils$Token[], org.apache.commons.lang3.time.DurationFormatUtils$Token[]):::EXIT
this.fName == orig(this.fName)
obj1[] == orig(obj1[])
obj1[].value == orig(obj1[].value)
obj1[].count == obj2[].count
obj1[].count == orig(obj1[].count)
obj1[].count == orig(obj2[].count)
obj2[] == orig(obj2[])
obj2[].value == orig(obj2[].value)
this.fName has only one value
this.fName.toString == "testLexx"
obj1[].count one of { [1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 1, 2, 1, 3], [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] }
obj1[].count elements >= 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, int[], int[], java.lang.String):::ENTER
expected != null
start != null
start[] elements >= 0
end != null
end[] elements >= 0
format != null
size(start[]) one of { 6, 7 }
size(end[]) == 6
org.apache.commons.lang3.time.DurationFormatUtilsTest.FOUR_YEARS > size(start[])
this.fName.toString > expected.toString
this.fName.toString != format.toString
expected.toString < format.toString
size(start[]) >= size(end[])
size(start[])-1 <= size(end[])
size(start[])-1 >= size(end[])-1
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, int[], int[], java.lang.String):::EXIT
this.fName == orig(this.fName)
start[] == orig(start[])
end[] == orig(end[])
start[] elements >= 0
end[] elements >= 0
this.fName.toString > expected.toString
this.fName.toString != format.toString
this.fName.toString == orig(this.fName.toString)
expected.toString < format.toString
expected.toString == orig(expected.toString)
format.toString == orig(format.toString)
size(start[])-1 >= size(end[])-1
size(start[])-1 <= orig(size(end[]))
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, java.lang.String, int[], int[], java.lang.String):::ENTER
expected != null
start != null
start[] elements >= 0
end != null
end[] elements >= 0
format != null
size(start[]) one of { 6, 7 }
size(end[]) == 6
org.apache.commons.lang3.time.DurationFormatUtilsTest.FOUR_YEARS > size(start[])
this.fName.toString > message.toString
this.fName.toString > expected.toString
this.fName.toString != format.toString
message.toString != expected.toString
message.toString < format.toString
expected.toString < format.toString
size(start[]) >= size(end[])
size(start[])-1 <= size(end[])
size(start[])-1 >= size(end[])-1
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.assertEqualDuration(java.lang.String, java.lang.String, int[], int[], java.lang.String):::EXIT
this.fName == orig(this.fName)
start[] == orig(start[])
end[] == orig(end[])
start[] elements >= 0
end[] elements >= 0
this.fName.toString > message.toString
this.fName.toString > expected.toString
this.fName.toString != format.toString
this.fName.toString == orig(this.fName.toString)
message.toString != expected.toString
message.toString < format.toString
message.toString == orig(message.toString)
expected.toString < format.toString
expected.toString == orig(expected.toString)
format.toString == orig(format.toString)
size(start[])-1 >= size(end[])-1
size(start[])-1 <= orig(size(end[]))
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.bruteForce(int, int, int, java.lang.String, int):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDurationsByBruteForce"
month one of { 0, 1 }
format.toString one of { "M", "d" }
calendarType one of { 2, 5 }
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.bruteForce(int, int, int, java.lang.String, int):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDurationsByBruteForce"
format.toString one of { "M", "d" }
this.fName.toString == orig(this.fName.toString)
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testBugzilla38401"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testBugzilla38401():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testBugzilla38401"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testConstructor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testConstructor():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testConstructor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testDurationsByBruteForce():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDurationsByBruteForce"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testDurationsByBruteForce():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDurationsByBruteForce"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testEdgeDurations"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testEdgeDurations():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEdgeDurations"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatDuration"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDuration():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatDuration"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatDurationHMS"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationHMS():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatDurationHMS"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatDurationISO"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationISO():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatDurationISO"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatDurationPluralWords"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationPluralWords():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatDurationPluralWords"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatDurationWords"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatDurationWords():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatDurationWords"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatPeriod"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriod():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatPeriod"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatPeriodISO"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testFormatPeriodISO():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatPeriodISO"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testJiraLang281"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testJiraLang281():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testJiraLang281"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLexx"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testLexx():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLexx"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testLowDurations():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLowDurations"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtilsTest.testLowDurations():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLowDurations"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::CLASS
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::OBJECT
this has only one value
this.cInstanceCache has only one value
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
this.cInstanceCache.getClass().getName() != timeZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
return.mPattern == orig(pattern)
return.mTimeZone == orig(timeZone)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
this.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
this.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::EXIT
this.mValue == orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this.mValue one of { 45, 58, 84 }
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mValue == orig(this.mValue)
this.mValue one of { 45, 58, 84 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 1
this.mValue > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:::OBJECT
this.mField == 1
this.mSize == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::ENTER
field == 1
size == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::EXIT
this.mField == orig(field)
this.mSize == orig(size)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
this has only one value
buffer has only one value
value == 2002
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this has only one value
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mSize == return
return == orig(this.mSize)
return == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral:::OBJECT
this has only one value
this.mValue has only one value
this.mValue.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::ENTER
value has only one value
value.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::EXIT
this.mValue == orig(value)
value.toString == ", "
this.mValue.toString == value.toString
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 2
this.mValue.toString == orig(this.mValue.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField:::OBJECT
this.mField one of { 2, 7 }
this.mValues.getClass().getName() == java.lang.String[].class
this.mValues[].getClass().getName() elements == java.lang.String.class
this.mValues[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.mValues[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(this.mValues[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::ENTER
field one of { 2, 7 }
values.getClass().getName() == java.lang.String[].class
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(values[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::EXIT
this.mField == orig(field)
this.mValues == orig(values)
this.mValues[] == values[]
values[] == orig(values[])
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
this.mValues.getClass().getName() == orig(values.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mValues == orig(this.mValues)
this.mValues[] == orig(this.mValues[])
return == 3
this.mValues.getClass().getName() == orig(this.mValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == true
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == false
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::EXIT
this.mColon == orig(colon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this == org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == this.mColon
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == this.mColon
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(this.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
this.mColon == orig(this.mColon)
return == 5
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::OBJECT
this == org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE
this has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.TwoDigitMonthField():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::ENTER
buffer has only one value
value == 2
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
return == 2
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::EXIT
this.mField == orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
buffer has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
return == 2
this.mField > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::CLASS
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::OBJECT
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.mLocale has only one value
this.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
this.mRules[] elements != null
this.mMaxLengthEstimate >= 0
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL <= this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mRules.getClass().getName()
org.apache.commons.lang3.time.FormatCache.NONE < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mRules.getClass().getName()
this.mTimeZone.getClass().getName() != this.mRules.getClass().getName()
this.mMaxLengthEstimate > size(this.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.mPattern == orig(pattern)
this.mTimeZone == orig(timeZone)
this.mLocale == orig(locale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
buf has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
return has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
return has only one value
return.toString == "2002-02-23T09:11:12-03:00"
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
buf has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
return has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::ENTER
pattern has only one value
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
return has only one value
return.mPattern has only one value
return.mTimeZone has only one value
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
return.mRules[] contains no nulls and has only one value, of length 15
return.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
return.mMaxLengthEstimate == 31
size(return.mRules[]) == 15
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return[org.apache.commons.lang3.time.FastDateFormat.FULL]
return[org.apache.commons.lang3.time.FastDateFormat.FULL] == return[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mRules == null
return.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == size(indexRef[])
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
this.mPattern == pattern
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef[] elements >= 0
size(indexRef[]) == 1
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mPattern.toString == pattern.toString
indexRef[] elements >= size(indexRef[])-1
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[]) != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[])-1 <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mPattern == orig(pattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.serialVersionUID
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
pattern.toString != return.toString
pattern.toString == orig(this.mPattern.toString)
pattern.toString == orig(pattern.toString)
indexRef[] >= orig(indexRef[]) (elementwise)
indexRef[] elements >= orig(size(indexRef[]))
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(indexRef[]) elements >= size(indexRef[])-1
orig(indexRef[]) elements <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[])-1 <= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(size(indexRef[])) <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
padding one of { 2, 4 }
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= field
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < padding
org.apache.commons.lang3.time.FastDateFormat.FULL % field == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < field
org.apache.commons.lang3.time.FastDateFormat.FULL < padding
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != field
org.apache.commons.lang3.time.FastDateFormat.MEDIUM <= padding
org.apache.commons.lang3.time.FastDateFormat.SHORT != field
org.apache.commons.lang3.time.FastDateFormat.SHORT != padding
org.apache.commons.lang3.time.FormatCache.NONE < field
org.apache.commons.lang3.time.FormatCache.NONE < padding
field != padding
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT657
org.apache.commons.lang3.time.FastDateFormat.MEDIUM == orig(padding)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < orig(field)
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < orig(field)
org.apache.commons.lang3.time.FastDateFormat.SHORT < orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT659
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == orig(field)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.class
orig(padding) == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules == null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey:::OBJECT
this.keys.getClass().getName() == java.lang.Object[].class
this.keys[] elements != null
this.keys[].getClass().getName() == [java.lang.String, sun.util.calendar.ZoneInfo, java.util.Locale]
size(this.keys[]) == 3
this.hashCode != size(this.keys[])
this.hashCode != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::ENTER
keys.getClass().getName() == java.lang.Object[].class
size(keys[]) == 3
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::EXIT
this.keys == orig(keys)
this.keys[] == keys[]
keys[] == orig(keys[])
this.hashCode == 0
this.keys.getClass().getName() == orig(keys.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.hashCode == return
this.keys.getClass().getName() == orig(this.keys.getClass().getName())
orig(this.hashCode) % return == 0
return != size(this.keys[])
return != size(this.keys[])-1
orig(this.hashCode) != size(this.keys[])
orig(this.hashCode) != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache:::CLASS
===========================================================================
org.apache.commons.lang3.time.FormatCache:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
this.cInstanceCache has only one value
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.getClass().getName() != this.cInstanceCache.getClass().getName()
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FormatCache.FormatCache():::EXIT
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone == null
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.class
this.cInstanceCache.getClass().getName() != return.getClass().getName()
this.cInstanceCache.getClass().getName() != orig(this.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
pattern.toString == orig(pattern.toString)
return.getClass().getName() != orig(this.getClass().getName())
