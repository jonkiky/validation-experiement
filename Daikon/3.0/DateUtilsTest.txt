===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected >= 0
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == java.util.Date.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected >= 0
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
message.toString == orig(message.toString)
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
message.toString one of { "Date not equal to itself ISO formatted and parsed", "Demonstrate Problem" }
expected one of { 1099209600000L, 1501526337996L }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, long, long):::EXIT
message.toString one of { "Date not equal to itself ISO formatted and parsed", "Demonstrate Problem" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message has only one value
message.toString == "LANG-677"
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == "LANG-677"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.time.DateUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotSame(java.lang.Object, java.lang.Object):::ENTER
expected != null
expected.getClass().getName() == java.util.Date.class
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertNotSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
expected.getClass().getName() == java.util.Date.class
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString one of { "LANG-677", "TestCase.fName cannot be null" }
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString one of { "LANG-677", "TestCase.fName cannot be null" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 33
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 33
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.time.DateUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 33
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
size(this.fTests[]) == 33
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 33 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 33
result.fStop == false
size(this.fTests[]) one of { 1, 33 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 33 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest, org.apache.commons.lang3.time.DateUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 33 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 34 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 33 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 33
runTime == 3189
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 33
return has only one value
return.toString == "3.189"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 33
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 3189
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 33
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 33
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 33
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 33
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 33
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 33
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 33
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 33
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 33
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 33
runTime == 3189
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 33
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.time.DateUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 33 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 33
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 33
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 33
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 33
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 33
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.JavaVersion:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements >= org.apache.commons.lang3.JavaVersion.JAVA_1_1.value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements <= org.apache.commons.lang3.JavaVersion.JAVA_1_8.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion:::OBJECT
this == org.apache.commons.lang3.JavaVersion.JAVA_1_8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == this.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == this.name
this in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
this.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
this.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
this.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value % this.value == 0
this.value % org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 0
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == this.name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::ENTER
$hidden$1.toString > name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
this.value == orig(value)
this.name == orig(name)
this.name.toString == name.toString
$hidden$1.toString > name.toString
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == requiredVersion
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == requiredVersion.name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT72
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT72;condition="return == true"
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(requiredVersion)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(this)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(requiredVersion.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(requiredVersion.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(this.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(this.name)
return == true
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == requiredVersion.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(requiredVersion.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(this.name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::ENTER
nom has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT116
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == return
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == return.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == return.name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
nom.toString == "1.8"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
nom.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
nom.toString == return.name.toString
nom.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
nom.toString == orig(nom.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils:::CLASS
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == org.apache.commons.lang3.SystemUtils.JAVA_COMPILER
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == org.apache.commons.lang3.JavaVersion.JAVA_1_8
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_AIX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_IRIX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_LINUX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_MAC
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_OS2
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_UNIX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX has only one value
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == "Windows"
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY has only one value
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString == "user.home"
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY has only one value
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString == "user.dir"
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY has only one value
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == "java.io.tmpdir"
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY has only one value
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString == "java.home"
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT has only one value
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString == "sun.awt.windows.WToolkit"
org.apache.commons.lang3.SystemUtils.FILE_ENCODING has only one value
org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString == "GBK"
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString == "\\"
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == null
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV has only one value
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == "sun.awt.Win32GraphicsEnvironment"
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB has only one value
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString == "sun.awt.windows.WPrinterJob"
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH has only one value
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString == "C:\\Users\\jonkiky\\.m2\\repository\\org\\easymock\\easymock\\2.5.2\\easymock-2.5.2.jar;C:\\Users\\jonkiky\\.m2\\repository\\junit\\junit\\4.7\\junit-4.7.jar;F:\\Regression2\\commons-lang3-3.0-src\\target\\classes;F:\\Regression2\\commons-lang3-3.0-src\\target\\test-classes;F:/experiment20170325Regression/commons-lang-2.1.a/lib/daikon.jar;;F:\\experiment20170325Regression\\commons-lang-2.1.a\\lib\\daikon.jar"
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString == "52.0"
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS has only one value
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString == "C:\\Program Files\\Java\\jre1.8.0_101\\lib\\endorsed"
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS has only one value
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString == "C:\\Program Files\\Java\\jre1.8.0_101\\lib\\ext;C:\\WINDOWS\\Sun\\Java\\lib\\ext"
org.apache.commons.lang3.SystemUtils.JAVA_HOME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString == "C:\\Program Files\\Java\\jre1.8.0_101"
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString == "C:\\Users\\jonkiky\\AppData\\Local\\Temp\\"
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH has only one value
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString == "C:\\ProgramData\\Oracle\\Java\\javapath;C:\\WINDOWS\\Sun\\Java\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Python27\\Lib\\site-packages\\PyQt4;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python27;C:\\Python27\\DLLs;C:\\Python27\\Scripts;C:\\Python27\\Lib\\site-packages\\vtk;C:\\Python27\\gnuplot\\binary;C:\\Python27\\Lib\\site-packages\\osgeo;C:\\Program Files (x86)\\pythonxy\\SciTE-3.5.1-4;C:\\Program Files (x86)\\pythonxy\\console;C:\\Program Files (x86)\\pythonxy\\swig;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Java\\jdk1.7.0_79\\bin;E:\\Software\\gradle-3.2.1-all\\gradle-3.2.1\\bin;C:\\Program Files (x86)\\PuTTY\\;E:\\Software\\apache-maven-3.3.9-bin\\apache-maven-3.3.9\\bin;E:\\Software\\geckodriver-v0.16.0-win64\\;C:\\program files (x86)\\skype\\Phone\\;C:\\Users\\jonkiky\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\jonkiky\\AppData\\Roaming\\npm;."
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString == "Java(TM) SE Runtime Environment"
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString == "1.8.0_101-b13"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString == "Java Platform API Specification"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value == 1.8
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString == "http://java.oracle.com/"
org.apache.commons.lang3.SystemUtils.JAVA_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString == "1.8.0_101"
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString == "mixed mode"
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString == "Java HotSpot(TM) 64-Bit Server VM"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == "Java Virtual Machine Specification"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString == "25.101-b13"
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString == "\r\n"
org.apache.commons.lang3.SystemUtils.OS_ARCH has only one value
org.apache.commons.lang3.SystemUtils.OS_ARCH.toString == "amd64"
org.apache.commons.lang3.SystemUtils.OS_NAME has only one value
org.apache.commons.lang3.SystemUtils.OS_NAME.toString == "Windows 10"
org.apache.commons.lang3.SystemUtils.OS_VERSION has only one value
org.apache.commons.lang3.SystemUtils.OS_VERSION.toString == "10.0"
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString == ";"
org.apache.commons.lang3.SystemUtils.USER_COUNTRY has only one value
org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString == "US"
org.apache.commons.lang3.SystemUtils.USER_DIR has only one value
org.apache.commons.lang3.SystemUtils.USER_DIR.toString == "F:\\Regression2\\Daikon\\Alg"
org.apache.commons.lang3.SystemUtils.USER_HOME has only one value
org.apache.commons.lang3.SystemUtils.USER_HOME.toString == "C:\\Users\\jonkiky"
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE has only one value
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString == "en"
org.apache.commons.lang3.SystemUtils.USER_NAME has only one value
org.apache.commons.lang3.SystemUtils.USER_NAME.toString == "jonkiky"
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE has only one value
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString == "America/New_York"
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == true
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements >= org.apache.commons.lang3.JavaVersion.JAVA_1_1.value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements <= org.apache.commons.lang3.JavaVersion.JAVA_1_8.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT1244
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
property.toString != return.toString
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == requiredVersion
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == requiredVersion.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::EXIT
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX == orig(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX)
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY == orig(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY)
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY == orig(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY)
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY)
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT == orig(org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT)
org.apache.commons.lang3.SystemUtils.FILE_ENCODING == orig(org.apache.commons.lang3.SystemUtils.FILE_ENCODING)
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_COMPILER)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS == orig(org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS)
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS == orig(org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS)
org.apache.commons.lang3.SystemUtils.JAVA_HOME == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR)
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH == orig(org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(requiredVersion)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(requiredVersion.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(requiredVersion.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL)
org.apache.commons.lang3.SystemUtils.JAVA_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO)
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION)
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR)
org.apache.commons.lang3.SystemUtils.OS_ARCH == orig(org.apache.commons.lang3.SystemUtils.OS_ARCH)
org.apache.commons.lang3.SystemUtils.OS_NAME == orig(org.apache.commons.lang3.SystemUtils.OS_NAME)
org.apache.commons.lang3.SystemUtils.OS_VERSION == orig(org.apache.commons.lang3.SystemUtils.OS_VERSION)
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR)
org.apache.commons.lang3.SystemUtils.USER_COUNTRY == orig(org.apache.commons.lang3.SystemUtils.USER_COUNTRY)
org.apache.commons.lang3.SystemUtils.USER_DIR == orig(org.apache.commons.lang3.SystemUtils.USER_DIR)
org.apache.commons.lang3.SystemUtils.USER_HOME == orig(org.apache.commons.lang3.SystemUtils.USER_HOME)
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE == orig(org.apache.commons.lang3.SystemUtils.USER_LANGUAGE)
org.apache.commons.lang3.SystemUtils.USER_NAME == orig(org.apache.commons.lang3.SystemUtils.USER_NAME)
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE == orig(org.apache.commons.lang3.SystemUtils.USER_TIMEZONE)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_AIX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_MAC)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_OS2)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_UNIX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == return
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS)
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == orig(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString)
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString)
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString)
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString)
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString == orig(org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString)
org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString == orig(org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString)
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString)
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString)
org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == requiredVersion.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(requiredVersion.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString)
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.OS_ARCH.toString == orig(org.apache.commons.lang3.SystemUtils.OS_ARCH.toString)
org.apache.commons.lang3.SystemUtils.OS_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.OS_NAME.toString)
org.apache.commons.lang3.SystemUtils.OS_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.OS_VERSION.toString)
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString)
org.apache.commons.lang3.SystemUtils.USER_DIR.toString == orig(org.apache.commons.lang3.SystemUtils.USER_DIR.toString)
org.apache.commons.lang3.SystemUtils.USER_HOME.toString == orig(org.apache.commons.lang3.SystemUtils.USER_HOME.toString)
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString == orig(org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString)
org.apache.commons.lang3.SystemUtils.USER_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.USER_NAME.toString)
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString == orig(org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::ENTER
version has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
version.toString == "1.8"
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
version.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
version.toString > versionPrefix.toString
version.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
version.toString == orig(version.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
osVersion has only one value
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osName.toString == "Windows 10"
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osName.toString == orig(osName.toString)
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osVersion.toString == orig(osVersion.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
osName.toString != osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString != osNamePrefix.toString
osName.toString == orig(osName.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.Validate:::CLASS
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified exclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified inclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX has only one value
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == "The string %s does not match the pattern %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == "The validated object is null"
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == "The validated expression is false"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == "The validated array contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == "The validated collection contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == "The validated character sequence is blank"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == "The validated array is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == "The validated collection is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == "The validated map is empty"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == "The validated array index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == "The validated collection index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == "The validated state is false"
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == "The validated class can not be converted to the %s class"
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == "The validated object is not an instance of %s"
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::ENTER
expression == true
message has only one value
message.toString == "Negative values should not be possible"
value == 2017
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
message.toString == "Negative values should not be possible"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.daikon.DateUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.DateUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator:::OBJECT
this.endFinal.getClass().getName() == java.util.GregorianCalendar.class
this.endFinal.getClass().getName() == this.spot.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.DateIterator(java.util.Calendar, java.util.Calendar):::ENTER
startFinal.getClass().getName() == java.util.GregorianCalendar.class
startFinal.getClass().getName() == endFinal.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.DateIterator(java.util.Calendar, java.util.Calendar):::EXIT
this.endFinal == orig(endFinal)
this.spot == orig(startFinal)
this.endFinal.getClass().getName() == orig(startFinal.getClass().getName())
this.endFinal.getClass().getName() == orig(endFinal.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.hasNext():::ENTER
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.hasNext():::EXIT
this.endFinal == orig(this.endFinal)
this.spot == orig(this.spot)
this.endFinal.getClass().getName() == orig(this.endFinal.getClass().getName())
this.endFinal.getClass().getName() == orig(this.spot.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.hasNext():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.hasNext():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.next():::ENTER
===========================================================================
org.apache.commons.lang3.time.DateUtils$DateIterator.next():::EXIT
this.endFinal == orig(this.endFinal)
this.spot == orig(this.spot)
return.getClass().getName() == java.util.GregorianCalendar.class
this.endFinal.getClass().getName() == return.getClass().getName()
this.spot.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.endFinal.getClass().getName())
return.getClass().getName() == orig(this.spot.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils:::CLASS
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY == org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY == org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY-1] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND-1]
org.apache.commons.lang3.time.DateUtils.fields has only one value
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == int[][].class
org.apache.commons.lang3.time.DateUtils.fields[] contains no nulls and has only one value, of length 8
org.apache.commons.lang3.time.DateUtils.fields[] elements != null
size(org.apache.commons.lang3.time.DateUtils.fields[]) == 8
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY] has only one value
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] has only one value
===========================================================================
org.apache.commons.lang3.time.DateUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.time.DateUtils.DateUtils():::EXIT
===========================================================================
org.apache.commons.lang3.time.DateUtils.add(java.util.Date, int, int):::ENTER
calendarField >= 1
amount one of { -1, 0, 1 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > amount
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > calendarField
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY >= amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE > amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER > amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY > amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY > amount
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % calendarField == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < calendarField
calendarField >= amount
calendarField != size(org.apache.commons.lang3.time.DateUtils.fields[])
calendarField != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
amount < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.add(java.util.Date, int, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(calendarField) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(calendarField) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
orig(amount) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.addDays(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addDays(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addHours(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addHours(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMilliseconds(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMilliseconds(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMinutes(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMinutes(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMonths(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addMonths(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addSeconds(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addSeconds(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addWeeks(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addWeeks(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.addYears(java.util.Date, int):::ENTER
date has only one value
amount one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.addYears(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.lang.Object, int):::ENTER
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.lang.Object, int):::EXIT885
orig(date.getClass().getName()) == java.util.Date.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.lang.Object, int):::EXIT887
orig(date.getClass().getName()) == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > orig(field)
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= orig(field)
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.lang.Object, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > orig(field))
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.util.Calendar, int):::ENTER
date.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.util.Calendar, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
return.getClass().getName() == orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.util.Date, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.ceiling(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::ENTER
cal1.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != cal1.getClass().getName()
cal1.getClass().getName() == cal2.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT181
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT181;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT182
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT182;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(cal1.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Date, java.util.Date):::ENTER
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Date, java.util.Date):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Date, java.util.Date):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameDay(java.util.Date, java.util.Date):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::ENTER
cal1 has only one value
cal1.getClass().getName() == java.util.GregorianCalendar.class
cal2 has only one value
cal1.getClass().getName() == cal2.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT220
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT220;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT221
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT221;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::ENTER
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT202
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT202;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT203
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT203;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameInstant(java.util.Date, java.util.Date):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::ENTER
cal1.getClass().getName() == java.util.GregorianCalendar.class
cal1.getClass().getName() == cal2.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT240
return == true
orig(cal1) has only one value
orig(cal2) has only one value
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT240;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT241
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT241;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
(return == true)  ==>  (orig(cal1) has only one value)
(return == true)  ==>  (orig(cal2) has only one value)
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT;condition="return == true"
return == true
orig(cal1) has only one value
orig(cal2) has only one value
===========================================================================
org.apache.commons.lang3.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.lang.Object, int):::ENTER
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER == rangeStyle
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == org.apache.commons.lang3.time.DateUtils.fields[rangeStyle-1]
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != focus.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.lang.Object, int):::EXIT1191
orig(focus.getClass().getName()) == java.util.Date.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.lang.Object, int):::EXIT1193
orig(focus) has only one value
orig(focus.getClass().getName()) == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.lang.Object, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == org.apache.commons.lang3.time.DateUtils.fields[orig(rangeStyle)-1]
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(rangeStyle)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[rangeStyle-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
(orig(focus.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (orig(focus) has only one value)
return.getClass().getName() == org.apache.commons.lang3.time.DateUtils$DateIterator.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(focus.getClass().getName())
return.getClass().getName() != orig(focus.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.util.Calendar, int):::ENTER
focus.getClass().getName() == java.util.GregorianCalendar.class
rangeStyle >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > rangeStyle
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE % rangeStyle == 0
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > rangeStyle
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR % rangeStyle == 0
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > rangeStyle
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY % rangeStyle == 0
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > rangeStyle
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > rangeStyle
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != focus.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= rangeStyle
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY >= rangeStyle
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % rangeStyle == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < rangeStyle
rangeStyle < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.util.Calendar, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == org.apache.commons.lang3.time.DateUtils$DateIterator.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(focus.getClass().getName())
return.getClass().getName() != orig(focus.getClass().getName())
orig(rangeStyle) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.util.Date, int):::ENTER
rangeStyle one of { 4, 5, 6 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > rangeStyle
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > rangeStyle
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > rangeStyle
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > rangeStyle
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > rangeStyle
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < rangeStyle
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < rangeStyle
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < rangeStyle
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER <= rangeStyle
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY >= rangeStyle
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < rangeStyle
rangeStyle < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.iterator(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == org.apache.commons.lang3.time.DateUtils$DateIterator.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(rangeStyle) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::ENTER
val.getClass().getName() == java.util.GregorianCalendar.class
field >= 1
modType one of { 0, 1, 2 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > modType
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > modType
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > modType
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > modType
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > modType
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != val.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY >= modType
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE > modType
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER > modType
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY > modType
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY > modType
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE <= modType
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
modType < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::EXIT908
orig(field) == 14
orig(modType) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::EXIT986
===========================================================================
org.apache.commons.lang3.time.DateUtils.modify(java.util.Calendar, int, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(val.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
orig(modType) < size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.parseDate(java.lang.String, java.lang.String[]):::ENTER
parsePatterns[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY-1] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND-1]
parsePatterns.getClass().getName() == java.lang.String[].class
size(parsePatterns[]) one of { 1, 3 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.parseDate(java.lang.String, java.lang.String[]):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
parsePatterns[] == orig(parsePatterns[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
parsePatterns[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY-1] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
orig(parsePatterns[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1]) == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND-1]
parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(parsePatterns[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(java.lang.String, java.lang.String[], boolean):::ENTER
parsePatterns[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY-1] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND-1]
parsePatterns.getClass().getName() == java.lang.String[].class
lenient == true
size(parsePatterns[]) one of { 1, 3 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.parseDateWithLeniency(java.lang.String, java.lang.String[], boolean):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
parsePatterns[] == orig(parsePatterns[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
parsePatterns[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY-1] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
orig(parsePatterns[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1]) == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE]
parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND-1]
parsePatterns[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(parsePatterns[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::ENTER
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::EXIT724
orig(date.getClass().getName()) == java.util.Date.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::EXIT726
orig(date.getClass().getName()) == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > orig(field)
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= orig(field)
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.lang.Object, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > orig(field))
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Calendar, int):::ENTER
date.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Calendar, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
return.getClass().getName() == orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Date, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.round(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.set(java.util.Date, int, int):::ENTER
amount >= 0
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > amount
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > calendarField
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > amount
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > calendarField
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH != amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY != amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != amount
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != amount
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != calendarField
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != amount
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % calendarField == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < calendarField
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE <= amount
calendarField != amount
calendarField != size(org.apache.commons.lang3.time.DateUtils.fields[])
calendarField != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
amount != size(org.apache.commons.lang3.time.DateUtils.fields[])
amount != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.set(java.util.Date, int, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(calendarField) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(calendarField) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
orig(amount) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(amount) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.setDays(java.util.Date, int):::ENTER
date has only one value
amount one of { 1, 29 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setDays(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.setHours(java.util.Date, int):::ENTER
date has only one value
amount one of { 0, 23 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setHours(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.setMilliseconds(java.util.Date, int):::ENTER
date has only one value
amount one of { 0, 999 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setMilliseconds(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.setMinutes(java.util.Date, int):::ENTER
date has only one value
amount one of { 0, 59 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setMinutes(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.setMonths(java.util.Date, int):::ENTER
date has only one value
amount one of { 1, 5 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setMonths(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.setSeconds(java.util.Date, int):::ENTER
date has only one value
amount one of { 0, 59 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setSeconds(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.setYears(java.util.Date, int):::ENTER
date has only one value
amount one of { 2000, 2005, 2008 }
===========================================================================
org.apache.commons.lang3.time.DateUtils.setYears(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.toCalendar(java.util.Date):::ENTER
date has only one value
===========================================================================
org.apache.commons.lang3.time.DateUtils.toCalendar(java.util.Date):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
return has only one value
return.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::ENTER
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::EXIT803
orig(date.getClass().getName()) == java.util.Date.class
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::EXIT805
orig(date.getClass().getName()) == java.util.GregorianCalendar.class
orig(field) one of { 5, 9, 13 }
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > orig(field)
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < orig(field)
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= orig(field)
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.lang.Object, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY <= orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > orig(field))
(orig(date.getClass().getName()) == java.util.GregorianCalendar.class)  ==>  (orig(field) one of { 5, 9, 13 })
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Calendar, int):::ENTER
date.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH > field
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != date.getClass().getName()
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY < field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Calendar, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
return.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
return.getClass().getName() == orig(date.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Date, int):::ENTER
field >= 1
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_SECOND != field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_MINUTE > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_HOUR > field
org.apache.commons.lang3.time.DateUtils.MILLIS_PER_DAY > field
org.apache.commons.lang3.time.DateUtils.SEMI_MONTH >= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY <= field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE != field
org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER != field
org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY != field
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE % field == 0
org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE < field
field != size(org.apache.commons.lang3.time.DateUtils.fields[])
field != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtils.truncate(java.util.Date, int):::EXIT
org.apache.commons.lang3.time.DateUtils.fields == orig(org.apache.commons.lang3.time.DateUtils.fields)
org.apache.commons.lang3.time.DateUtils.fields[] == orig(org.apache.commons.lang3.time.DateUtils.fields[])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_CEILING)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_MONDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_RELATIVE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_CENTER] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_SUNDAY] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_MONTH_MONDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.RANGE_WEEK_SUNDAY)-1])
org.apache.commons.lang3.time.DateUtils.fields[org.apache.commons.lang3.time.DateUtils.MODIFY_TRUNCATE] == orig(org.apache.commons.lang3.time.DateUtils.fields[post(org.apache.commons.lang3.time.DateUtils.MODIFY_ROUND)-1])
org.apache.commons.lang3.time.DateUtils.fields.getClass().getName() == orig(org.apache.commons.lang3.time.DateUtils.fields.getClass().getName())
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])
orig(field) != size(org.apache.commons.lang3.time.DateUtils.fields[])-1
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest:::CLASS
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == 962784182001L
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest:::OBJECT
this.dateParser.getClass().getName() == java.text.SimpleDateFormat.class
this.timeZoneDateParser == null
this.calAmPm1.getClass().getName() == java.util.GregorianCalendar.class
this.zone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.fName != null
this.dateParser.getClass().getName() == this.dateTimeParser.getClass().getName()
this.dateParser.getClass().getName() != this.calAmPm1.getClass().getName()
this.dateParser.getClass().getName() != this.zone.getClass().getName()
this.calAmPm1.getClass().getName() == this.calAmPm2.getClass().getName()
this.calAmPm1.getClass().getName() == this.calAmPm3.getClass().getName()
this.calAmPm1.getClass().getName() == this.calAmPm4.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal1.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal2.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal3.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal4.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal5.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal6.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal7.getClass().getName()
this.calAmPm1.getClass().getName() == this.cal8.getClass().getName()
this.calAmPm1.getClass().getName() != this.zone.getClass().getName()
this.zone.getClass().getName() == this.defaultZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.DateUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.DateUtilsTest(java.lang.String):::EXIT
this.dateParser == this.dateTimeParser
this.dateParser == this.timeZoneDateParser
this.dateAmPm1 == this.dateAmPm2
this.dateAmPm1 == this.dateAmPm3
this.dateAmPm1 == this.dateAmPm4
this.dateAmPm1 == this.date0
this.dateAmPm1 == this.date1
this.dateAmPm1 == this.date2
this.dateAmPm1 == this.date3
this.dateAmPm1 == this.date4
this.dateAmPm1 == this.date5
this.dateAmPm1 == this.date6
this.dateAmPm1 == this.date7
this.dateAmPm1 == this.date8
this.calAmPm1 == this.calAmPm2
this.calAmPm1 == this.calAmPm3
this.calAmPm1 == this.calAmPm4
this.calAmPm1 == this.cal1
this.calAmPm1 == this.cal2
this.calAmPm1 == this.cal3
this.calAmPm1 == this.cal4
this.calAmPm1 == this.cal5
this.calAmPm1 == this.cal6
this.calAmPm1 == this.cal7
this.calAmPm1 == this.cal8
this.zone == this.defaultZone
this.fName == orig(name)
this.dateParser == null
this.dateAmPm1 == null
this.calAmPm1 == null
this.zone == null
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertDate(java.util.Date, int, int, int, int, int, int, int):::ENTER
this.dateParser != null
this.dateTimeParser != null
this.dateAmPm1 != null
this.dateAmPm2 != null
this.dateAmPm3 != null
this.dateAmPm4 != null
this.date0 != null
this.date1 != null
this.date2 != null
this.date3 != null
this.date4 != null
this.date5 != null
this.date6 != null
this.date7 != null
this.date8 != null
this.calAmPm1 != null
this.calAmPm2 != null
this.calAmPm3 != null
this.calAmPm4 != null
this.cal1 != null
this.cal2 != null
this.cal3 != null
this.cal4 != null
this.cal5 != null
this.cal6 != null
this.cal7 != null
this.cal8 != null
this.zone != null
this.defaultZone != null
date != null
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > year
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > month
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > day
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > hour
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > min
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > sec
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > mil
year > month
year > day
year > hour
year > min
year > sec
year > mil
month != hour
month != min
month != sec
day != min
day != sec
hour != sec
hour != mil
min != mil
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertDate(java.util.Date, int, int, int, int, int, int, int):::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser != null
this.dateTimeParser != null
this.dateAmPm1 != null
this.dateAmPm2 != null
this.dateAmPm3 != null
this.dateAmPm4 != null
this.date0 != null
this.date1 != null
this.date2 != null
this.date3 != null
this.date4 != null
this.date5 != null
this.date6 != null
this.date7 != null
this.date8 != null
this.calAmPm1 != null
this.calAmPm2 != null
this.calAmPm3 != null
this.calAmPm4 != null
this.cal1 != null
this.cal2 != null
this.cal3 != null
this.cal4 != null
this.cal5 != null
this.cal6 != null
this.cal7 != null
this.cal8 != null
this.zone != null
this.defaultZone != null
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(year)
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(month)
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(day)
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(hour)
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(min)
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(sec)
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST > orig(mil)
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertEquals(java.lang.String, java.util.Calendar, java.util.Calendar, long):::ENTER
message has only one value
message != null
message.toString == ""
cal1 != null
cal1.getClass().getName() == java.util.GregorianCalendar.class
cal2 != null
delta == 0
cal1.getClass().getName() == cal2.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertEquals(java.lang.String, java.util.Calendar, java.util.Calendar, long):::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
message.toString == ""
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Calendar):::ENTER
it != null
it.getClass().getName() == org.apache.commons.lang3.time.DateUtils$DateIterator.class
start != null
start.getClass().getName() == java.util.GregorianCalendar.class
it.getClass().getName() != start.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Calendar, java.util.Calendar):::ENTER
it != null
it.getClass().getName() == org.apache.commons.lang3.time.DateUtils$DateIterator.class
start != null
start.getClass().getName() == java.util.GregorianCalendar.class
end != null
it.getClass().getName() != start.getClass().getName()
start.getClass().getName() == end.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Calendar, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Date, java.util.Date):::ENTER
it.getClass().getName() == org.apache.commons.lang3.time.DateUtils$DateIterator.class
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.assertWeekIterator(java.util.Iterator, java.util.Date, java.util.Date):::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.setUp():::ENTER
this.dateParser == this.dateTimeParser
this.dateParser == this.timeZoneDateParser
this.dateAmPm1 == this.dateAmPm2
this.dateAmPm1 == this.dateAmPm3
this.dateAmPm1 == this.dateAmPm4
this.dateAmPm1 == this.date0
this.dateAmPm1 == this.date1
this.dateAmPm1 == this.date2
this.dateAmPm1 == this.date3
this.dateAmPm1 == this.date4
this.dateAmPm1 == this.date5
this.dateAmPm1 == this.date6
this.dateAmPm1 == this.date7
this.dateAmPm1 == this.date8
this.calAmPm1 == this.calAmPm2
this.calAmPm1 == this.calAmPm3
this.calAmPm1 == this.calAmPm4
this.calAmPm1 == this.cal1
this.calAmPm1 == this.cal2
this.calAmPm1 == this.cal3
this.calAmPm1 == this.cal4
this.calAmPm1 == this.cal5
this.calAmPm1 == this.cal6
this.calAmPm1 == this.cal7
this.calAmPm1 == this.cal8
this.zone == this.defaultZone
this.dateParser == null
this.dateAmPm1 == null
this.calAmPm1 == null
this.zone == null
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.setUp():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.timeZoneDateParser == orig(this.dateParser)
this.timeZoneDateParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.fName == orig(this.fName)
this.dateParser != null
this.dateTimeParser != null
this.dateAmPm1 != null
this.dateAmPm2 != null
this.dateAmPm3 != null
this.dateAmPm4 != null
this.date0 != null
this.date1 != null
this.date2 != null
this.date3 != null
this.date4 != null
this.date5 != null
this.date6 != null
this.date7 != null
this.date8 != null
this.calAmPm1 != null
this.calAmPm2 != null
this.calAmPm3 != null
this.calAmPm4 != null
this.cal1 != null
this.cal2 != null
this.cal3 != null
this.cal4 != null
this.cal5 != null
this.cal6 != null
this.cal7 != null
this.cal8 != null
this.zone != null
this.defaultZone != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddDays():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddDays"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddDays():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddDays"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddHours():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddHours"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddHours():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddHours"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddMilliseconds"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddMilliseconds():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddMilliseconds"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddMinutes():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddMinutes"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddMinutes():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddMinutes"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddMonths():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddMonths"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddMonths():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddMonths"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddSeconds"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddSeconds():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddSeconds"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddWeeks"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddWeeks():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddWeeks"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddYears():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddYears"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testAddYears():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testAddYears"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testCeil():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testCeil"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testCeil():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testCeil"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testConstructor():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testConstructor():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Cal():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameDay_Cal"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Cal():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameDay_Cal"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Date():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameDay_Date"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameDay_Date():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameDay_Date"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Cal():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameInstant_Cal"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Cal():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameInstant_Cal"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Date():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameInstant_Date"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameInstant_Date():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameInstant_Date"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameLocalTime_Cal"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIsSameLocalTime_Cal():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIsSameLocalTime_Cal"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIteratorEx"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testIteratorEx():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testIteratorEx"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testLang530():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testLang530"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testLang530():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testLang530"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testMonthIterator"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testMonthIterator():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testMonthIterator"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testParseDate():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testParseDate"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testParseDate():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testParseDate"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testParseDateWithLeniency():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testParseDateWithLeniency"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testParseDateWithLeniency():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testParseDateWithLeniency"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testRound():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testRound"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testRound():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testRound"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testRoundLang346"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testRoundLang346():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testRoundLang346"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetDays():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetDays"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetDays():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetDays"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetHours():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetHours"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetHours():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetHours"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetMilliseconds():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetMilliseconds"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetMilliseconds():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetMilliseconds"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetMinutes"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetMinutes():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetMinutes"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetMonths():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetMonths"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetMonths():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetMonths"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetSeconds"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetSeconds():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetSeconds"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetYears():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetYears"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testSetYears():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testSetYears"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testToCalendar():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testToCalendar"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testToCalendar():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testToCalendar"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testTruncate():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testTruncate"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testTruncate():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testTruncate"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testTruncateLang59"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59():::EXIT1173
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testTruncateLang59():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testTruncateLang59"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator():::ENTER
this has only one value
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testWeekIterator"
===========================================================================
org.apache.commons.lang3.time.DateUtilsTest.testWeekIterator():::EXIT
org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST == orig(org.apache.commons.lang3.time.DateUtilsTest.MILLIS_TEST)
this.dateParser == orig(this.dateParser)
this.dateTimeParser == orig(this.dateTimeParser)
this.timeZoneDateParser == orig(this.timeZoneDateParser)
this.dateAmPm1 == orig(this.dateAmPm1)
this.dateAmPm2 == orig(this.dateAmPm2)
this.dateAmPm3 == orig(this.dateAmPm3)
this.dateAmPm4 == orig(this.dateAmPm4)
this.date0 == orig(this.date0)
this.date1 == orig(this.date1)
this.date2 == orig(this.date2)
this.date3 == orig(this.date3)
this.date4 == orig(this.date4)
this.date5 == orig(this.date5)
this.date6 == orig(this.date6)
this.date7 == orig(this.date7)
this.date8 == orig(this.date8)
this.calAmPm1 == orig(this.calAmPm1)
this.calAmPm2 == orig(this.calAmPm2)
this.calAmPm3 == orig(this.calAmPm3)
this.calAmPm4 == orig(this.calAmPm4)
this.cal1 == orig(this.cal1)
this.cal2 == orig(this.cal2)
this.cal3 == orig(this.cal3)
this.cal4 == orig(this.cal4)
this.cal5 == orig(this.cal5)
this.cal6 == orig(this.cal6)
this.cal7 == orig(this.cal7)
this.cal8 == orig(this.cal8)
this.zone == orig(this.zone)
this.defaultZone == orig(this.defaultZone)
this.fName == orig(this.fName)
this.dateParser has only one value
this.dateTimeParser has only one value
this.dateAmPm1 has only one value
this.dateAmPm2 has only one value
this.dateAmPm3 has only one value
this.dateAmPm4 has only one value
this.date0 has only one value
this.date1 has only one value
this.date2 has only one value
this.date3 has only one value
this.date4 has only one value
this.date5 has only one value
this.date6 has only one value
this.date7 has only one value
this.date8 has only one value
this.calAmPm1 has only one value
this.calAmPm2 has only one value
this.calAmPm3 has only one value
this.calAmPm4 has only one value
this.cal1 has only one value
this.cal2 has only one value
this.cal3 has only one value
this.cal4 has only one value
this.cal5 has only one value
this.cal6 has only one value
this.cal7 has only one value
this.cal8 has only one value
this.zone has only one value
this.defaultZone has only one value
this.fName has only one value
this.fName.toString == "testWeekIterator"
this.dateParser.getClass().getName() == orig(this.dateParser.getClass().getName())
this.dateParser.getClass().getName() == orig(this.dateTimeParser.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.calAmPm4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal1.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal2.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal3.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal4.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal5.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal6.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal7.getClass().getName())
this.calAmPm1.getClass().getName() == orig(this.cal8.getClass().getName())
this.zone.getClass().getName() == orig(this.zone.getClass().getName())
this.zone.getClass().getName() == orig(this.defaultZone.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::CLASS
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::OBJECT
this has only one value
this.cInstanceCache has only one value
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
this.cInstanceCache.getClass().getName() != timeZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
return.mPattern == orig(pattern)
return.mTimeZone == orig(timeZone)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
this.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
this.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::EXIT
this.mValue == orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this.mValue one of { 45, 58, 84 }
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mValue == orig(this.mValue)
this.mValue one of { 45, 58, 84 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 1
this.mValue > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:::OBJECT
this.mField == 1
this.mSize == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::ENTER
field == 1
size == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::EXIT
this.mField == orig(field)
this.mSize == orig(size)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
this has only one value
buffer has only one value
value == 2017
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this has only one value
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mSize == return
return == orig(this.mSize)
return == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral:::OBJECT
this has only one value
this.mValue has only one value
this.mValue.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::ENTER
value has only one value
value.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::EXIT
this.mValue == orig(value)
value.toString == ", "
this.mValue.toString == value.toString
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 2
this.mValue.toString == orig(this.mValue.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField:::OBJECT
this.mField one of { 2, 7 }
this.mValues.getClass().getName() == java.lang.String[].class
this.mValues[].getClass().getName() elements == java.lang.String.class
this.mValues[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.mValues[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(this.mValues[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::ENTER
field one of { 2, 7 }
values.getClass().getName() == java.lang.String[].class
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(values[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::EXIT
this.mField == orig(field)
this.mValues == orig(values)
this.mValues[] == values[]
values[] == orig(values[])
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
this.mValues.getClass().getName() == orig(values.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mValues == orig(this.mValues)
this.mValues[] == orig(this.mValues[])
return == 3
this.mValues.getClass().getName() == orig(this.mValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == true
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == false
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::EXIT
this.mColon == orig(colon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
this == org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == this.mColon
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == this.mColon
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(this.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
this.mColon == orig(this.mColon)
return == 5
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::OBJECT
this == org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE
this has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.TwoDigitMonthField():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::ENTER
buffer has only one value
value == 7
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
return == 2
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::EXIT
this.mField == orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
buffer has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
buffer has only one value
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
return == 2
this.mField > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::CLASS
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::OBJECT
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.mLocale has only one value
this.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
this.mRules[] elements != null
this.mMaxLengthEstimate >= 0
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL <= this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mRules.getClass().getName()
org.apache.commons.lang3.time.FormatCache.NONE < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mRules.getClass().getName()
this.mTimeZone.getClass().getName() != this.mRules.getClass().getName()
this.mMaxLengthEstimate > size(this.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.mPattern == orig(pattern)
this.mTimeZone == orig(timeZone)
this.mLocale == orig(locale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
buf has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
return has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date):::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
date has only one value
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
return has only one value
return.toString == "2017-07-31T14:38:57-04:00"
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::ENTER
pattern has only one value
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
return has only one value
return.mPattern has only one value
return.mTimeZone has only one value
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
return.mRules[] contains no nulls and has only one value, of length 15
return.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
return.mMaxLengthEstimate == 31
size(return.mRules[]) == 15
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getPattern():::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getPattern():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == return
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(this.mPattern)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 12
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 24
return has only one value
return.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
size(this.mRules[]) == 12
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == return.toString
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
return.toString == orig(this.mPattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return[org.apache.commons.lang3.time.FastDateFormat.FULL]
return[org.apache.commons.lang3.time.FastDateFormat.FULL] == return[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mRules == null
return.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == size(indexRef[])
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
this.mPattern == pattern
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef[] elements >= 0
size(indexRef[]) == 1
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mPattern.toString == pattern.toString
indexRef[] elements >= size(indexRef[])-1
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[]) != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[])-1 <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mPattern == orig(pattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.serialVersionUID
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
pattern.toString != return.toString
pattern.toString == orig(this.mPattern.toString)
pattern.toString == orig(pattern.toString)
indexRef[] >= orig(indexRef[]) (elementwise)
indexRef[] elements >= orig(size(indexRef[]))
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(indexRef[]) elements >= size(indexRef[])-1
orig(indexRef[]) elements <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[])-1 <= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(size(indexRef[])) <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
padding one of { 2, 4 }
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= field
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < padding
org.apache.commons.lang3.time.FastDateFormat.FULL % field == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < field
org.apache.commons.lang3.time.FastDateFormat.FULL < padding
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != field
org.apache.commons.lang3.time.FastDateFormat.MEDIUM <= padding
org.apache.commons.lang3.time.FastDateFormat.SHORT != field
org.apache.commons.lang3.time.FastDateFormat.SHORT != padding
org.apache.commons.lang3.time.FormatCache.NONE < field
org.apache.commons.lang3.time.FormatCache.NONE < padding
field != padding
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT657
org.apache.commons.lang3.time.FastDateFormat.MEDIUM == orig(padding)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < orig(field)
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < orig(field)
org.apache.commons.lang3.time.FastDateFormat.SHORT < orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT659
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == orig(field)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.class
orig(padding) == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules == null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey:::OBJECT
this.keys.getClass().getName() == java.lang.Object[].class
this.keys[] elements != null
this.keys[].getClass().getName() == [java.lang.String, sun.util.calendar.ZoneInfo, java.util.Locale]
size(this.keys[]) == 3
this.hashCode != size(this.keys[])
this.hashCode != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::ENTER
keys.getClass().getName() == java.lang.Object[].class
size(keys[]) == 3
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::EXIT
this.keys == orig(keys)
this.keys[] == keys[]
keys[] == orig(keys[])
this.hashCode == 0
this.keys.getClass().getName() == orig(keys.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.hashCode == return
this.keys.getClass().getName() == orig(this.keys.getClass().getName())
orig(this.hashCode) % return == 0
return != size(this.keys[])
return != size(this.keys[])-1
orig(this.hashCode) != size(this.keys[])
orig(this.hashCode) != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache:::CLASS
===========================================================================
org.apache.commons.lang3.time.FormatCache:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
this.cInstanceCache has only one value
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.getClass().getName() != this.cInstanceCache.getClass().getName()
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FormatCache.FormatCache():::EXIT
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone == null
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.class
this.cInstanceCache.getClass().getName() != return.getClass().getName()
this.cInstanceCache.getClass().getName() != orig(this.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
pattern.toString == orig(pattern.toString)
return.getClass().getName() != orig(this.getClass().getName())
