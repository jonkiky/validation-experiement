===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message has only one value
message.toString == "Formatted split string not the correct length"
expected == 11
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
message.toString == "Formatted split string not the correct length"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message.toString == "Formatted split string not the correct length"
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == "Formatted split string not the correct length"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected has only one value
expected.toString == "0:00:00.000"
actual has only one value
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == "0:00:00.000"
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected has only one value
expected.toString == "0:00:00.000"
actual has only one value
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString == "0:00:00.000"
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
message == null
expected one of { 0, 556 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, long, long):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(long, long):::ENTER
expected == actual
expected one of { 0, 556 }
===========================================================================
junit.framework.Assert.assertEquals(long, long):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 7
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 7
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.time.StopWatchTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 7
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
size(this.fTests[]) == 7
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 7
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest]
names[] contains no nulls and has only one value, of length 7
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 7
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 7)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 7)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 7
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest]
return == false
size(this.fTests[]) == 7
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 7)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 7)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.StopWatchTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 7
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest]
return == false
size(this.fTests[]) == 7
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 7 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 7
result.fStop == false
size(this.fTests[]) one of { 1, 7 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 7 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest, org.apache.commons.lang3.time.StopWatchTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 7 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 8 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 7 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 7
runTime == 6000
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 7
return has only one value
return.toString == "6"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 7
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 6000
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 7
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 7
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 7
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 7
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 7
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 7
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 7
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 7
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 7
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 7
runTime == 6000
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 7
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.time.StopWatchTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 7 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 7
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 7
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 7
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 7
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 7
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::ENTER
str.toString one of { "0", "1000", "1554" }
size one of { 1, 2, 3 }
padChar == 48
org.apache.commons.lang3.StringUtils.EMPTY.toString < str.toString
org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND < size
org.apache.commons.lang3.StringUtils.PAD_LIMIT > size
size < padChar
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT4720
return == orig(str)
orig(size) one of { 1, 3 }
str.toString == return.toString
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT4725
str.toString == "0"
return.toString == "00"
orig(size) == 2
===========================================================================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
str.toString one of { "0", "1000", "1554" }
org.apache.commons.lang3.StringUtils.EMPTY.toString < str.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < return.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
str.toString <= return.toString
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(char, int):::ENTER
ch == 48
repeat == 1
===========================================================================
org.apache.commons.lang3.StringUtils.repeat(char, int):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
return.toString == "0"
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
===========================================================================
org.apache.commons.lang3.daikon.StopWatchTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.StopWatchTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token:::OBJECT
this.count one of { 1, 2, 3 }
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.Token(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.Token(java.lang.Object):::EXIT
this.value == orig(value)
this.count == 1
this.value.getClass().getName() == orig(value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::ENTER
tokens.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
tokens[].value.getClass().getName() == [java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String]
tokens[].count == [1, 1, 2, 1, 2, 1, 3]
tokens[].count elements one of { 1, 2, 3 }
value.getClass().getName() == java.lang.String.class
size(tokens[]) == 7
tokens.getClass().getName() != value.getClass().getName()
value.getClass().getName() in tokens[].value.getClass().getName()
tokens[].count elements < size(tokens[])-1
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT556
return == true
orig(value) in tokens[].value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT556;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT559
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT559;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT
tokens[] == orig(tokens[])
tokens[].value == orig(tokens[].value)
tokens[].count == orig(tokens[].count)
(return == false)  ==>  (orig(value) has only one value)
(return == true)  ==>  (orig(value) in tokens[].value)
tokens[].value.getClass().getName() == [java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String]
tokens[].count == [1, 1, 2, 1, 2, 1, 3]
tokens[].count elements one of { 1, 2, 3 }
orig(value.getClass().getName()) in tokens[].value.getClass().getName()
tokens[].count elements < size(tokens[])-1
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT;condition="return == true"
return == true
orig(value) in tokens[].value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.containsTokenWithValue(org.apache.commons.lang3.time.DurationFormatUtils$Token[], java.lang.Object):::EXIT;condition="not(return == true)"
return == false
orig(value) has only one value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getCount():::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getCount():::EXIT
this.value == orig(this.value)
this.count == return
return == orig(this.count)
return one of { 1, 2, 3 }
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getValue():::ENTER
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.getValue():::EXIT
this.value == return
this.count == orig(this.count)
return == orig(this.value)
this.value.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.increment():::ENTER
this.value.getClass().getName() == java.lang.String.class
this.count one of { 1, 2 }
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils$Token.increment():::EXIT
this.value == orig(this.value)
this.value.getClass().getName() == java.lang.String.class
this.count one of { 2, 3 }
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.count > orig(this.count)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils:::CLASS
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN has only one value
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == "'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'"
org.apache.commons.lang3.time.DurationFormatUtils.y has only one value
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.time.DurationFormatUtils.M has only one value
org.apache.commons.lang3.time.DurationFormatUtils.d has only one value
org.apache.commons.lang3.time.DurationFormatUtils.H has only one value
org.apache.commons.lang3.time.DurationFormatUtils.m has only one value
org.apache.commons.lang3.time.DurationFormatUtils.s has only one value
org.apache.commons.lang3.time.DurationFormatUtils.S has only one value
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.format(org.apache.commons.lang3.time.DurationFormatUtils$Token[], int, int, int, int, int, int, int, boolean):::ENTER
org.apache.commons.lang3.time.DurationFormatUtils.H == tokens[years].value
years == months
years == days
years == hours
years == minutes
years == seconds
tokens.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
tokens[].value.getClass().getName() == [java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String]
tokens[].count == [1, 1, 2, 1, 2, 1, 3]
tokens[].count elements one of { 1, 2, 3 }
years == 0
milliseconds one of { 0, 554 }
padWithZeros == true
size(tokens[]) == 7
tokens[years].value has only one value
tokens[years].count == 1
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() in tokens[].value.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.H in tokens[].value
org.apache.commons.lang3.time.DurationFormatUtils.m in tokens[].value
org.apache.commons.lang3.time.DurationFormatUtils.s in tokens[].value
org.apache.commons.lang3.time.DurationFormatUtils.S in tokens[].value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.format(org.apache.commons.lang3.time.DurationFormatUtils$Token[], int, int, int, int, int, int, int, boolean):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.H == tokens[orig(years)].value
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
tokens[] == orig(tokens[])
tokens[].value == orig(tokens[].value)
tokens[].count == orig(tokens[].count)
tokens[].value.getClass().getName() == [java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String]
tokens[].count == [1, 1, 2, 1, 2, 1, 3]
tokens[].count elements one of { 1, 2, 3 }
return.toString one of { "0:00:00.000", "0:00:00.554" }
tokens[orig(years)].value has only one value
tokens[orig(years)].count == 1
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() in tokens[].value.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.H in tokens[].value
org.apache.commons.lang3.time.DurationFormatUtils.m in tokens[].value
org.apache.commons.lang3.time.DurationFormatUtils.s in tokens[].value
org.apache.commons.lang3.time.DurationFormatUtils.S in tokens[].value
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String):::ENTER
durationMillis one of { 0, 554 }
format has only one value
format.toString == "H:mm:ss.SSS"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
format.toString == "H:mm:ss.SSS"
return.toString one of { "0:00:00.000", "0:00:00.554" }
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean):::ENTER
durationMillis one of { 0, 554 }
format has only one value
format.toString == "H:mm:ss.SSS"
padWithZeros == true
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
format.toString == "H:mm:ss.SSS"
return.toString one of { "0:00:00.000", "0:00:00.554" }
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationHMS(long):::ENTER
durationMillis one of { 0, 554 }
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.formatDurationHMS(long):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
return.toString one of { "0:00:00.000", "0:00:00.554" }
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.lexx(java.lang.String):::ENTER
format has only one value
format.toString == "H:mm:ss.SSS"
===========================================================================
org.apache.commons.lang3.time.DurationFormatUtils.lexx(java.lang.String):::EXIT
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)
org.apache.commons.lang3.time.DurationFormatUtils.y == orig(org.apache.commons.lang3.time.DurationFormatUtils.y)
org.apache.commons.lang3.time.DurationFormatUtils.M == orig(org.apache.commons.lang3.time.DurationFormatUtils.M)
org.apache.commons.lang3.time.DurationFormatUtils.d == orig(org.apache.commons.lang3.time.DurationFormatUtils.d)
org.apache.commons.lang3.time.DurationFormatUtils.H == orig(org.apache.commons.lang3.time.DurationFormatUtils.H)
org.apache.commons.lang3.time.DurationFormatUtils.m == orig(org.apache.commons.lang3.time.DurationFormatUtils.m)
org.apache.commons.lang3.time.DurationFormatUtils.s == orig(org.apache.commons.lang3.time.DurationFormatUtils.s)
org.apache.commons.lang3.time.DurationFormatUtils.S == orig(org.apache.commons.lang3.time.DurationFormatUtils.S)
format.toString == "H:mm:ss.SSS"
return.getClass().getName() == org.apache.commons.lang3.time.DurationFormatUtils$Token[].class
return[].value.getClass().getName() == [java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String, java.lang.StringBuffer, java.lang.String]
return[].count == [1, 1, 2, 1, 2, 1, 3]
return[].count elements one of { 1, 2, 3 }
size(return[]) == 7
org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString == orig(org.apache.commons.lang3.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN.toString)
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() in return[].value.getClass().getName()
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.M.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.d.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.H.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.m.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.s.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.y.getClass().getName() == orig(org.apache.commons.lang3.time.DurationFormatUtils.S.getClass().getName())
org.apache.commons.lang3.time.DurationFormatUtils.H in return[].value
org.apache.commons.lang3.time.DurationFormatUtils.m in return[].value
org.apache.commons.lang3.time.DurationFormatUtils.s in return[].value
org.apache.commons.lang3.time.DurationFormatUtils.S in return[].value
format.toString == orig(format.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatch:::CLASS
===========================================================================
org.apache.commons.lang3.time.StopWatch:::OBJECT
this.runningState >= 0
this.splitState one of { 10, 11 }
this.startTime >= 0
this.startTimeMillis >= 0
this.stopTime >= 0
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS > this.runningState
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS > this.splitState
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS != this.startTime
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS != this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS != this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED <= this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.splitState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED <= this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED <= this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED <= this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.splitState
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING != this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING != this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING != this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < this.splitState
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED != this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED != this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED != this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED >= this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < this.splitState
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED != this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED != this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED != this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT > this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT <= this.splitState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT != this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT != this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT != this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT > this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT >= this.splitState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT != this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT != this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT != this.stopTime
this.runningState < this.splitState
this.runningState <= this.startTime
this.runningState <= this.startTimeMillis
this.splitState != this.startTime
this.splitState != this.startTimeMillis
this.splitState != this.stopTime
this.startTime >= this.startTimeMillis
===========================================================================
org.apache.commons.lang3.time.StopWatch.StopWatch():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
===========================================================================
org.apache.commons.lang3.time.StopWatch.getNanoTime():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
===========================================================================
org.apache.commons.lang3.time.StopWatch.getNanoTime():::EXIT285
this.runningState one of { 2, 3 }
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS < this.startTime
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS < this.stopTime
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS < return
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTime == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.stopTime == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % return == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < return
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < return
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED <= this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < return
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < return
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT < this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT < return
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT < this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT < return
this.runningState < this.startTime
this.runningState < this.startTimeMillis
this.runningState < this.stopTime
this.runningState < return
this.startTime > this.startTimeMillis
this.startTime < this.stopTime
this.startTime > return
this.startTimeMillis < this.stopTime
this.startTimeMillis > return
this.stopTime > return
this.startTime - this.stopTime + return == 0
===========================================================================
org.apache.commons.lang3.time.StopWatch.getNanoTime():::EXIT287
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == return
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == orig(this.runningState)
this.startTime one of { 0, 344809894036458L }
this.startTimeMillis one of { 0, 1501529690270L }
this.stopTime one of { 0, 344810450292985L }
===========================================================================
org.apache.commons.lang3.time.StopWatch.getNanoTime():::EXIT289
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == orig(this.stopTime)
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == orig(this.runningState)
this.startTime == 344809373904672L
this.startTimeMillis == 1501529689750L
return == 515562309
orig(this) has only one value
===========================================================================
org.apache.commons.lang3.time.StopWatch.getNanoTime():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.runningState == orig(this.runningState)
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
return >= 0
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS != return
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED <= return
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING != return
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED != return
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED != return
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT != return
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT != return
this.runningState <= return
this.startTime >= return
this.startTimeMillis >= return
===========================================================================
org.apache.commons.lang3.time.StopWatch.getSplitNanoTime():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this has only one value
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
===========================================================================
org.apache.commons.lang3.time.StopWatch.getSplitNanoTime():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
return == 554324388
===========================================================================
org.apache.commons.lang3.time.StopWatch.getSplitTime():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this has only one value
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
===========================================================================
org.apache.commons.lang3.time.StopWatch.getSplitTime():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
return == 554
===========================================================================
org.apache.commons.lang3.time.StopWatch.getStartTime():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this has only one value
this.startTime == 344808302080277L
this.startTimeMillis == 1501529688678L
===========================================================================
org.apache.commons.lang3.time.StopWatch.getStartTime():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == return
return == orig(this.startTimeMillis)
this.startTime == 344808302080277L
return == 1501529688678L
===========================================================================
org.apache.commons.lang3.time.StopWatch.getTime():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
===========================================================================
org.apache.commons.lang3.time.StopWatch.getTime():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.runningState == orig(this.runningState)
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
return >= 0
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS > return
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED <= return
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING != return
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED != return
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED != return
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT != return
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT != return
this.runningState <= return
this.startTime >= return
this.startTimeMillis >= return
===========================================================================
org.apache.commons.lang3.time.StopWatch.reset():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.runningState one of { 1, 2 }
this.startTime one of { 344808302080277L, 344809894036458L }
this.startTimeMillis one of { 1501529688678L, 1501529690270L }
this.stopTime one of { 0, 344810450292985L }
===========================================================================
org.apache.commons.lang3.time.StopWatch.reset():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
this.startTime one of { 344808302080277L, 344809894036458L }
this.startTimeMillis one of { 1501529688678L, 1501529690270L }
this.stopTime one of { 0, 344810450292985L }
===========================================================================
org.apache.commons.lang3.time.StopWatch.resume():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this has only one value
this.startTime == 344812156579319L
this.startTimeMillis == 1501529692533L
this.stopTime == 344812709242702L
===========================================================================
org.apache.commons.lang3.time.StopWatch.resume():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
this.startTime == 344812710733074L
this.startTimeMillis == 1501529692533L
this.stopTime == 344812709242702L
===========================================================================
org.apache.commons.lang3.time.StopWatch.split():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this has only one value
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
===========================================================================
org.apache.commons.lang3.time.StopWatch.split():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
===========================================================================
org.apache.commons.lang3.time.StopWatch.start():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
===========================================================================
org.apache.commons.lang3.time.StopWatch.start():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS < this.startTime
org.apache.commons.lang3.time.StopWatch.NANO_2_MILLIS < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTime == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTimeMillis == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT < this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT < this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT < this.startTimeMillis
this.startTime > this.startTimeMillis
===========================================================================
org.apache.commons.lang3.time.StopWatch.stop():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.runningState one of { 1, 3 }
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTime == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTimeMillis == 0
===========================================================================
org.apache.commons.lang3.time.StopWatch.stop():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_STOPPED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTime == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.startTimeMillis == 0
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED % this.stopTime == 0
===========================================================================
org.apache.commons.lang3.time.StopWatch.suspend():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTime one of { 344812156579319L, 344813817956056L }
this.startTimeMillis one of { 1501529692533L, 1501529694194L }
===========================================================================
org.apache.commons.lang3.time.StopWatch.suspend():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_SUSPENDED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.startTime one of { 344812156579319L, 344813817956056L }
this.startTimeMillis one of { 1501529692533L, 1501529694194L }
this.stopTime one of { 344812709242702L, 344814018250538L }
===========================================================================
org.apache.commons.lang3.time.StopWatch.toSplitString():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this has only one value
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
===========================================================================
org.apache.commons.lang3.time.StopWatch.toSplitString():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
return has only one value
return.toString == "0:00:00.554"
===========================================================================
org.apache.commons.lang3.time.StopWatch.toString():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this has only one value
===========================================================================
org.apache.commons.lang3.time.StopWatch.toString():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.startTimeMillis
org.apache.commons.lang3.time.StopWatch.STATE_UNSTARTED == this.stopTime
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
return has only one value
return.toString == "0:00:00.000"
===========================================================================
org.apache.commons.lang3.time.StopWatch.unsplit():::ENTER
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_SPLIT == this.splitState
this has only one value
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
===========================================================================
org.apache.commons.lang3.time.StopWatch.unsplit():::EXIT
org.apache.commons.lang3.time.StopWatch.STATE_RUNNING == this.runningState
org.apache.commons.lang3.time.StopWatch.STATE_UNSPLIT == this.splitState
this.startTime == orig(this.startTime)
this.startTimeMillis == orig(this.startTimeMillis)
this.stopTime == orig(this.stopTime)
this.startTime == 344810456264738L
this.startTimeMillis == 1501529690833L
this.stopTime == 344811010589126L
===========================================================================
org.apache.commons.lang3.time.StopWatchTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.StopWatchTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.StopWatchTest(java.lang.String):::EXIT
this.fName == orig(s)
this.fName.toString == s.toString
s.toString == orig(s.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testBadStates():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testBadStates"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testBadStates():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testBadStates"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testGetStartTime():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetStartTime"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testGetStartTime():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetStartTime"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testLang315():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLang315"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testLang315():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLang315"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimple():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStopWatchSimple"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimple():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStopWatchSimple"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStopWatchSimpleGet"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSimpleGet():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStopWatchSimpleGet"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStopWatchSplit"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSplit():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStopWatchSplit"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSuspend():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStopWatchSuspend"
===========================================================================
org.apache.commons.lang3.time.StopWatchTest.testStopWatchSuspend():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStopWatchSuspend"
this.fName.toString == orig(this.fName.toString)
