===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected >= -1
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected >= -1
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected.toString one of { "", "ExceptionUtilsTest.ExceptionWithCause: Wrapper", "IllegalArgumentException: Base" }
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString one of { "", "ExceptionUtilsTest.ExceptionWithCause: Wrapper", "IllegalArgumentException: Base" }
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected.toString one of { "", "ExceptionUtilsTest.ExceptionWithCause: Wrapper", "IllegalArgumentException: Base" }
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString one of { "", "ExceptionUtilsTest.ExceptionWithCause: Wrapper", "IllegalArgumentException: Base" }
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 28
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 28
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.exception.ExceptionUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 28
this.fTests[].getClass().getName() == [org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
size(this.fTests[]) == 28
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 28 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 28
result.fStop == false
size(this.fTests[]) one of { 1, 28 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 28 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest, org.apache.commons.lang3.exception.ExceptionUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 28 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 29 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 28 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 28
runTime == 5836
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 28
return has only one value
return.toString == "5.836"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 28
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 5836
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 28
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 28
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 28
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 28
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 28
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 28
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 28
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 28
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 28
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 28
runTime == 5836
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 28
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.exception.ExceptionUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 28 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 28
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 28
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 28
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 28
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 28
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.ClassUtils:::CLASS
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR has only one value
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == "."
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR has only one value
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == "$"
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap has only one value
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == java.util.HashMap.class
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap has only one value
org.apache.commons.lang3.ClassUtils.abbreviationMap has only one value
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap has only one value
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString > org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName()
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName()
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName()
===========================================================================
org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String):::ENTER
primitive.toString > abbreviation.toString
===========================================================================
org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String):::EXIT
primitive.toString > abbreviation.toString
primitive.toString == orig(primitive.toString)
abbreviation.toString == orig(abbreviation.toString)
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Class):::EXIT171
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Class):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
return.toString one of { "ExceptionUtilsTest.ExceptionWithCause", "IllegalArgumentException" }
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Object, java.lang.String):::ENTER
valueIfNull == null
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Object, java.lang.String):::EXIT154
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.Object, java.lang.String):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
return.toString one of { "ExceptionUtilsTest.ExceptionWithCause", "IllegalArgumentException" }
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.String):::ENTER
className.toString one of { "java.lang.IllegalArgumentException", "org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause" }
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.String):::EXIT219
===========================================================================
org.apache.commons.lang3.ClassUtils.getShortClassName(java.lang.String):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
className.toString one of { "java.lang.IllegalArgumentException", "org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause" }
return.toString one of { "ExceptionUtilsTest.ExceptionWithCause", "IllegalArgumentException" }
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
className.toString == orig(className.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion:::OBJECT
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::ENTER
$hidden$1.toString > name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
this.value == orig(value)
this.name == orig(name)
this.name.toString == name.toString
$hidden$1.toString > name.toString
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::ENTER
nom has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT116
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == return
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == return.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == return.name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
nom.toString == "1.8"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
nom.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
nom.toString == return.name.toString
nom.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
nom.toString == orig(nom.toString)
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.defaultString(java.lang.String):::ENTER
str.toString one of { "Base", "Wrapper" }
===========================================================================
org.apache.commons.lang3.StringUtils.defaultString(java.lang.String):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
return == orig(str)
str.toString one of { "Base", "Wrapper" }
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
str.toString == return.toString
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements >= org.apache.commons.lang3.JavaVersion.JAVA_1_1.value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements <= org.apache.commons.lang3.JavaVersion.JAVA_1_8.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT1244
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
property.toString != return.toString
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::ENTER
version has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
version.toString == "1.8"
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
version.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
version.toString > versionPrefix.toString
version.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
version.toString == orig(version.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
osVersion has only one value
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osName.toString == "Windows 10"
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osName.toString == orig(osName.toString)
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osVersion.toString == orig(osVersion.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
osName.toString != osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString != osNamePrefix.toString
osName.toString == orig(osName.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.daikon.ExceptionUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.ExceptionUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils:::CLASS
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER has only one value
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == " [wrapped] "
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES has only one value
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] contains no nulls and has only one value, of length 12
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] elements != null
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].getClass().getName() elements == java.lang.String.class
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].toString == [getCause, getNextException, getTargetException, getException, getSourceException, getRootCause, getCausedByException, getNested, getLinkedException, getNestedException, getLinkedCause, getThrowable]
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) == 12
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.ExceptionUtils():::EXIT
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[]):::ENTER
methodNames.getClass().getName() == java.lang.String[].class
size(methodNames[]) one of { 0, 1, 12 }
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == methodNames.getClass().getName()
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) >= size(methodNames[])
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 != size(methodNames[])
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 >= size(methodNames[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[]):::EXIT143
return == orig(throwable)
methodNames[].toString one of { [], [getCause, getNextException, getTargetException, getException, getSourceException, getRootCause, getCausedByException, getNested, getLinkedException, getNestedException, getLinkedCause, getThrowable] }
return == null
orig(size(methodNames[])) one of { 0, 12 }
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[]):::EXIT154
orig(methodNames[]) elements != null
orig(methodNames[].toString) one of { [getCause], [getCause, getNextException, getTargetException, getException, getSourceException, getRootCause, getCausedByException, getNested, getLinkedException, getNestedException, getLinkedCause, getThrowable] }
orig(size(methodNames[])) one of { 1, 12 }
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[]):::EXIT159
return == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[]):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(methodNames.getClass().getName())
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) >= orig(size(methodNames[]))
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 != orig(size(methodNames[]))
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 >= orig(size(methodNames[]))-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCauseUsingMethodName(java.lang.Throwable, java.lang.String):::ENTER
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString < methodName.toString
methodName in org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]
methodName.toString in org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].toString
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCauseUsingMethodName(java.lang.Throwable, java.lang.String):::EXIT204
methodName.toString == "getCause"
orig(methodName) has only one value
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCauseUsingMethodName(java.lang.Throwable, java.lang.String):::EXIT213
return == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getCauseUsingMethodName(java.lang.Throwable, java.lang.String):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString < methodName.toString
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
orig(methodName) in org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]
methodName.toString in org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[].toString
methodName.toString == orig(methodName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getMessage(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getMessage(java.lang.Throwable):::EXIT673
return has only one value
return.toString == ""
orig(th) == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getMessage(java.lang.Throwable):::EXIT677
return.toString one of { "ExceptionUtilsTest.ExceptionWithCause: Wrapper", "IllegalArgumentException: Base" }
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getMessage(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
(return.toString == "")  ==>  (orig(th) == null)
(return.toString == "")  ==>  (return has only one value)
return.toString one of { "", "ExceptionUtilsTest.ExceptionWithCause: Wrapper", "IllegalArgumentException: Base" }
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCause(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCause(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseMessage(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
return.toString one of { "", "IllegalArgumentException: Base" }
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable):::EXIT518
return has only one value
return[] == []
return[].toString == []
orig(throwable) == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable):::EXIT539
size(return[]) one of { 16, 25 }
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
size(return[]) one of { 0, 16, 25 }
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) != size(return[])
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) != size(return[])-1
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 != size(return[])
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 != size(return[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getStackFrameList(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getStackFrameList(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
return[] elements != null
return[].getClass().getName() elements == java.lang.String.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 15, 20, 21 }
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[]) < size(return[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getStackTrace(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString < return.toString
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getThrowableCount(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getThrowableCount(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getThrowableList(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getThrowableList(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
return[] elements != null
return.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 > size(return[])
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getThrowables(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.getThrowables(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
return.getClass().getName() == java.lang.Throwable[].class
return[] elements != null
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1 > size(return[])
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::ENTER
fromIndex < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::EXIT388
return == -1
orig(fromIndex) == 0
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[orig(fromIndex)] has only one value
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::EXIT395
return == -1
orig(type) has only one value
orig(fromIndex) == 9
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[orig(fromIndex)] has only one value
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[orig(fromIndex)-1] has only one value
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::EXIT400
return one of { 0, 1, 2 }
orig(fromIndex) one of { -1, 0 }
orig(subclass) == true
orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[post(fromIndex)]) has only one value
return >= orig(fromIndex)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::EXIT406
return one of { 0, 1, 2 }
orig(fromIndex) one of { -1, 0 }
orig(subclass) == false
orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[post(fromIndex)]) has only one value
return >= orig(fromIndex)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::EXIT410
return == -1
orig(fromIndex) one of { 0, 1 }
return < orig(fromIndex)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOf(java.lang.Throwable, java.lang.Class, int, boolean):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
return < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
orig(fromIndex) < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
return < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class, int):::ENTER
fromIndex < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class, int):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
return < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
orig(fromIndex) < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
return < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class, int):::ENTER
fromIndex < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class, int):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
return < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
orig(fromIndex) < size(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])-1
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable):::ENTER
throwable == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream):::EXIT457
orig(throwable) == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream):::EXIT467
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter):::EXIT490
orig(throwable) == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter):::EXIT500
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.removeCommonFrames(java.util.List, java.util.List):::ENTER
causeFrames[].getClass().getName() elements == java.lang.String.class
causeFrames[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
causeFrames.getClass().getName() == java.util.ArrayList.class
wrapperFrames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
wrapperFrames[].getClass().getName() elements == java.lang.String.class
size(causeFrames[]) one of { 20, 21 }
size(wrapperFrames[]) == 20
causeFrames.getClass().getName() == wrapperFrames.getClass().getName()
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtils.removeCommonFrames(java.util.List, java.util.List):::EXIT
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[] == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES[])
wrapperFrames[] == orig(wrapperFrames[])
causeFrames[].getClass().getName() == [java.lang.String]
causeFrames[].getClass().getName() elements == java.lang.String.class
wrapperFrames[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
wrapperFrames[].getClass().getName() elements == java.lang.String.class
org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString == orig(org.apache.commons.lang3.exception.ExceptionUtils.WRAPPED_MARKER.toString)
org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName() == orig(org.apache.commons.lang3.exception.ExceptionUtils.CAUSE_METHOD_NAMES.getClass().getName())
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause:::OBJECT
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.ExceptionWithCause(java.lang.String, java.lang.Throwable):::ENTER
str has only one value
str.toString == "Wrapper"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.ExceptionWithCause(java.lang.String, java.lang.Throwable):::EXIT
this.cause == orig(cause)
str.toString == "Wrapper"
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.ExceptionWithCause(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.ExceptionWithCause(java.lang.Throwable):::EXIT
this.cause == orig(cause)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.getCause():::ENTER
this.cause != null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.getCause():::EXIT
this.cause == return
return == orig(this.cause)
return != null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.setCause(java.lang.Throwable):::ENTER
this.cause == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithCause.setCause(java.lang.Throwable):::EXIT
this.cause == orig(cause)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithoutCause:::OBJECT
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$ExceptionWithoutCause.ExceptionWithoutCause():::EXIT
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$NestableException:::OBJECT
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$NestableException.NestableException(java.lang.Throwable):::ENTER
t != null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest$NestableException.NestableException(java.lang.Throwable):::EXIT
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest:::OBJECT
this.cyclicCause.cause != null
this.fName != null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.ExceptionUtilsTest(java.lang.String):::EXIT
this.withCause == this.withoutCause
this.withCause == this.jdkNoCause
this.fName == orig(name)
this.nested == null
this.withCause == null
this.cyclicCause == null
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.createExceptionWithCause():::ENTER
this.fName.toString one of { "testGetRootCauseStackTrace_Throwable", "testPrintRootCauseStackTrace_ThrowableStream", "testPrintRootCauseStackTrace_ThrowableWriter" }
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.createExceptionWithCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.fName.toString one of { "testGetRootCauseStackTrace_Throwable", "testPrintRootCauseStackTrace_ThrowableStream", "testPrintRootCauseStackTrace_ThrowableWriter" }
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.createExceptionWithoutCause():::ENTER
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.createExceptionWithoutCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
return != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.setUp():::ENTER
this.withCause == this.withoutCause
this.withCause == this.jdkNoCause
this.nested == null
this.withCause == null
this.cyclicCause == null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.setUp():::EXIT
this.fName == orig(this.fName)
this.nested != null
this.withCause != null
this.withoutCause != null
this.jdkNoCause != null
this.cyclicCause != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.tearDown():::ENTER
this.nested != null
this.withCause != null
this.withoutCause != null
this.jdkNoCause != null
this.cyclicCause != null
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.tearDown():::EXIT
this.withCause == this.withoutCause
this.withCause == this.jdkNoCause
this.fName == orig(this.fName)
this.nested == null
this.withCause == null
this.cyclicCause == null
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testConstructor():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testConstructor():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetCause_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetCause_Throwable"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_ThrowableArray():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetCause_ThrowableArray"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetCause_ThrowableArray():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetCause_ThrowableArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetRootCauseStackTrace_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCauseStackTrace_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetRootCauseStackTrace_Throwable"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCause_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetRootCause_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetRootCause_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetRootCause_Throwable"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableCount_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableCount_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableCount_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableCount_Throwable"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_jdkNoCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_jdkNoCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_jdkNoCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_jdkNoCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_nested():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_nested"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_nested():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_nested"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_null():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_null"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_null():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_null"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_recursiveCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_recursiveCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_recursiveCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_recursiveCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_withCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_withCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withoutCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_withoutCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowableList_Throwable_withoutCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowableList_Throwable_withoutCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_jdkNoCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_jdkNoCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_jdkNoCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_jdkNoCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_nested():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_nested"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_nested():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_nested"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_null():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_null"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_null():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_null"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_recursiveCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_recursiveCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_recursiveCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_recursiveCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_withCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_withCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withoutCause():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_withoutCause"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testGetThrowables_Throwable_withoutCause():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testGetThrowables_Throwable_withoutCause"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClass():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOfType_ThrowableClass"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClass():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOfType_ThrowableClass"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClassInt():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOfType_ThrowableClassInt"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOfType_ThrowableClassInt():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOfType_ThrowableClassInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClass():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOf_ThrowableClass"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClass():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOf_ThrowableClass"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClassInt():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOf_ThrowableClassInt"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testIndexOf_ThrowableClassInt():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testIndexOf_ThrowableClassInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testPrintRootCauseStackTrace_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testPrintRootCauseStackTrace_Throwable"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testPrintRootCauseStackTrace_ThrowableStream"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableStream():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testPrintRootCauseStackTrace_ThrowableStream"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableWriter():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testPrintRootCauseStackTrace_ThrowableWriter"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testPrintRootCauseStackTrace_ThrowableWriter():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testPrintRootCauseStackTrace_ThrowableWriter"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testRemoveCommonFrames_ListList():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testRemoveCommonFrames_ListList"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.testRemoveCommonFrames_ListList():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "testRemoveCommonFrames_ListList"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "test_getMessage_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getMessage_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "test_getMessage_Throwable"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable():::ENTER
this has only one value
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "test_getRootCauseMessage_Throwable"
===========================================================================
org.apache.commons.lang3.exception.ExceptionUtilsTest.test_getRootCauseMessage_Throwable():::EXIT
this.nested == orig(this.nested)
this.withCause == orig(this.withCause)
this.withoutCause == orig(this.withoutCause)
this.jdkNoCause == orig(this.jdkNoCause)
this.cyclicCause == orig(this.cyclicCause)
this.cyclicCause.cause == orig(this.cyclicCause.cause)
this.fName == orig(this.fName)
this.nested has only one value
this.withCause has only one value
this.withoutCause has only one value
this.jdkNoCause has only one value
this.cyclicCause has only one value
this.cyclicCause.cause has only one value
this.fName has only one value
this.fName.toString == "test_getRootCauseMessage_Throwable"
this.fName.toString == orig(this.fName.toString)
