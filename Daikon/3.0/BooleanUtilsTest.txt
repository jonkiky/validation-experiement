===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT61
orig(message) == orig(expected)
orig(expected) == orig(actual)
orig(expected) == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
orig(expected) != null
orig(actual) != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected == actual
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
expected == actual
message == null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT78
orig(message) == orig(expected)
orig(message) == orig(actual)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
orig(expected) != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
(orig(expected) == null)  ==>  (orig(message) == orig(expected))
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.BooleanUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == java.lang.Boolean.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == java.lang.Boolean.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 43
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 43
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.BooleanUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 43
this.fTests[].getClass().getName() == [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
size(this.fTests[]) == 43
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 43
this.fTests[].getClass().getName() == [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest]
names[] contains no nulls and has only one value, of length 43
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 43
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 43)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 43)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 43
this.fTests[].getClass().getName() == [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest]
return == false
size(this.fTests[]) == 43
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 43)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 43)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.BooleanUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 43
this.fTests[].getClass().getName() == [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest]
return == false
size(this.fTests[]) == 43
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 43 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(this.fTests[]) one of { 1, 43 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 43 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest, org.apache.commons.lang3.BooleanUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 43 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 44 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 43 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 2
runTime == 2607
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
return has only one value
return.toString == "2.607"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
runTime == 2607
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 2
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 2
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 2
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 43
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 2
runTime == 2607
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 2
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.BooleanUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn != orig(this.fColumn)
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 2 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn <= junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 43
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 43
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.EXCEPTION_EXIT
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 43
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.ArrayUtils:::CLASS
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == java.lang.Object[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == java.lang.Class[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[].toString == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == java.lang.Long[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == java.lang.Short[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == java.lang.Byte[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == java.lang.Double[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == java.lang.Float[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == java.lang.Boolean[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == java.lang.Character[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
===========================================================================
org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[]):::ENTER
array[] elements != null
size(array[]) one of { 2, 3 }
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) < size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[]):::EXIT3173
===========================================================================
org.apache.commons.lang3.ArrayUtils.toPrimitive(java.lang.Boolean[]):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
size(return[]) == orig(size(array[]))
array[] elements != null
size(return[]) one of { 2, 3 }
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) < size(array[])-1
===========================================================================
org.apache.commons.lang3.BooleanUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.BooleanUtils():::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.isFalse(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.isFalse(java.lang.Boolean):::EXIT
(return == true)  <==>  (orig(bool) has only one value)
===========================================================================
org.apache.commons.lang3.BooleanUtils.isFalse(java.lang.Boolean):::EXIT;condition="return == true"
return == true
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.isFalse(java.lang.Boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotFalse(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotFalse(java.lang.Boolean):::EXIT
(return == false)  <==>  (orig(bool) has only one value)
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotFalse(java.lang.Boolean):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotFalse(java.lang.Boolean):::EXIT;condition="not(return == true)"
return == false
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotTrue(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotTrue(java.lang.Boolean):::EXIT
(return == false)  <==>  (orig(bool) has only one value)
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotTrue(java.lang.Boolean):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.BooleanUtils.isNotTrue(java.lang.Boolean):::EXIT;condition="not(return == true)"
return == false
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.isTrue(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.isTrue(java.lang.Boolean):::EXIT
(return == true)  <==>  (orig(bool) has only one value)
===========================================================================
org.apache.commons.lang3.BooleanUtils.isTrue(java.lang.Boolean):::EXIT;condition="return == true"
return == true
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.isTrue(java.lang.Boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.negate(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.negate(java.lang.Boolean):::EXIT65
return == orig(bool)
return == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.negate(java.lang.Boolean):::EXIT67
===========================================================================
org.apache.commons.lang3.BooleanUtils.negate(java.lang.Boolean):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::ENTER
value one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT199
return == true
orig(value) one of { -1, 1 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT199;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT200
return == false
orig(value) == 0
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT200;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT
(return == false)  <==>  (orig(value) == 0)
(return == true)  <==>  (orig(value) one of { -1, 1 })
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT;condition="return == true"
return == true
orig(value) one of { -1, 1 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int):::EXIT;condition="not(return == true)"
return == false
orig(value) == 0
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::ENTER
value one of { 6, 7 }
trueValue == 6
falseValue == 7
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT263
orig(value) == orig(trueValue)
return == true
orig(value) == 6
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT263;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT266
orig(value) == orig(falseValue)
return == false
orig(value) == 7
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT266;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT
(return == false)  <==>  (orig(value) == 7)
(return == false)  <==>  (orig(value) == orig(falseValue))
(return == true)  <==>  (orig(value) == 6)
(return == true)  <==>  (orig(value) == orig(trueValue))
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT;condition="return == true"
orig(value) == orig(trueValue)
return == true
orig(value) == 6
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(int, int, int):::EXIT;condition="not(return == true)"
orig(value) == orig(falseValue)
return == false
orig(value) == 7
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT159
return == true
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT159;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT160
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT160;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT
(return == true)  <==>  (orig(bool) has only one value)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT;condition="return == true"
return == true
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT292
orig(value) == orig(trueValue)
return == true
orig(value) == null
orig(falseValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT292;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT295
orig(value) == orig(falseValue)
return == false
orig(value) == null
orig(trueValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT295;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT298
return == true
orig(value) has only one value
orig(trueValue) has only one value
orig(falseValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT298;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT300
return == false
orig(value) has only one value
orig(trueValue) has only one value
orig(falseValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT300;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT
(return == false)  ==>  (orig(trueValue) has only one value)
(return == true)  ==>  (orig(falseValue) has only one value)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT;condition="return == true"
return == true
orig(falseValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT;condition="not(return == true)"
return == false
orig(trueValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT695
return == true
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT695;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT696
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT696;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::ENTER
str.toString one of { "N", "Y" }
trueString.toString == "Y"
falseString.toString one of { "N", "Y" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT714
orig(str) == orig(trueString)
str.toString == "Y"
return == true
str.toString == trueString.toString
str.toString == orig(trueString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT714;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT716
orig(str) == orig(falseString)
str.toString == "N"
return == false
orig(trueString) has only one value
str.toString == falseString.toString
str.toString == orig(falseString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT716;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT719
str.toString == "Y"
return == true
orig(str) has only one value
str.toString == trueString.toString
str.toString == orig(trueString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT719;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT721
str.toString == "N"
return == false
orig(str) has only one value
orig(trueString) has only one value
orig(falseString) has only one value
str.toString == falseString.toString
str.toString == orig(falseString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT721;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT
(str.toString == "N")  <==>  (return == false)
(str.toString == "N")  ==>  (falseString.toString == "N")
(str.toString == "N")  ==>  (str.toString == falseString.toString)
(str.toString == "Y")  <==>  (return == true)
(str.toString == "Y")  <==>  (str.toString == trueString.toString)
(str.toString == "Y")  ==>  (falseString.toString one of { "N", "Y" })
str.toString one of { "N", "Y" }
trueString.toString == "Y"
falseString.toString one of { "N", "Y" }
str.toString == orig(str.toString)
trueString.toString == orig(trueString.toString)
falseString.toString == orig(falseString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="return == true"
str.toString == "Y"
return == true
str.toString == trueString.toString
str.toString == orig(trueString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
str.toString == "N"
return == false
str.toString == falseString.toString
str.toString == orig(falseString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT177
return == orig(valueIfNull)
orig(bool) == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT177;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT177;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT179
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT179;condition="return == true"
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT179;condition="not(return == true)"
orig(bool) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int):::ENTER
value one of { -1, 0, 1 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int, int, int, int):::ENTER
value one of { 6, 7, 8 }
trueValue == 6
falseValue == 7
nullValue == 8
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int, int, int, int):::EXIT326
orig(value) == orig(trueValue)
return has only one value
orig(value) == 6
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int, int, int, int):::EXIT329
orig(value) == orig(falseValue)
return has only one value
orig(value) == 7
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int, int, int, int):::EXIT332
orig(value) == orig(nullValue)
return == null
orig(value) == 8
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(int, int, int, int):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer):::EXIT240
return == null
orig(value) == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer):::EXIT242
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT359
orig(value) == orig(trueValue)
return has only one value
orig(value) == null
orig(falseValue) has only one value
orig(nullValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT362
orig(value) == orig(falseValue)
return has only one value
orig(value) == null
orig(trueValue) has only one value
orig(nullValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT365
orig(value) == orig(nullValue)
return == null
orig(value) == null
orig(trueValue) has only one value
orig(falseValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT368
return has only one value
orig(value) has only one value
orig(trueValue) has only one value
orig(falseValue) has only one value
orig(nullValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT370
return has only one value
orig(value) has only one value
orig(trueValue) has only one value
orig(falseValue) has only one value
orig(nullValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT372
return == null
orig(value) has only one value
orig(trueValue) has only one value
orig(falseValue) has only one value
orig(nullValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT546
str.toString == "true"
return has only one value
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT549
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT556
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT560
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT569
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT573
str.toString one of { "NO", "no" }
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT584
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT589
str.toString one of { "OFF", "off" }
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT602
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT617
str.toString one of { "FALSE", "false" }
return has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT623
return == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String):::EXIT
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
str.toString one of { "N", "U", "Y" }
trueString.toString == "Y"
falseString.toString == "N"
nullString.toString == "U"
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT648
orig(str) == orig(trueString)
return has only one value
orig(str) == null
orig(falseString) has only one value
orig(nullString) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT651
orig(str) == orig(falseString)
return has only one value
orig(str) == null
orig(trueString) has only one value
orig(nullString) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT654
orig(str) == orig(nullString)
return == null
orig(str) == null
orig(trueString) has only one value
orig(falseString) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT657
orig(str) == orig(trueString)
str.toString == "Y"
return has only one value
orig(str) has only one value
orig(falseString) has only one value
orig(nullString) has only one value
str.toString == trueString.toString
str.toString == orig(trueString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT659
orig(str) == orig(falseString)
str.toString == "N"
return has only one value
orig(str) has only one value
orig(trueString) has only one value
orig(nullString) has only one value
str.toString == falseString.toString
str.toString == orig(falseString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT661
orig(str) == orig(nullString)
str.toString == "U"
return == null
orig(str) has only one value
orig(trueString) has only one value
orig(falseString) has only one value
str.toString == nullString.toString
str.toString == orig(nullString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString one of { "N", "U", "Y" }
trueString.toString == "Y"
falseString.toString == "N"
nullString.toString == "U"
str.toString == orig(str.toString)
trueString.toString == orig(trueString.toString)
falseString.toString == orig(falseString.toString)
nullString.toString == orig(nullString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(boolean):::EXIT
return one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(boolean, int, int):::ENTER
trueValue == 6
falseValue == 7
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(boolean, int, int):::EXIT
return one of { 6, 7 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(java.lang.Boolean, int, int, int):::ENTER
trueValue == 6
falseValue == 7
nullValue == 8
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(java.lang.Boolean, int, int, int):::EXIT467
return == orig(nullValue)
return == 8
orig(bool) == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(java.lang.Boolean, int, int, int):::EXIT469
return one of { 6, 7 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toInteger(java.lang.Boolean, int, int, int):::EXIT
(return == 8)  <==>  (return == orig(nullValue))
(return == 8)  ==>  (orig(bool) == null)
return one of { 6, 7, 8 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(boolean):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(boolean, java.lang.Integer, java.lang.Integer):::ENTER
trueValue has only one value
falseValue has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(boolean, java.lang.Integer, java.lang.Integer):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean):::EXIT428
return == null
orig(bool) == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean):::EXIT430
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer):::ENTER
trueValue has only one value
falseValue has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT506
return == orig(nullValue)
orig(bool) == null
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT508
orig(nullValue) has only one value
===========================================================================
org.apache.commons.lang3.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer):::EXIT
===========================================================================
org.apache.commons.lang3.BooleanUtils.toString(boolean, java.lang.String, java.lang.String):::ENTER
trueString.toString > falseString.toString
===========================================================================
org.apache.commons.lang3.BooleanUtils.toString(boolean, java.lang.String, java.lang.String):::EXIT
trueString.toString > falseString.toString
trueString.toString >= return.toString
trueString.toString == orig(trueString.toString)
falseString.toString <= return.toString
falseString.toString == orig(falseString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String):::ENTER
nullString.toString == "U"
trueString.toString > falseString.toString
===========================================================================
org.apache.commons.lang3.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String):::EXIT798
return == orig(nullString)
orig(bool) == null
nullString.toString == return.toString
===========================================================================
org.apache.commons.lang3.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String):::EXIT800
===========================================================================
org.apache.commons.lang3.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String):::EXIT
(nullString.toString == return.toString)  ==>  (orig(bool) == null)
(nullString.toString == return.toString)  ==>  (return == orig(nullString))
(nullString.toString == return.toString)  ==>  (return.toString == "U")
nullString.toString == "U"
trueString.toString > falseString.toString
trueString.toString >= return.toString
trueString.toString == orig(trueString.toString)
falseString.toString <= return.toString
falseString.toString == orig(falseString.toString)
nullString.toString == orig(nullString.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringOnOff(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringOnOff(boolean):::EXIT
return.toString one of { "off", "on" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringOnOff(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringOnOff(java.lang.Boolean):::EXIT
return.toString one of { "off", "on" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringTrueFalse(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringTrueFalse(boolean):::EXIT
return.toString one of { "false", "true" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringTrueFalse(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringTrueFalse(java.lang.Boolean):::EXIT
return.toString one of { "false", "true" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringYesNo(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringYesNo(boolean):::EXIT
return.toString one of { "no", "yes" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringYesNo(java.lang.Boolean):::ENTER
===========================================================================
org.apache.commons.lang3.BooleanUtils.toStringYesNo(java.lang.Boolean):::EXIT
return.toString one of { "no", "yes" }
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::ENTER
size(array[]) one of { 2, 3 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT904
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT904;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT910
return == true
return in array[]
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT910;condition="return == true"
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT911
array[] elements == false
array[] one of { [0, 0], [0, 0, 0] }
return == false
array[] elements == return
return in array[]
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT911;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT
array[] == orig(array[])
(return == true)  ==>  (return in array[])
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT;condition="return == true"
return == true
return in array[]
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(boolean[]):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(java.lang.Boolean[]):::ENTER
array.getClass().getName() == java.lang.Boolean[].class
array[] elements != null
size(array[]) one of { 2, 3 }
===========================================================================
org.apache.commons.lang3.BooleanUtils.xor(java.lang.Boolean[]):::EXIT
array[] == orig(array[])
array[] elements != null
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.BooleanUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.BooleanUtilsTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testConstructor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testConstructor():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testConstructor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_emptyInput():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_object_emptyInput"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_emptyInput():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_object_emptyInput"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_object_nullElementInput"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullElementInput():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_object_nullElementInput"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullInput():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_object_nullInput"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_nullInput():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_object_nullInput"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_object_validInput_2items"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_2items():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_object_validInput_2items"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_object_validInput_3items"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_object_validInput_3items():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_object_validInput_3items"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_emptyInput():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_primitive_emptyInput"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_emptyInput():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_primitive_emptyInput"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_nullInput():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_primitive_nullInput"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_nullInput():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_primitive_nullInput"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_2items():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_primitive_validInput_2items"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_2items():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_primitive_validInput_2items"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_3items():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testXor_primitive_validInput_3items"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.testXor_primitive_validInput_3items():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testXor_primitive_validInput_3items"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isFalse_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_isFalse_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isFalse_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_isFalse_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isNotFalse_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_isNotFalse_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isNotFalse_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_isNotFalse_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isNotTrue_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_isNotTrue_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isNotTrue_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_isNotTrue_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isTrue_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_isTrue_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_isTrue_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_isTrue_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_negate_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_negate_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_negate_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_negate_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanDefaultIfNull_Boolean_boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanDefaultIfNull_Boolean_boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanObject_Integer"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanObject_Integer"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanObject_Integer_Integer_Integer_Integer"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanObject_Integer_Integer_Integer_Integer"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanObject_String"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanObject_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanObject_String_String_String_String"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_String_String_String_String():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanObject_String_String_String_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanObject_int"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanObject_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBooleanObject_int_int_int"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBooleanObject_int_int_int():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBooleanObject_int_int_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBoolean_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBoolean_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBoolean_Integer_Integer_Integer"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBoolean_Integer_Integer_Integer"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBoolean_String"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBoolean_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String_String_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBoolean_String_String_String"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_String_String_String():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBoolean_String_String_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBoolean_int"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBoolean_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toBoolean_int_int_int"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toBoolean_int_int_int():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toBoolean_int_int_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toIntegerObject_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toIntegerObject_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toIntegerObject_Boolean_Integer_Integer_Integer"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toIntegerObject_Boolean_Integer_Integer_Integer"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toIntegerObject_boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toIntegerObject_boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toIntegerObject_boolean_Integer_Integer"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toIntegerObject_boolean_Integer_Integer"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_Boolean_int_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toInteger_Boolean_int_int_int"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_Boolean_int_int_int():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toInteger_Boolean_int_int_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toInteger_boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toInteger_boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toInteger_boolean_int_int"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toInteger_boolean_int_int():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toInteger_boolean_int_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toStringOnOff_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toStringOnOff_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toStringOnOff_boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringOnOff_boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toStringOnOff_boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toStringTrueFalse_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toStringTrueFalse_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toStringTrueFalse_boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringTrueFalse_boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toStringTrueFalse_boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toStringYesNo_Boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_Boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toStringYesNo_Boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toStringYesNo_boolean"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toStringYesNo_boolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toStringYesNo_boolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toString_Boolean_String_String_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toString_Boolean_String_String_String"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toString_Boolean_String_String_String():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toString_Boolean_String_String_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toString_boolean_String_String_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "test_toString_boolean_String_String_String"
===========================================================================
org.apache.commons.lang3.BooleanUtilsTest.test_toString_boolean_String_String_String():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "test_toString_boolean_String_String_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.daikon.BooleanUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.BooleanUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
