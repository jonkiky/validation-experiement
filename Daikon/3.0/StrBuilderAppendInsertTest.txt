===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected >= 1
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected >= 1
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
expected.getClass().getName() == java.lang.Integer.class
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected != null
actual != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected != null
actual != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message != null
message.toString == "TestCase.fName cannot be null"
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message has only one value
message != null
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == $hidden$2.fName
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 45
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 45
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.text.StrBuilderAppendInsertTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 45
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
size(this.fTests[]) == 45
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 45
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest]
names[] contains no nulls and has only one value, of length 45
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 45
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 45)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 45)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 45
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest]
return == false
size(this.fTests[]) == 45
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 45)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 45)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 45
this.fTests[].getClass().getName() == [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest]
return == false
size(this.fTests[]) == 45
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 45 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(this.fTests[]) one of { 1, 45 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 45 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest, org.apache.commons.lang3.text.StrBuilderAppendInsertTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 45 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 46 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 45 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 4
runTime == 545
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 4
return has only one value
return.toString == "0.545"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 4
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
runTime == 545
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 4
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 4
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 4
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 4
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 4
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 4
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 4
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 4
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 4
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 45
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 4
runTime == 545
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 4
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn != orig(this.fColumn)
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 4 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
this.fPrinter.fColumn == 4
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 45
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
size(return.fFailures[]) == size(return.fListeners[])-1
this.fPrinter.fColumn == 4
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 45
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 4
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 4
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 45
return.fStop == false
size(return.fListeners[]) == 1
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.JavaVersion:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion:::OBJECT
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::ENTER
$hidden$1.toString > name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
this.value == orig(value)
this.name == orig(name)
this.name.toString == name.toString
$hidden$1.toString > name.toString
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::ENTER
nom has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT116
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == return
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == return.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == return.name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
nom.toString == "1.8"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
nom.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
nom.toString == return.name.toString
nom.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
nom.toString == orig(nom.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements >= org.apache.commons.lang3.JavaVersion.JAVA_1_1.value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements <= org.apache.commons.lang3.JavaVersion.JAVA_1_8.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT1244
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
property.toString != return.toString
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::ENTER
version has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
version.toString == "1.8"
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
version.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
version.toString > versionPrefix.toString
version.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
version.toString == orig(version.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
osVersion has only one value
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osName.toString == "Windows 10"
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osName.toString == orig(osName.toString)
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osVersion.toString == orig(osVersion.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
osName.toString != osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString != osNamePrefix.toString
osName.toString == orig(osName.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.daikon.StrBuilderAppendInsertTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.StrBuilderAppendInsertTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.text.StrBuilder:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilder:::OBJECT
this.buffer != null
this.buffer[] elements >= 0
this.size >= 0
this.newLine.toString == "#"
this.nullText.toString one of { "NULL", "null" }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > size(this.buffer[])
this.size <= size(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::ENTER
initialCapacity one of { 1, 32 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::EXIT
this.size == this.buffer[this.size]
this.size == this.buffer[orig(initialCapacity)-1]
this.newLine == this.nullText
orig(initialCapacity) == size(this.buffer[])
this.buffer[] elements == 0
this.buffer[] one of { [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= orig(initialCapacity)
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(initialCapacity)
this.buffer[] elements == this.size
this.size <= size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::ENTER
str != null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::EXIT
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.size one of { 0, 3, 9 }
this.newLine == null
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.toString == orig(str.toString)
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[] one of { [102, 97, 108, 115, 101, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 102, 97, 108, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 5, 9 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 10 }
this.buffer[this.size-1] == 101
this.buffer[orig(this.size)] one of { 102, 116 }
orig(this.buffer[post(this.size)-1]) one of { 0, 13 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
ch one of { 33, 44, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(ch) == this.buffer[this.size-1]
orig(ch) == this.buffer[return.size-1]
orig(ch) == this.buffer[orig(this.size)]
orig(ch) == return.buffer[this.size-1]
orig(ch) == return.buffer[return.size-1]
orig(ch) == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.size - orig(this.size) - 1 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.nullText.toString == "NULL"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
size(chars[]) one of { 0, 3 }
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT651
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(chars) == null
this.buffer[this.size-1] == 76
this.buffer[orig(this.size)] == 78
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT660
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(size(chars[]))
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(chars) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(this.size)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(return.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(return.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(this.buffer[post(return.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[return.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[return.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)] one of { 0, 102 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 0, 3 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[] elements one of { 102, 111 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[] one of { [], [102, 111, 111] })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(size(chars[])) one of { 0, 3 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[] elements one of { 0, 102, 111 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.size == orig(size(chars[])))
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
this.nullText.toString == "NULL"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
this.buffer[orig(this.size)] one of { 0, 78, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[startIndex]
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.nullText.toString == "NULL"
chars[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102], [98, 97, 114], [102, 111, 111] }
length one of { 0, 1, 3 }
size(chars[]) one of { 3, 9 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[length] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT674
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(chars) == null
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT688
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 111, 114 }
this.buffer[orig(startIndex)] one of { 0, 98, 102 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(chars) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102], [98, 97, 114], [102, 111, 111] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (chars[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(size(chars[])) one of { 3, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) elements one of { 0, 102, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 6 }
this.newLine == null
this.nullText.toString == "NULL"
chars[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102], [98, 97, 114], [102, 111, 111] }
orig(startIndex) one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 76, 111, 114 }
chars[this.size-1] one of { 111, 114 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[length]) % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(double):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [48, 49, 50, 46, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [50, 46, 51, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
value == 4.5
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 50 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(double):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[] one of { [48, 49, 50, 46, 51, 52, 46, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [52, 46, 53, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 8 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 13 }
this.buffer[this.size-1] == 53
this.buffer[orig(this.size)] == 52
orig(this.buffer[post(this.size)-1]) one of { 0, 51 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(float):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 2 }
this.newLine == null
value == 2.3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 49 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(float):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[] one of { [48, 49, 50, 46, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [50, 46, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 51
this.buffer[orig(this.size)] == 50
orig(this.buffer[post(this.size)-1]) one of { 0, 10 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == value
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[value]
this.newLine == this.nullText
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(value) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(value) == this.buffer[this.size]
orig(value) == this.buffer[return.size]
orig(value) == return.buffer[this.size]
orig(value) == orig(this.buffer[post(this.size)])
orig(value) == orig(this.buffer[post(this.size)-1])
orig(value) == orig(this.buffer[post(value)])
orig(value) == return.buffer[return.size]
orig(value) == orig(this.buffer[post(return.size)])
orig(value) == orig(this.buffer[post(return.size)-1])
orig(value) == orig(this.buffer[this.size])
orig(value) == orig(this.buffer[value])
this.buffer[this.size-1] == this.buffer[orig(value)]
this.buffer[return.size-1] == this.buffer[orig(value)]
this.buffer[orig(value)] == return.buffer[this.size-1]
this.buffer[orig(value)] == return.buffer[return.size-1]
this.buffer[] == [48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 48 }
this.size == 1
this.newLine == null
orig(value) == 0
this.buffer[orig(value)] == 48
orig(this.buffer[]) elements == orig(value)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
seq has only one value
seq.getClass().getName() == java.lang.String.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 115
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::EXIT475
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 122, 121, 101, 115, 83, 101, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 12
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 113
this.buffer[orig(this.size)] == 83
this.buffer[orig(this.size)-1] == 115
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[startIndex-1] == this.buffer[length]
this has only one value
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
seq has only one value
seq.getClass().getName() == java.lang.String.class
startIndex == 4
length == 3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 114
this.buffer[startIndex] == 97
this.buffer[length] == 98
this.buffer[length-1] == 111
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int):::EXIT492
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)] == this.buffer[orig(startIndex)]
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer[orig(startIndex)] == orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == return.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == orig(this.buffer[startIndex])
this.buffer[orig(startIndex)-1] == this.buffer[orig(length)]
this.buffer[orig(length)] == orig(this.buffer[post(startIndex)-1])
this.buffer[orig(length)] == orig(this.buffer[post(length)])
this.buffer[orig(length)] == return.buffer[orig(startIndex)-1]
this.buffer[orig(length)] == orig(this.buffer[startIndex-1])
this.buffer[orig(length)] == orig(this.buffer[length])
this.buffer[orig(length)-1] == orig(this.buffer[post(length)-1])
this.buffer[orig(length)-1] == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 100
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(startIndex)] == 97
this.buffer[orig(length)] == 98
this.buffer[orig(length)-1] == 111
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT458
this.newLine == orig(obj)
this.size one of { 0, 4, 8 }
orig(this.size) one of { 0, 4 }
orig(obj) == null
this.buffer[this.size] one of { 0, 44, 97 }
orig(this.buffer[this.size]) one of { 0, 97, 110 }
this.buffer[] >= orig(this.buffer[]) (elementwise)
orig(this.buffer[this.size]) in this.buffer[]
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT460
orig(obj) != null
this.buffer[orig(this.size)] one of { 54, 98, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) in this.buffer[]
this.size > orig(this.size)
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(this.size)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
orig(this.size) < this.buffer[this.size-1]
orig(this.size) < this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size] != this.buffer[orig(this.size)]
this.buffer[this.size-1] >= this.buffer[orig(this.size)]
this.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] > orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[this.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return.size-1])
(orig(obj) != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1])
(orig(obj) != null)  ==>  (orig(this.buffer[post(return.size)-1]) in this.buffer[])
(orig(obj) != null)  ==>  (orig(this.buffer[post(this.size)-1]) <= return.buffer[return.size-1])
(orig(obj) != null)  ==>  (orig(this.buffer[post(this.size)-1]) in this.buffer[])
(orig(obj) != null)  ==>  (orig(this.size) < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (orig(this.size) < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (orig(this.size) < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (orig(this.size) < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (orig(this.size) < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (return.buffer[return.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (return.buffer[return.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (return.buffer[this.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (return.buffer[this.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (return.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[orig(this.size)] <= return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[orig(this.size)] <= return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[orig(this.size)] one of { 54, 98, 102 })
(orig(obj) != null)  ==>  (this.buffer[return.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (this.buffer[return.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[return.size-1] >= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[return.size-1] >= this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[this.size-1] > orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (this.buffer[this.size-1] >= orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.buffer[this.size-1] >= this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[this.size] != this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= this.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.buffer[this.size] <= this.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.size != orig(this.buffer[post(return.size)-1]))
(orig(obj) != null)  ==>  (this.size != orig(this.buffer[post(this.size)-1]))
(orig(obj) != null)  ==>  (this.size != orig(this.buffer[this.size]))
(orig(obj) != null)  ==>  (this.size != this.buffer[this.size])
(orig(obj) != null)  ==>  (this.size < return.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.size < return.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.size < this.buffer[orig(this.size)])
(orig(obj) != null)  ==>  (this.size < this.buffer[return.size-1])
(orig(obj) != null)  ==>  (this.size < this.buffer[this.size-1])
(orig(obj) != null)  ==>  (this.size > orig(this.size))
(orig(obj) != null)  ==>  (this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(orig(obj) == null)  ==>  (orig(this.buffer[this.size]) in this.buffer[])
(orig(obj) == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 97, 110 })
(orig(obj) == null)  ==>  (orig(this.size) one of { 0, 4 })
(orig(obj) == null)  ==>  (this.buffer[] >= orig(this.buffer[]) (elementwise))
(orig(obj) == null)  ==>  (this.buffer[this.size] <= orig(this.buffer[this.size]))
(orig(obj) == null)  ==>  (this.buffer[this.size] <= this.buffer[orig(this.size)])
(orig(obj) == null)  ==>  (this.buffer[this.size] one of { 0, 44, 97 })
(orig(obj) == null)  ==>  (this.newLine == orig(obj))
(orig(obj) == null)  ==>  (this.size one of { 0, 4, 8 })
this.newLine == null
return != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size <= this.buffer[orig(this.size)]
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) <= this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::ENTER
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine.toString == str.toString
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT504
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(size(this.buffer[]))
this.newLine == orig(str)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 15 }
this.newLine == null
this.nullText has only one value
this.nullText.toString == "NULL"
orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
orig(this.size) one of { 0, 11 }
this.buffer[this.size-1] == 76
this.buffer[orig(this.size)] == 78
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT513
orig(str) != null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
(orig(str) != null)  ==>  (size(this.buffer[]) one of { 32, 35, 41 })
(orig(str) != null)  ==>  (this.newLine.toString == "#")
(orig(str) != null)  ==>  (this.newLine.toString == str.toString)
(orig(str) != null)  ==>  (this.nullText.toString one of { "NULL", "null" })
(orig(str) == null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[]))
(orig(str) == null)  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (orig(this.buffer[post(return.size)-1]) == 0)
(orig(str) == null)  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(orig(str) == null)  ==>  (orig(this.buffer[this.size]) == 0)
(orig(str) == null)  ==>  (orig(this.size) one of { 0, 11 })
(orig(str) == null)  ==>  (return.buffer[return.size-1] == 76)
(orig(str) == null)  ==>  (return.buffer[this.size-1] == 76)
(orig(str) == null)  ==>  (this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1]))
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1]))
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size]))
(orig(str) == null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size])
(orig(str) == null)  ==>  (this.buffer[orig(this.size)] == 78)
(orig(str) == null)  ==>  (this.buffer[return.size-1] == 76)
(orig(str) == null)  ==>  (this.buffer[this.size-1] == 76)
(orig(str) == null)  ==>  (this.buffer[this.size] == 0)
(orig(str) == null)  ==>  (this.newLine == null)
(orig(str) == null)  ==>  (this.newLine == orig(str))
(orig(str) == null)  ==>  (this.nullText has only one value)
(orig(str) == null)  ==>  (this.nullText.toString == "NULL")
(orig(str) == null)  ==>  (this.size one of { 4, 15 })
return != null
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine.toString == str.toString
this.newLine.toString == return.newLine.toString
this.newLine.toString == orig(this.newLine.toString)
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
str.toString == orig(str.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 6 }
this.newLine == null
this.nullText.toString == "NULL"
str.toString one of { "abcbardef", "bar", "foo" }
startIndex one of { 0, 3, 4 }
length one of { 0, 1, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[startIndex] one of { 0, 97 }
this.buffer[length] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT527
this.newLine == orig(str)
orig(this.size) == orig(startIndex)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT541
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6, 9 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 100, 111, 114 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)] == this.buffer[orig(startIndex)]
this.buffer[orig(startIndex)] == return.buffer[orig(this.size)]
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[startIndex]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[startIndex]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.size))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[startIndex]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.newLine == orig(str))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 100, 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3, 4 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[startIndex]) one of { 0, 97 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) one of { 0, 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.toString one of { "abcbardef", "bar", "foo" })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 97, 114, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.newLine == null
this.nullText.toString == "NULL"
str.toString one of { "abcbardef", "bar", "foo" }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[startIndex]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
orig(this.buffer[post(this.size)-1]) % this.size == 0
str.toString == orig(str.toString)
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
this.nullText.toString == "NULL"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::EXIT553
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 22 }
orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
orig(this.size) one of { 0, 3, 18 }
orig(str) == null
this.buffer[this.size-1] one of { 76, 111 }
this.buffer[orig(this.size)] one of { 0, 78 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::EXIT562
this.size one of { 3, 6, 25 }
orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
orig(this.size) one of { 0, 3, 22 }
this.buffer[this.size-1] one of { 111, 114, 122 }
this.buffer[orig(this.size)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(orig(str) == null)  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (orig(this.size) one of { 0, 3, 18 })
(orig(str) == null)  ==>  (this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [78, 85, 76, 76, 78, 85, 76, 76, 102, 111, 111, 78, 85, 76, 76, 98, 97, 114, 78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(str) == null)  ==>  (this.buffer[orig(this.size)] one of { 0, 78 })
(orig(str) == null)  ==>  (this.buffer[this.size-1] one of { 76, 111 })
(orig(str) == null)  ==>  (this.size one of { 3, 4, 22 })
this.newLine == null
this.nullText.toString == "NULL"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
orig(this.buffer[post(this.size)-1]) % this.size == 0
this.size != orig(this.buffer[post(this.size)-1])
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] != this.buffer[orig(this.size)]
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[startIndex]
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.nullText.toString == "NULL"
length one of { 0, 1, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[length] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::EXIT576
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(str) == null
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::EXIT590
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 111, 114 }
this.buffer[orig(startIndex)] one of { 0, 98, 102 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) elements one of { 0, 102, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 6 }
this.newLine == null
this.nullText.toString == "NULL"
orig(startIndex) one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 76, 111, 114 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[length]) % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(long):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[] one of { [48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [48, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 1 }
this.newLine == null
value == 1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 48 }
this.buffer[value] one of { 0, 13 }
this.buffer[value-1] == 48
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(long):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(value)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[value])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == return.buffer[orig(this.size)]
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[this.size])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[this.size])
this.buffer[] one of { [48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 1, 2 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 13 }
this.buffer[this.size-1] == 49
this.buffer[orig(value)] one of { 13, 49 }
this.buffer[orig(value)-1] one of { 48, 49 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == str.newLine
this.nullText == str.newLine
str.newLine == str.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[str.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 6 }
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] elements >= 0
str.size one of { 0, 3 }
str.newLine == null
size(str.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[str.size] one of { 0, 98, 102 }
str.buffer[this.size] one of { 0, 102 }
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.buffer[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::EXIT602
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
orig(this.size) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(this.size) == 0
orig(str) == null
this.buffer[this.size-1] == 76
this.buffer[orig(this.size)] == 78
orig(this.buffer[]) elements == orig(this.size)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::EXIT611
this.newLine == this.nullText
this.newLine == str.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[str.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[orig(str.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(str.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[str.size])
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6, 9 }
this.buffer[this.size-1] one of { 111, 114, 115 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == str.newLine
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == str.newLine
this.nullText == return.nullText
this.nullText == orig(this.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
str.newLine == str.nullText
str.newLine == orig(str.newLine)
str.newLine == orig(str.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(str.buffer[str.size])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.size))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(this.size)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114, 115 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size]) in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size]) one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) one of { 0, 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (size(str.buffer[]) one of { 32, 35 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[] elements >= 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(this.size)] % this.size == 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(this.size)] in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(this.size)] one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] % this.buffer[this.size-1] == 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] % this.size == 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.newLine == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.size one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(this.size)] in str.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[str.size] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == str.newLine)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 122, 121, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] elements >= 0
str.size one of { 0, 3 }
str.newLine == null
size(str.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[str.size] one of { 0, 98, 102 }
str.buffer[this.size-1] one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
str.buffer[orig(this.size)] one of { 0, 102 }
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.buffer[]
str.buffer[this.size-1] in this.buffer[]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
str.buffer[orig(this.size)] in this.buffer[]
orig(this.buffer[str.size]) in this.buffer[]
str.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
str.buffer[orig(this.size)] % this.size == 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
this.buffer[orig(this.size)] in str.buffer[]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.buffer[])
str.buffer[this.size-1] % this.buffer[this.size-1] == 0
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.newLine == str.newLine
this.nullText == str.newLine
str.newLine == str.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[str.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[startIndex]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[str.size]
this.buffer[str.size] == str.buffer[str.size]
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
str.buffer[] elements >= 0
str.size one of { 3, 9 }
str.newLine == null
length one of { 0, 1, 3 }
size(str.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[str.size] == 0
this.buffer[str.size-1] one of { 0, 111 }
this.buffer[length] one of { 0, 102 }
str.buffer[str.size-1] one of { 102, 111, 114 }
str.buffer[startIndex] one of { 0, 98, 102 }
str.buffer[length] one of { 0, 98 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT625
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.nullText has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements == 0
orig(str) == null
orig(startIndex) == 0
orig(length) == 1
this.buffer[this.size-1] == 76
this.buffer[orig(startIndex)] == 78
this.buffer[orig(length)] == 85
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT639
this.newLine == this.nullText
this.newLine == str.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(startIndex)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[startIndex])
this.buffer[orig(startIndex)] == str.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == orig(str.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(str.buffer[this.size])
this.buffer[orig(startIndex)] == orig(str.buffer[startIndex])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[str.size-1])
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 6 }
orig(length) one of { 0, 3 }
this.buffer[this.size-1] one of { 111, 114 }
this.buffer[orig(startIndex)] one of { 0, 98, 102 }
this.buffer[orig(length)] one of { 0, 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == str.newLine
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == str.newLine
this.nullText == return.nullText
this.nullText == orig(this.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
str.newLine == str.nullText
str.newLine == orig(str.newLine)
str.newLine == orig(str.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[str.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[str.size])
this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)]
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[str.size-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(length) == 1)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(str) == null)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(length)] == 85)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[this.size-1] == 76)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.nullText has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 4)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this) has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(startIndex))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[length]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(length)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[length]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(length)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer has only one value)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[length-1] == this.buffer[orig(startIndex)])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(length)-1] == 78)
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[length-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == this.buffer[orig(length)-1])
(this.buffer[] == [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.nullText.toString == "NULL")
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(length) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(length)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.nullText == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 6 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(startIndex) one of { 0, 3 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) elements one of { 0, 102, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[length]) one of { 0, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) == orig(this.buffer[str.size-1]))
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size-1]) in this.buffer[])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[str.size-1]) one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (size(str.buffer[]) one of { 35, 41 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[] elements >= 0)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(length)] one of { 0, 98 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[orig(startIndex)] one of { 0, 98, 102 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[str.size-1] one of { 102, 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size-1] one of { 111, 114 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.buffer[this.size] one of { 0, 100 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.newLine == null)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (str.size one of { 3, 9 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)])
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[str.size-1] one of { 0, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == str.newLine)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == this.nullText)
this.buffer[] one of { [78, 85, 76, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 6 }
this.newLine == null
this.nullText.toString == "NULL"
str.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
str.buffer[] elements >= 0
str.size one of { 3, 9 }
str.newLine == null
orig(startIndex) one of { 0, 3 }
size(str.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 76, 111, 114 }
this.buffer[str.size-1] one of { 0, 111 }
str.buffer[this.size] one of { 0, 100 }
str.buffer[this.size-1] one of { 111, 114 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
str.buffer[str.size-1] one of { 102, 111, 114 }
str.buffer[orig(startIndex)] one of { 0, 98, 102 }
str.buffer[orig(length)] one of { 0, 98 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
str.buffer[orig(startIndex)] in this.buffer[]
orig(this.buffer[str.size-1]) in this.buffer[]
orig(this.buffer[length]) in this.buffer[]
this.buffer[this.size-1] % this.size == 0
orig(this.buffer[post(this.size)-1]) % this.size == 0
orig(this.buffer[length]) % this.size == 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in str.buffer[]
this.buffer[orig(startIndex)] in str.buffer[]
orig(this.buffer[post(this.size)-1]) % this.buffer[this.size-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Iterable):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Iterable):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 9 }
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Object[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
array.getClass().getName() == java.lang.Object[].class
size(array[]) one of { 0, 3 }
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Object[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
array[] == orig(array[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 9 }
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.util.Iterator):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.util.Iterator):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 9 }
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(int, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.size == 0
this.newLine == null
value == 123
padChar == 45
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.buffer[] elements < value
this.size <= this.buffer[this.size]
value > width
value > this.buffer[this.size]
width < padChar
width < size(this.buffer[])-1
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(int, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.newLine == null
return has only one value
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.size)
this.buffer[] elements < orig(value)
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size < orig(value)
this.size >= orig(width)
this.size < orig(padChar)
this.size < size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= this.buffer[orig(this.size)]
orig(value) > this.buffer[orig(this.size)]
orig(width) < size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == 0
this.newLine == null
this.nullText.toString == "null"
obj.getClass().getName() == java.lang.String.class
padChar == 45
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= this.buffer[this.size]
width < padChar
width < size(this.buffer[])-1
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
this.nullText.toString == "null"
return != null
this.buffer[this.size] one of { 0, 45 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.size)
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size >= orig(width)
this.size < orig(padChar)
this.size < size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= this.buffer[this.size]
orig(this.size) <= this.buffer[orig(this.size)]
orig(width) < size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
orig(padChar) >= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(int, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.size == 0
this.newLine == null
value == 123
padChar == 45
this.buffer[this.size] one of { 0, 49 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.buffer[] elements < value
this.size <= this.buffer[this.size]
value > width
value > this.buffer[this.size]
width < padChar
width < size(this.buffer[])-1
padChar != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(int, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.newLine == null
return has only one value
this.buffer[orig(this.size)] one of { 0, 49 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= orig(this.size)
this.buffer[] elements < orig(value)
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size < orig(value)
this.size >= orig(width)
this.size < orig(padChar)
this.size < size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= this.buffer[orig(this.size)]
orig(value) > this.buffer[orig(this.size)]
orig(width) < size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
orig(padChar) != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char):::ENTER
this.size == 0
this.newLine == null
this.nullText.toString == "null"
obj.getClass().getName() == java.lang.String.class
padChar == 45
size(this.buffer[]) one of { 1, 32 }
this.buffer[this.size] one of { 0, 49, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > width
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > width
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size in this.buffer[]
this.size <= size(this.buffer[])-1
this.size <= this.buffer[this.size]
width < padChar
width <= size(this.buffer[])
width != size(this.buffer[])-1
padChar > size(this.buffer[])
padChar != this.buffer[this.size]
size(this.buffer[]) != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] >= orig(this.buffer[]) (lexically)
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.newLine == null
this.nullText.toString == "null"
return != null
size(this.buffer[]) one of { 1, 32 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.size)
this.size >= orig(this.size)
this.size >= orig(width)
this.size < orig(padChar)
this.size != size(this.buffer[])-1
this.size <= this.buffer[orig(this.size)]
orig(this.size) <= size(this.buffer[])-1
orig(this.size) <= this.buffer[orig(this.size)]
orig(width) <= size(this.buffer[])
orig(width) != size(this.buffer[])-1
orig(width) <= this.buffer[orig(this.size)]
orig(padChar) > size(this.buffer[])
orig(padChar) != this.buffer[orig(this.size)]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 != this.buffer[orig(this.size)]
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::ENTER
this.nullText == null
size(this.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 10, 13 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::EXIT432
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.newLine == null
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.size - orig(this.size) - 2 == 0
size(this.buffer[])-1 > this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::EXIT434
size(this.buffer[]) == this.buffer[this.size-1]
size(this.buffer[]) == this.buffer[return.size-1]
size(this.buffer[]) == this.buffer[orig(this.size)]
size(this.buffer[]) == return.buffer[this.size-1]
size(this.buffer[]) == return.buffer[return.size-1]
size(this.buffer[]) == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 35, 45 }
this.size == 4
this.newLine has only one value
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.buffer[]) elements one of { 0, 45 }
orig(this.size) == 3
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[orig(this.size)-1] == 45
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNewLine():::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
(this.newLine == null)  <==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.buffer[orig(this.size)])
(this.newLine == null)  <==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.buffer[this.size-1])
(this.newLine == null)  <==>  (size(this.buffer[])-1 > this.buffer[orig(this.size)])
(this.newLine == null)  <==>  (size(this.buffer[])-1 > this.buffer[this.size-1])
(this.newLine == null)  <==>  (this.buffer[orig(this.size)] == 13)
(this.newLine == null)  <==>  (this.buffer[this.size-1] < this.buffer[orig(this.size)])
(this.newLine == null)  <==>  (this.buffer[this.size-1] == 10)
(this.newLine == null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 10 })
(this.newLine == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 10, 13 })
(this.newLine == null)  ==>  (size(this.buffer[]) one of { 32, 35 })
(this.newLine == null)  ==>  (this.newLine == this.nullText)
(this.newLine == null)  ==>  (this.size - orig(this.size) - 2 == 0)
(this.newLine has only one value)  <==>  (size(this.buffer[]) == this.buffer[orig(this.size)])
(this.newLine has only one value)  <==>  (size(this.buffer[]) == this.buffer[this.size-1])
(this.newLine has only one value)  <==>  (this.buffer[orig(this.size)] == 35)
(this.newLine has only one value)  <==>  (this.buffer[this.size-1] == 35)
(this.newLine has only one value)  ==>  (orig(this) has only one value)
(this.newLine has only one value)  ==>  (orig(this.buffer[]) == [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.newLine has only one value)  ==>  (orig(this.buffer[]) elements one of { 0, 45 })
(this.newLine has only one value)  ==>  (orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)]) == 0)
(this.newLine has only one value)  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.newLine has only one value)  ==>  (orig(this.buffer[this.size-1]) == 45)
(this.newLine has only one value)  ==>  (orig(this.buffer[this.size]) == 0)
(this.newLine has only one value)  ==>  (orig(this.size) == 3)
(this.newLine has only one value)  ==>  (return has only one value)
(this.newLine has only one value)  ==>  (return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0)
(this.newLine has only one value)  ==>  (return.buffer[orig(this.size)-1] == 45)
(this.newLine has only one value)  ==>  (size(this.buffer[]) == 35)
(this.newLine has only one value)  ==>  (this.buffer has only one value)
(this.newLine has only one value)  ==>  (this.buffer[] == [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.newLine has only one value)  ==>  (this.buffer[] elements one of { 0, 35, 45 })
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0)
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)]))
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1]))
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size]))
(this.newLine has only one value)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.newLine has only one value)  ==>  (this.buffer[orig(this.size)-1] == 45)
(this.newLine has only one value)  ==>  (this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1]))
(this.newLine has only one value)  ==>  (this.newLine.toString == "#")
(this.newLine has only one value)  ==>  (this.size == 4)
this.nullText == null
return != null
size(this.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 10, 35 }
this.buffer[orig(this.size)] one of { 13, 35 }
orig(this.buffer[post(this.size)-1]) one of { 0, 10 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size > orig(this.size)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size <= this.buffer[this.size-1]
this.size < this.buffer[orig(this.size)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
this.newLine.toString == return.newLine.toString
this.newLine.toString == orig(this.newLine.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) < this.buffer[orig(this.size)]
size(this.buffer[]) >= this.buffer[this.size-1]
size(this.buffer[]) >= this.buffer[orig(this.size)]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size-1]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 > orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 > orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[this.size-1] <= this.buffer[orig(this.size)]
this.buffer[orig(this.size)] > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) <= orig(this.buffer[this.size])
25 * this.size - 25 * orig(this.size) + this.buffer[this.size-1] - 60 == 0
22 * this.size - 22 * orig(this.size) + this.buffer[orig(this.size)] - 57 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::EXIT444
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.buffer[this.size] one of { 0, 97 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::EXIT446
this.nullText != null
this.buffer[this.size] one of { 0, 44 }
this.buffer[this.size-1] one of { 76, 108 }
this.buffer[orig(this.size)] one of { 78, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 108 }
orig(this.buffer[this.size]) one of { 0, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) in this.buffer[]
this.size - orig(this.size) - 4 == 0
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(this.size)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
orig(this.size) < this.buffer[this.size-1]
orig(this.size) < this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] < this.buffer[this.size-1]
this.buffer[this.size] < this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] < this.buffer[orig(this.size)]
this.buffer[this.size-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)] > orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendNull():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
(this.nullText != null)  <==>  (this.buffer[orig(this.size)] one of { 78, 110 })
(this.nullText != null)  <==>  (this.buffer[this.size] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < return.buffer[this.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return.buffer[this.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return.size-1])
(this.nullText != null)  ==>  (org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1])
(this.nullText != null)  ==>  (orig(this.buffer[post(return.size)-1]) <= orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (orig(this.buffer[post(return.size)-1]) in this.buffer[])
(this.nullText != null)  ==>  (orig(this.buffer[post(return.size)-1]) one of { 0, 108 })
(this.nullText != null)  ==>  (orig(this.buffer[post(this.size)-1]) <= orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (orig(this.buffer[post(this.size)-1]) in this.buffer[])
(this.nullText != null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 108 })
(this.nullText != null)  ==>  (orig(this.buffer[this.size]) one of { 0, 110 })
(this.nullText != null)  ==>  (orig(this.size) < return.buffer[return.size-1])
(this.nullText != null)  ==>  (orig(this.size) < return.buffer[this.size-1])
(this.nullText != null)  ==>  (orig(this.size) < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (orig(this.size) < this.buffer[return.size-1])
(this.nullText != null)  ==>  (orig(this.size) < this.buffer[this.size-1])
(this.nullText != null)  ==>  (return.buffer[return.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (return.buffer[return.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (return.buffer[this.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (return.buffer[this.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[orig(this.size)] > return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[return.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (this.buffer[return.size-1] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.buffer[return.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (this.buffer[this.size-1] != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (this.buffer[this.size-1] < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.buffer[this.size-1] one of { 76, 108 })
(this.nullText != null)  ==>  (this.buffer[this.size] < return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] < return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] < this.buffer[return.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] < this.buffer[this.size-1])
(this.nullText != null)  ==>  (this.buffer[this.size] <= orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.buffer[this.size] <= orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.buffer[this.size] one of { 0, 44 })
(this.nullText != null)  ==>  (this.nullText.toString one of { "NULL", "null" })
(this.nullText != null)  ==>  (this.size != orig(this.buffer[post(return.size)-1]))
(this.nullText != null)  ==>  (this.size != orig(this.buffer[post(this.size)-1]))
(this.nullText != null)  ==>  (this.size != orig(this.buffer[this.size]))
(this.nullText != null)  ==>  (this.size != this.buffer[this.size])
(this.nullText != null)  ==>  (this.size - orig(this.size) - 4 == 0)
(this.nullText != null)  ==>  (this.size < return.buffer[return.size-1])
(this.nullText != null)  ==>  (this.size < return.buffer[this.size-1])
(this.nullText != null)  ==>  (this.size < this.buffer[orig(this.size)])
(this.nullText != null)  ==>  (this.size < this.buffer[return.size-1])
(this.nullText != null)  ==>  (this.size < this.buffer[this.size-1])
(this.nullText != null)  ==>  (this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.nullText == null)  <==>  (this.buffer[orig(this.size)] one of { 0, 97 })
(this.nullText == null)  <==>  (this.size == orig(this.size))
(this.nullText == null)  ==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.nullText == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 97 })
(this.nullText == null)  ==>  (orig(this.size) one of { 0, 3, 4 })
(this.nullText == null)  ==>  (this.buffer[] == orig(this.buffer[]))
(this.nullText == null)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.nullText == null)  ==>  (this.buffer[this.size] one of { 0, 97 })
(this.nullText == null)  ==>  (this.newLine == this.nullText)
(this.nullText == null)  ==>  (this.size one of { 0, 3, 4 })
this.newLine == null
return != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 44, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendPadding(int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4 }
this.newLine == null
padChar == 45
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 45, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendPadding(int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4, 20 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 45, 111 }
this.buffer[orig(this.size)] one of { 0, 45 }
this.buffer[orig(this.size)-1] one of { 45, 111 }
orig(this.buffer[post(this.size)-1]) one of { 0, 111 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
separator == 44
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
standard == 44
defaultIfEmpty == 58
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == return.buffer[orig(this.size)]
this.buffer has only one value
this.buffer[] one of { [58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 1, 5 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 44, 58 }
orig(defaultIfEmpty) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
separator == 44
loopIndex one of { -1, 0, 1 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(char, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
separator has only one value
separator.toString == ","
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
separator.toString == ","
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
separator.toString == orig(separator.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
separator has only one value
separator.toString == ","
loopIndex one of { -1, 0, 1 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
separator.toString == ","
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44 }
separator.toString == orig(separator.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
standard.toString == ","
defaultIfEmpty.toString == "order by "
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
standard.toString == ","
defaultIfEmpty.toString == "order by "
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 44, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] >= orig(this.buffer[]) (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
standard.toString == orig(standard.toString)
defaultIfEmpty.toString == orig(defaultIfEmpty.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Iterable, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == 0
this.newLine == null
this.nullText.toString == "null"
separator.toString == ","
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Iterable, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
this.nullText.toString == "null"
this.buffer[this.size] one of { 0, 97, 122 }
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 98, 97, 114, 44, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.nullText.toString == "null"
array.getClass().getName() == java.lang.Object[].class
separator.toString == ","
size(array[]) one of { 0, 3 }
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
array[] == orig(array[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
this.nullText.toString == "null"
this.buffer[this.size] one of { 0, 97, 122 }
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 44, 98, 97, 114, 44, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
separator.toString == ","
this.buffer[this.size] one of { 0, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer has only one value
this.newLine == null
return has only one value
this.buffer[this.size] one of { 0, 97, 122 }
this.buffer[orig(this.size)] one of { 0, 102 }
orig(this.buffer[this.size]) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.buffer[this.size] one of { 0, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] one of { [102, 97, 108, 115, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 7 }
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] one of { 102, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
chars has only one value
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
size(chars[]) == 3
chars[this.size] == 102
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == chars[orig(this.size)]
chars[orig(this.size)] == return.buffer[orig(this.size)]
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
return has only one value
this.buffer[this.size-1] == 10
chars[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[], int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
length == size(chars[])
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
chars has only one value
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
length == 3
chars[startIndex] == 102
chars[length-1] == 111
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer[orig(this.size)] == chars[orig(startIndex)]
this.buffer[orig(startIndex)] == chars[orig(startIndex)]
this.buffer[orig(length)-1] == chars[orig(length)-1]
chars[orig(startIndex)] == return.buffer[orig(this.size)]
chars[orig(startIndex)] == return.buffer[orig(startIndex)]
chars[orig(length)-1] == return.buffer[orig(length)-1]
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
chars[] == [102, 111, 111]
chars[] elements one of { 102, 111 }
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(length)] == 13
chars[orig(startIndex)] == 102
chars[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(double):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [50, 46, 51, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 0
this.newLine == null
value == 4.5
this.buffer[this.size] == 50
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(double):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [52, 46, 53, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 52
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(float):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 0
this.newLine == null
value == 2.3
this.buffer[this.size] == 49
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(float):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [50, 46, 51, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 50
this.buffer[this.size-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == value
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[value]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(value) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(value) == this.buffer[this.size]
orig(value) == this.buffer[return.size]
orig(value) == return.buffer[this.size]
orig(value) == orig(this.buffer[post(this.size)])
orig(value) == orig(this.buffer[post(this.size)-1])
orig(value) == orig(this.buffer[post(value)])
orig(value) == return.buffer[return.size]
orig(value) == orig(this.buffer[post(return.size)])
orig(value) == orig(this.buffer[post(return.size)-1])
orig(value) == orig(this.buffer[this.size])
orig(value) == orig(this.buffer[value])
this.buffer has only one value
this.buffer[] == [48, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
this.newLine == null
return has only one value
orig(value) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(value)] == 48
orig(this.buffer[]) elements == orig(value)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 2, 7 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 10, 102, 111, 111, 13, 10, 54, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 2, 7, 10 }
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] one of { 13, 54, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.toString == "foo"
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.toString == "foo"
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.toString == "foo"
length == 3
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.toString == "foo"
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(startIndex)] == 102
this.buffer[orig(length)] == 13
this.buffer[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
length == 3
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(java.lang.StringBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 10
this.buffer[orig(startIndex)] == 102
this.buffer[orig(length)] == 13
this.buffer[orig(length)-1] == 111
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(long):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this.buffer[this.size] == this.buffer[value-1]
this has only one value
this.buffer has only one value
this.buffer[] == [48, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 0
this.newLine == null
value == 1
this.buffer[this.size] == 48
this.buffer[value] == 13
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(long):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == this.buffer[orig(value)-1]
this.buffer[orig(this.size)] == return.buffer[orig(value)-1]
this.buffer[orig(value)] == orig(this.buffer[post(value)])
this.buffer[orig(value)] == orig(this.buffer[value])
orig(this.buffer[post(value)-1]) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [49, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
this.newLine == null
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 49
this.buffer[orig(value)] == 13
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[str.size]
this.size == this.buffer[str.size-1]
this.size == str.buffer[str.size]
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
size(str.buffer[]) == 35
str.buffer[this.size] == 102
str.buffer[str.size-1] == 111
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == str.buffer[this.size]
orig(this.size) == str.buffer[this.size-1]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(str.buffer[post(this.size)])
orig(this.size) == orig(str.buffer[post(this.size)-1])
orig(this.size) == str.buffer[str.size]
orig(this.size) == str.buffer[return.size]
orig(this.size) == str.buffer[return.size-1]
orig(this.size) == str.buffer[orig(str.size)]
orig(this.size) == orig(this.buffer[post(str.size)])
orig(this.size) == orig(this.buffer[post(str.size)-1])
orig(this.size) == orig(str.buffer[post(str.size)])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
orig(this.size) == orig(str.buffer[post(return.size)])
orig(this.size) == orig(str.buffer[post(return.size)-1])
this.buffer[str.size-1] == str.buffer[str.size-1]
this.buffer[str.size-1] == str.buffer[orig(str.size)-1]
this.buffer[str.size-1] == orig(str.buffer[post(str.size)-1])
this.buffer[str.size-1] == orig(str.buffer[str.size-1])
this.buffer[orig(this.size)] == str.buffer[orig(this.size)]
this.buffer[orig(this.size)] == orig(str.buffer[this.size])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
return has only one value
size(str.buffer[]) == 35
this.buffer[this.size-1] == 10
this.buffer[str.size] == 13
this.buffer[str.size-1] == 111
this.buffer[orig(this.size)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == startIndex
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[str.size]
this.size == this.buffer[str.size-1]
this.size == this.buffer[startIndex]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.size == str.buffer[str.size]
this.size == str.buffer[length]
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
str.size == length
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
length == 3
size(str.buffer[]) == 35
str.buffer[startIndex] == 102
str.buffer[length-1] == 111
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendln(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
str.size == orig(str.size)
str.size == orig(length)
return == orig(this)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
orig(startIndex) == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[return.size]
orig(startIndex) == str.buffer[this.size]
orig(startIndex) == str.buffer[this.size-1]
orig(startIndex) == return.buffer[this.size]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[post(this.size)-1])
orig(startIndex) == orig(str.buffer[post(this.size)])
orig(startIndex) == orig(str.buffer[post(this.size)-1])
orig(startIndex) == str.buffer[str.size]
orig(startIndex) == str.buffer[return.size]
orig(startIndex) == str.buffer[return.size-1]
orig(startIndex) == str.buffer[orig(str.size)]
orig(startIndex) == str.buffer[orig(length)]
orig(startIndex) == orig(this.buffer[post(str.size)])
orig(startIndex) == orig(this.buffer[post(str.size)-1])
orig(startIndex) == orig(str.buffer[post(str.size)])
orig(startIndex) == orig(this.buffer[post(startIndex)])
orig(startIndex) == orig(this.buffer[post(length)])
orig(startIndex) == orig(this.buffer[post(length)-1])
orig(startIndex) == orig(str.buffer[post(length)])
orig(startIndex) == return.buffer[return.size]
orig(startIndex) == orig(this.buffer[post(return.size)])
orig(startIndex) == orig(this.buffer[post(return.size)-1])
orig(startIndex) == orig(str.buffer[post(return.size)])
orig(startIndex) == orig(str.buffer[post(return.size)-1])
orig(startIndex) == orig(this.buffer[this.size])
orig(startIndex) == orig(this.buffer[str.size])
orig(startIndex) == orig(this.buffer[str.size-1])
orig(startIndex) == orig(this.buffer[startIndex])
orig(startIndex) == orig(this.buffer[length])
orig(startIndex) == orig(this.buffer[length-1])
orig(startIndex) == orig(str.buffer[str.size])
orig(startIndex) == orig(str.buffer[length])
this.buffer[str.size-1] == str.buffer[str.size-1]
this.buffer[str.size-1] == str.buffer[orig(str.size)-1]
this.buffer[str.size-1] == str.buffer[orig(length)-1]
this.buffer[str.size-1] == orig(str.buffer[post(str.size)-1])
this.buffer[str.size-1] == orig(str.buffer[post(length)-1])
this.buffer[str.size-1] == orig(str.buffer[str.size-1])
this.buffer[str.size-1] == orig(str.buffer[length-1])
this.buffer[orig(startIndex)] == str.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)]
this.buffer[orig(startIndex)] == orig(str.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(str.buffer[this.size])
this.buffer[orig(startIndex)] == orig(str.buffer[startIndex])
this.buffer has only one value
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
return has only one value
orig(startIndex) == 0
size(str.buffer[]) == 35
this.buffer[this.size-1] == 10
this.buffer[str.size] == 13
this.buffer[str.size-1] == 111
this.buffer[orig(startIndex)] == 102
orig(this.buffer[]) elements == orig(startIndex)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.clear():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == null
this.nullText.toString == "null"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.clear():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.size == 0
this.newLine == null
this.nullText.toString == "null"
return != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.size
this.size <= orig(this.size)
this.size <= this.buffer[this.size]
this.size <= this.buffer[orig(this.size)]
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.size) < size(this.buffer[])-1
orig(this.size) <= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::ENTER
capacity >= 1
org.apache.commons.lang3.text.StrBuilder.CAPACITY > capacity
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[capacity-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > capacity
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[capacity-1]
this.size <= capacity
this.size <= size(this.buffer[])-1
capacity <= size(this.buffer[])
capacity != size(this.buffer[])-1
capacity != this.buffer[this.size]
capacity != this.buffer[capacity-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[capacity-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
return != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(capacity)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(capacity)-1]
this.size <= orig(capacity)
this.size <= size(this.buffer[])-1
this.newLine.toString == return.newLine.toString
this.newLine.toString == orig(this.newLine.toString)
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(capacity) <= size(this.buffer[])
orig(capacity) != size(this.buffer[])-1
orig(capacity) != this.buffer[this.size]
orig(capacity) != this.buffer[orig(capacity)-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[orig(capacity)-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char[], int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(destination[])
this.newLine == this.nullText
startIndex == destinationIndex
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[endIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[endIndex-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[destinationIndex]
this.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9 }
this.newLine == null
startIndex one of { 0, 3 }
endIndex one of { 3, 6 }
destination[] elements one of { 0, 102, 111 }
destination[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(this.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 102, 111 }
this.buffer[startIndex] one of { 98, 102 }
this.buffer[endIndex] one of { 0, 100 }
this.buffer[endIndex-1] one of { 111, 114 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char[], int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(endIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(endIndex)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == destination[orig(endIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[post(destinationIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[endIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[endIndex-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(destination[destinationIndex])
this.buffer[orig(startIndex)] == destination[orig(startIndex)]
this.buffer[orig(endIndex)-1] == destination[orig(endIndex)-1]
this.buffer[orig(destinationIndex)] == destination[orig(startIndex)]
orig(this.buffer[post(startIndex)]) == destination[orig(startIndex)]
orig(this.buffer[post(endIndex)-1]) == destination[orig(endIndex)-1]
destination[orig(startIndex)] == orig(this.buffer[post(destinationIndex)])
destination[orig(startIndex)] == orig(this.buffer[startIndex])
destination[orig(startIndex)] == orig(this.buffer[destinationIndex])
destination[orig(endIndex)-1] == orig(this.buffer[endIndex-1])
this.buffer[] one of { [97, 98, 99, 98, 97, 114, 100, 101, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9 }
this.newLine == null
destination[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
destination[] elements >= 0
size(this.buffer[]) one of { 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 102, 111 }
this.buffer[orig(endIndex)] one of { 0, 100 }
destination[this.size-1] one of { 0, 111 }
destination[orig(startIndex)] one of { 98, 102 }
destination[orig(endIndex)-1] one of { 111, 114 }
destination[this.size-1] in this.buffer[]
this.buffer[this.size-1] in destination[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNullText():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.nullText has only one value
this.nullText.toString == "null"
this.buffer[this.size] one of { 45, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNullText():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == orig(this.newLine)
this.nullText == return
return == orig(this.nullText)
this.buffer[] one of { [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
return has only one value
return.toString == "null"
this.buffer[this.size] one of { 45, 102 }
this.nullText.toString == return.toString
return.toString == orig(this.nullText.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this has only one value
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 10 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == this.buffer[this.size]
orig(index) == this.buffer[return.size]
orig(index) == return.buffer[this.size]
orig(index) == orig(this.buffer[post(this.size)])
orig(index) == orig(this.buffer[post(this.size)-1])
orig(index) == return.buffer[return.size]
orig(index) == orig(this.buffer[post(return.size)])
orig(index) == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] one of { [102, 97, 108, 115, 101, 116, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 10, 15 }
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 97, 114 }
this.buffer[orig(this.size)-1] one of { 97, 98 }
this.buffer[orig(index)] one of { 102, 116 }
orig(this.buffer[post(index)]) == 98
orig(this.buffer[post(index)-1]) one of { 101, 114 }
orig(this.buffer[post(index)]) in this.buffer[]
orig(this.buffer[post(index)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this has only one value
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 114, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 114, 98, 97, 122, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 6
this.newLine == null
value one of { 33, 48 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 114, 122 }
this.buffer[this.size-1] == 122
this.buffer[index] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(value) == this.buffer[orig(index)]
orig(value) == return.buffer[orig(index)]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == return.buffer[orig(this.size)]
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[this.size])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [33, 98, 97, 114, 98, 97, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [48, 98, 97, 114, 98, 97, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 7
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 117
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] == 97
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 13 }
this.newLine == null
this.nullText.toString == "null"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
size(chars[]) one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 102 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::EXIT1406
this.buffer[this.size] == orig(this.buffer[this.size])
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 17 }
orig(chars) == null
this.buffer[orig(this.size)-1] one of { 97, 122 }
this.buffer[orig(index)] one of { 98, 110 }
this.buffer[orig(index)] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::EXIT1415
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == orig(this.buffer[index])
return.buffer[orig(this.size)] == orig(this.buffer[index])
orig(this.buffer[this.size]) == orig(this.buffer[index])
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9 }
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.size) == 6
this.buffer[orig(this.size)-1] one of { 114, 122 }
this.buffer[orig(index)] one of { 98, 102 }
orig(this.buffer[index]) == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
(orig(chars) == null)  ==>  (orig(this.buffer[]) one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (orig(this.buffer[index]) one of { 98, 102 })
(orig(chars) == null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 122 })
(orig(chars) == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 98 })
(orig(chars) == null)  ==>  (orig(this.size) one of { 6, 13 })
(orig(chars) == null)  ==>  (this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (this.buffer[orig(index)] in orig(this.buffer[]))
(orig(chars) == null)  ==>  (this.buffer[orig(index)] one of { 98, 110 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)-1] one of { 97, 122 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)] one of { 98, 114 })
(orig(chars) == null)  ==>  (this.buffer[this.size] == orig(this.buffer[this.size]))
(orig(chars) == null)  ==>  (this.nullText.toString == "null")
(orig(chars) == null)  ==>  (this.size one of { 6, 17 })
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9, 17 }
this.newLine == null
this.nullText.toString == "null"
chars[] elements one of { 102, 111 }
chars[] one of { [], [102, 111, 111] }
orig(index) == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 98, 114 }
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
this.buffer[orig(index)] one of { 98, 102, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 122 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
offset == length
this.buffer[index] == this.buffer[offset]
this.buffer[index] == this.buffer[length]
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 17 }
this.newLine == null
this.nullText.toString == "null"
chars[] one of { [], [97, 98, 99, 102, 111, 111, 100, 101, 102] }
offset one of { 0, 3 }
size(chars[]) one of { 0, 9 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 110 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::EXIT1432
orig(index) == orig(offset)
orig(index) == orig(length)
this.buffer[this.size] == orig(this.buffer[this.size])
this.buffer[orig(index)] == orig(this.buffer[post(index)])
this.buffer[orig(index)] == orig(this.buffer[post(offset)])
this.buffer[orig(index)] == orig(this.buffer[post(length)])
this.buffer[orig(index)] == orig(this.buffer[index])
this.buffer[orig(index)] == orig(this.buffer[offset])
this.buffer[orig(index)] == orig(this.buffer[length])
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 21 }
orig(chars) == null
this.buffer[orig(this.size)-1] one of { 97, 122 }
this.buffer[orig(index)] one of { 98, 110 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::EXIT1446
this.newLine == this.nullText
this.newLine == return.nullText
this.newLine == orig(this.nullText)
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == this.buffer[orig(offset)]
this.buffer[orig(offset)] == return.buffer[orig(this.size)]
this.buffer[orig(offset)] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9 }
return has only one value
orig(this) has only one value
orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.size) == 6
this.buffer[orig(this.size)-1] one of { 114, 122 }
this.buffer[orig(index)] one of { 98, 102 }
this.buffer[orig(offset)] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer[orig(offset)] == orig(this.buffer[post(index)])
this.buffer[orig(offset)] == orig(this.buffer[post(offset)])
this.buffer[orig(offset)] == orig(this.buffer[post(length)])
this.buffer[orig(offset)] == orig(this.buffer[index])
this.buffer[orig(offset)] == orig(this.buffer[offset])
this.buffer[orig(offset)] == orig(this.buffer[length])
(orig(chars) == null)  ==>  (orig(index) == orig(offset))
(orig(chars) == null)  ==>  (orig(offset) == 0)
(orig(chars) == null)  ==>  (orig(this.buffer[]) one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 122 })
(orig(chars) == null)  ==>  (orig(this.buffer[this.size]) one of { 0, 98 })
(orig(chars) == null)  ==>  (orig(this.size) one of { 6, 17 })
(orig(chars) == null)  ==>  (this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(orig(chars) == null)  ==>  (this.buffer[orig(index)] one of { 98, 110 })
(orig(chars) == null)  ==>  (this.buffer[orig(offset)] one of { 98, 110 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)-1] one of { 97, 122 })
(orig(chars) == null)  ==>  (this.buffer[orig(this.size)] one of { 98, 114 })
(orig(chars) == null)  ==>  (this.buffer[this.size] == orig(this.buffer[this.size]))
(orig(chars) == null)  ==>  (this.nullText.toString == "null")
(orig(chars) == null)  ==>  (this.size one of { 6, 21 })
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 110, 117, 108, 108, 102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 9, 21 }
this.newLine == null
this.nullText.toString == "null"
chars[] one of { [], [97, 98, 99, 102, 111, 111, 100, 101, 102] }
orig(index) == 0
this.buffer[this.size] one of { 0, 98 }
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 98, 114 }
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
this.buffer[orig(index)] one of { 98, 102, 110 }
this.buffer[orig(offset)] one of { 98, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 122 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
this.buffer[this.size] % this.buffer[orig(index)] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, double):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[index]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 114, 98, 97, 122, 98, 97, 122, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
value == 4.5
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] == 98
this.buffer[this.size-1] == 122
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, double):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(index)])
this.buffer[this.size] == return.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[this.size])
this.buffer[this.size] == orig(this.buffer[index])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [52, 46, 53, 98, 97, 114, 98, 97, 122, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 98
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(index)] == 52
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, float):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[this.size-1]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 114, 98, 97, 122, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
value == 2.3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] == 122
this.buffer[index] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, float):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(index)])
this.buffer[this.size] == return.buffer[orig(this.size)]
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[index])
this.buffer[this.size-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [50, 46, 51, 98, 97, 114, 98, 97, 122, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 98
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(index)] == 50
orig(this.buffer[post(this.size)-1]) == 101
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 10 }
this.newLine == null
this.nullText.toString == "null"
obj.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 110 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::EXIT1363
this.newLine == orig(obj)
this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 10 }
orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
orig(this.size) == 6
orig(obj) == null
this.buffer[orig(this.size)] one of { 0, 114 }
this.buffer[orig(this.size)-1] one of { 97, 122 }
this.buffer[orig(index)] one of { 98, 110 }
orig(this.buffer[index]) == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::EXIT1365
orig(index) == orig(this.buffer[post(this.size)-1])
orig(index) == orig(this.buffer[post(return.size)-1])
this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 9, 13 }
orig(obj) has only one value
this.buffer[orig(this.size)] == 98
this.buffer[orig(this.size)-1] == 114
this.buffer[orig(index)] == 102
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == this.buffer[this.size]
orig(index) == this.buffer[return.size]
orig(index) == return.buffer[this.size]
orig(index) == orig(this.buffer[post(this.size)])
orig(index) == return.buffer[return.size]
orig(index) == orig(this.buffer[post(return.size)])
orig(index) == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(obj) has only one value)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(index)] == 102)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)-1] == 114)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)] == 98)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 9, 13 })
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(index) == orig(this.buffer[post(this.size)-1]))
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(obj.getClass().getName()) == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[index]) one of { 98, 110 })
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) == 0)
(this.buffer[] one of { [102, 111, 111, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) one of { 6, 10 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(obj) == null)
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(index)] one of { 98, 110 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)-1] one of { 97, 122 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.buffer[orig(this.size)] one of { 0, 114 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 6, 10 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[]) == [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[index]) == 98)
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 0, 122 })
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.size) == 6)
(this.buffer[] one of { [98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [110, 117, 108, 108, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.newLine == orig(obj))
this.newLine == null
this.nullText.toString == "null"
orig(index) == 0
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)] one of { 0, 98, 114 }
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
this.buffer[orig(index)] one of { 98, 102, 110 }
orig(this.buffer[post(this.size)-1]) one of { 0, 122 }
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.nullText.toString == "null"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 122
this.buffer[index] one of { 98, 102, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[index]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[index]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] elements <= this.buffer[this.size-1]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[index]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[index]
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] > this.buffer[index]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.newLine == null
this.nullText.toString == "null"
return != null
orig(index) == 0
this.buffer[this.size] one of { 0, 98, 117 }
this.buffer[this.size-1] == 122
this.buffer[orig(this.size)-1] one of { 97, 114, 122 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(index)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(index)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= orig(index)
this.buffer[] elements <= this.buffer[this.size-1]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[index]) in this.buffer[]
this.size >= orig(this.size)
this.size > orig(index)
this.size < size(this.buffer[])-1
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size < this.buffer[orig(index)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[index])
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(this.nullText.toString)
orig(this.buffer[]) elements >= orig(index)
orig(this.buffer[]) elements <= this.buffer[this.size-1]
this.buffer[orig(this.size)] in orig(this.buffer[])
this.buffer[orig(this.size)-1] in orig(this.buffer[])
orig(this.size) > orig(index)
orig(this.size) < size(this.buffer[])-1
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) < this.buffer[orig(index)]
orig(this.size) != orig(this.buffer[post(this.size)-1])
orig(index) <= this.buffer[this.size]
orig(index) <= this.buffer[orig(this.size)]
orig(index) < this.buffer[orig(this.size)-1]
orig(index) < this.buffer[orig(index)]
orig(index) <= orig(this.buffer[post(this.size)-1])
orig(index) <= orig(this.buffer[this.size])
orig(index) < orig(this.buffer[index])
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[this.size] < this.buffer[this.size-1]
this.buffer[this.size] <= this.buffer[orig(this.size)]
this.buffer[this.size] != this.buffer[orig(this.size)-1]
this.buffer[this.size] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] <= orig(this.buffer[this.size])
this.buffer[this.size-1] >= this.buffer[orig(this.size)]
this.buffer[this.size-1] >= this.buffer[orig(this.size)-1]
this.buffer[this.size-1] > this.buffer[orig(index)]
this.buffer[this.size-1] >= orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] >= orig(this.buffer[this.size])
this.buffer[this.size-1] > orig(this.buffer[index])
this.buffer[orig(this.size)] != this.buffer[orig(this.size)-1]
this.buffer[orig(this.size)-1] != this.buffer[orig(index)]
this.buffer[orig(this.size)-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] != orig(this.buffer[index])
this.buffer[orig(index)] != orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)-1]) != orig(this.buffer[index])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, long):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == this.buffer[this.size-1]
this.buffer[index] == this.buffer[value-1]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 114, 98, 97, 122, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
this.newLine == null
value == 1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] == 122
this.buffer[index] == 98
this.buffer[value] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.insert(int, long):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == this.buffer[orig(this.size)]
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == return.buffer[orig(this.size)]
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer[orig(this.size)-1] == orig(this.buffer[value])
this.buffer[orig(index)] == this.buffer[orig(value)-1]
this.buffer[orig(index)] == return.buffer[orig(value)-1]
this.buffer[orig(value)] == orig(this.buffer[post(index)])
this.buffer[orig(value)] == orig(this.buffer[post(value)-1])
this.buffer[orig(value)] == orig(this.buffer[index])
this.buffer[orig(value)] == orig(this.buffer[value-1])
return.buffer[orig(this.size)-1] == orig(this.buffer[value])
this.buffer has only one value
this.buffer[] == [49, 98, 97, 114, 98, 97, 122, 117, 101, 98, 97, 114, 98, 97, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 7
this.newLine == null
return has only one value
orig(index) == 0
this.buffer[this.size] == 117
this.buffer[this.size-1] == 122
this.buffer[orig(index)] == 49
this.buffer[orig(value)] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT274
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == true
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT274;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT275
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9, 12 }
return == false
this.buffer[this.size-1] one of { 32, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT275;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (return == true)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 0)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == 0)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.size)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (return == false)
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size one of { 3, 9, 12 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 32, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[this.size-1]) one of { 32, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(this.size)-1] one of { 32, 111 })
(this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[this.size-1] one of { 32, 111 })
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT;condition="return == true"
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == true
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT;condition="not(return == true)"
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 114, 100, 101, 114, 32, 98, 121, 32, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9, 12 }
return == false
this.buffer[this.size-1] one of { 32, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.length():::ENTER
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.length():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == return
this.newLine == orig(this.newLine)
this.nullText == orig(this.nullText)
return == orig(this.size)
return >= 0
size(this.buffer[]) one of { 32, 35, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine.toString == orig(this.newLine.toString)
this.nullText.toString == orig(this.nullText.toString)
return < size(this.buffer[])-1
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[return]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[return]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String):::ENTER
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] elements one of { 0, 35, 45 }
this.buffer[] one of { [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4 }
this.nullText == null
newLine.toString == "#"
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 35, 45 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.newLine == return.newLine
this.newLine == orig(newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] elements one of { 0, 35, 45 }
this.buffer[] one of { [45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 4 }
this.nullText == null
newLine.toString == "#"
return has only one value
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 35, 45 }
this.newLine.toString == newLine.toString
newLine.toString == return.newLine.toString
newLine.toString == orig(newLine.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == this.nullText
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
nullText != null
nullText.toString one of { "NULL", "null" }
this.buffer[this.size] one of { 0, 45, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.nullText == return.nullText
this.nullText == orig(nullText)
return == orig(this)
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [45, 45, 45, 45, 45, 45, 45, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
this.nullText != null
nullText.toString one of { "NULL", "null" }
return != null
this.buffer[this.size] one of { 0, 45, 102 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= this.buffer[this.size]
this.nullText.toString == nullText.toString
nullText.toString == return.nullText.toString
nullText.toString == orig(nullText.toString)
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.size():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 4 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.size():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == return
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) == this.buffer[return]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [58, 102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.newLine == null
return one of { 0, 3, 4 }
this.buffer[return] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toString():::ENTER
this.newLine == null
size(this.buffer[]) one of { 1, 32, 35 }
this.size != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toString():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == orig(this.newLine)
this.nullText == orig(this.nullText)
this.newLine == null
return != null
size(this.buffer[]) one of { 1, 32, 35 }
this.size != size(this.buffer[])-1
this.nullText.toString == orig(this.nullText.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.validateIndex(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.nullText.toString == "null"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 122
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[index]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[index]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] elements <= this.buffer[this.size-1]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[index]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[index]
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] > this.buffer[index]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.validateIndex(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == orig(this.newLine)
this.nullText == orig(this.nullText)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.nullText.toString == "null"
orig(index) == 0
this.buffer[this.size-1] == 122
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(index)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(index)]
this.buffer[] elements >= orig(index)
this.buffer[] elements <= this.buffer[this.size-1]
this.size > orig(index)
this.size < size(this.buffer[])-1
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(index)]
this.nullText.toString == orig(this.nullText.toString)
orig(index) <= this.buffer[this.size]
orig(index) < this.buffer[orig(index)]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size-1] > this.buffer[orig(index)]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.toString():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.toString():::EXIT
return has only one value
return.toString == "foo"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2:::OBJECT
this.val$count[] < this.buffer[] (lexically)
this.val$count[] <= this.buffer[] (lexically)
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_String"
this.val$count has only one value
this.val$count[] elements one of { 0, 1, 2 }
this.val$count[] sorted by >=
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString < org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString
this.val$count[] elements < org.apache.commons.lang3.text.StrBuilder.CAPACITY
this.val$count[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
this.val$count[] elements <= this.size
this.val$count[] elements <= size(this.val$count[])
this.val$count[] elements < size(this.buffer[])-1
this.val$count[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.size
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != size(this.val$count[])
this.size != size(this.val$count[])-1
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_String"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.append(java.lang.String):::ENTER
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 1] }
this.val$count[] elements are equal
this.buffer[] elements one of { 0, 102, 111 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
str.toString one of { "\r\n", "foo" }
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.append(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] one of { [1, 0], [2, 1] }
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 5 }
str.toString one of { "\r\n", "foo" }
return has only one value
this.buffer[this.size-1] one of { 10, 111 }
this.buffer[orig(this.size)] one of { 13, 102 }
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.val$count[] elements one of { 0, 1 }
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$2.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [2, 1]
this.val$count[] elements one of { 1, 2 }
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[]) in this.val$count[]
size(this.val$count[])-1 in this.val$count[]
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_String_int_int"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_String_int_int"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.append(java.lang.String, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[this.size]
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[this.size] == this.buffer[startIndex]
this.val$count[this.size] == this.buffer[length]
this.val$count[this.size] == this.buffer[length-1]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str.toString == "foo"
length == 3
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.append(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(length)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[length-1])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str.toString == "foo"
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 111
this.buffer[orig(startIndex)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(startIndex) in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
orig(startIndex) in this.buffer[]
str.toString == orig(str.toString)
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$3.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StringBuffer"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StringBuffer"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.append(java.lang.StringBuffer):::ENTER
this.size == this.val$count[this.size]
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.append(java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
return has only one value
this.buffer[this.size-1] == 111
this.buffer[orig(this.size)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(this.size) in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.val$count[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$4.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StringBuffer_int_int"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StringBuffer_int_int"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.size == this.val$count[this.size]
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] == orig($hidden$2[]) (elementwise)
this.val$count[] is the reverse of orig($hidden$2[])
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
orig($hidden$2[]) elements == this.size
this.size in orig($hidden$2[])
orig($hidden$2[]) elements == this.val$count[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.append(java.lang.StringBuffer, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[this.size]
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[this.size] == this.buffer[startIndex]
this.val$count[this.size] == this.buffer[length]
this.val$count[this.size] == this.buffer[length-1]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
length == 3
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.append(java.lang.StringBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(length)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[length-1])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
return has only one value
orig(startIndex) == 0
this.buffer[this.size-1] == 111
this.buffer[orig(startIndex)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(startIndex) in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$5.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StrBuilder"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StrBuilder"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.append(org.apache.commons.lang3.text.StrBuilder):::ENTER
this.size == this.val$count[this.size]
this.newLine == str.newLine
this.newLine == str.nullText
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.val$count[this.size] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[this.size] == this.buffer[str.size]
this.val$count[this.size] == this.buffer[str.size-1]
this.val$count[this.size] == str.buffer[str.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
str.size == 3
size(str.buffer[]) == 35
str.buffer[this.size] == 102
str.buffer[str.size-1] == 111
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
this.size in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.append(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == str.size
this.size == return.size
this.size == orig(str.size)
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
orig(this.size) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(str.size)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.val$count[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[str.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[str.size-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[str.size])
this.buffer[this.size-1] == str.buffer[this.size-1]
this.buffer[this.size-1] == orig(str.buffer[post(this.size)-1])
this.buffer[this.size-1] == str.buffer[str.size-1]
this.buffer[this.size-1] == str.buffer[return.size-1]
this.buffer[this.size-1] == str.buffer[orig(str.size)-1]
this.buffer[this.size-1] == orig(str.buffer[post(str.size)-1])
this.buffer[this.size-1] == orig(str.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(str.buffer[str.size-1])
this.buffer[orig(this.size)] == str.buffer[orig(this.size)]
this.buffer[orig(this.size)] == orig(str.buffer[this.size])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
return has only one value
size(str.buffer[]) == 35
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 111
this.buffer[orig(this.size)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(this.size) in this.val$count[]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.size) in str.buffer[]
orig(this.val$count[]) elements == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.buffer[]) elements == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$6.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StrBuilder_int_int"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_StrBuilder_int_int"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.append(org.apache.commons.lang3.text.StrBuilder, int, int):::ENTER
this.size == startIndex
this.size == this.val$count[this.size]
this.newLine == str.newLine
this.newLine == str.nullText
str.size == length
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.val$count[this.size] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[this.size] == this.buffer[str.size]
this.val$count[this.size] == this.buffer[str.size-1]
this.val$count[this.size] == this.buffer[startIndex]
this.val$count[this.size] == this.buffer[length]
this.val$count[this.size] == this.buffer[length-1]
this.val$count[this.size] == str.buffer[str.size]
this.val$count[this.size] == str.buffer[length]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
length == 3
size(str.buffer[]) == 35
str.buffer[startIndex] == 102
str.buffer[length-1] == 111
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
this.size in str.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.append(org.apache.commons.lang3.text.StrBuilder, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == str.size
this.size == return.size
this.size == orig(str.size)
this.size == orig(length)
this.newLine == str.newLine
this.newLine == str.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(str.newLine)
this.newLine == orig(str.nullText)
str.buffer == orig(str.buffer)
str.buffer[] == orig(str.buffer[])
orig(startIndex) == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(this.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == str.buffer[orig(length)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[str.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(str.size)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(str.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.val$count[post(startIndex)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(startIndex)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(length)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(str.size)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(length)]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[post(return.size)])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.val$count[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.val$count[startIndex])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[str.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[str.size-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[startIndex])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length-1])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[str.size])
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(str.buffer[length])
this.buffer[this.size-1] == str.buffer[this.size-1]
this.buffer[this.size-1] == orig(str.buffer[post(this.size)-1])
this.buffer[this.size-1] == str.buffer[str.size-1]
this.buffer[this.size-1] == str.buffer[return.size-1]
this.buffer[this.size-1] == str.buffer[orig(str.size)-1]
this.buffer[this.size-1] == str.buffer[orig(length)-1]
this.buffer[this.size-1] == orig(str.buffer[post(str.size)-1])
this.buffer[this.size-1] == orig(str.buffer[post(length)-1])
this.buffer[this.size-1] == orig(str.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(str.buffer[str.size-1])
this.buffer[this.size-1] == orig(str.buffer[length-1])
this.buffer[orig(startIndex)] == str.buffer[orig(this.size)]
this.buffer[orig(startIndex)] == str.buffer[orig(startIndex)]
this.buffer[orig(startIndex)] == orig(str.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(str.buffer[this.size])
this.buffer[orig(startIndex)] == orig(str.buffer[startIndex])
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str.buffer has only one value
str.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
str.buffer[] elements one of { 0, 102, 111 }
return has only one value
orig(startIndex) == 0
size(str.buffer[]) == 35
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 111
this.buffer[orig(startIndex)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(startIndex) in this.val$count[]
str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in str.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == str.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$7.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_CharArray"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_CharArray"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.append(char[]):::ENTER
this.size == this.val$count[this.size]
size(this.val$count[]) == size(str[])-1
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
size(str[]) == 3
str[this.size] == 102
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.append(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(size(str[]))
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
str[] == orig(str[])
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) == size(str[])-1
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[]) == orig(size(str[]))-1
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[this.size-1] == str[this.size-1]
this.buffer[return.size-1] == str[this.size-1]
this.buffer[orig(this.size)] == str[orig(this.size)]
str[this.size-1] == return.buffer[this.size-1]
str[this.size-1] == return.buffer[return.size-1]
str[orig(this.size)] == return.buffer[orig(this.size)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
return has only one value
str[this.size-1] == 111
str[orig(this.size)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(this.size) in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
orig(this.size) in this.buffer[]
orig(this.val$count[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$8.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_CharArray_int_int"
this.val$count has only one value
this.val$count[] elements one of { 0, 1 }
this.val$count[] one of { [0, 0], [1, 0], [1, 1] }
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[] elements >= 0
this.size one of { 0, 3, 5 }
this.newLine == null
size(this.val$count[]) == 2
size(this.buffer[]) == 32
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::ENTER
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == "testAppendln_CharArray_int_int"
$hidden$2 has only one value
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
size($hidden$2[]) == 2
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.(org.apache.commons.lang3.text.StrBuilderAppendInsertTest, int[]):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig($hidden$2)
this.val$count[] == $hidden$2[]
this.size == $hidden$2[this.size]
$hidden$2[] == orig($hidden$2[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == $hidden$2[this.size]
this.buffer[this.size] == $hidden$2[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
$hidden$2[] == [0, 0]
$hidden$2[] elements == 0
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == $hidden$2[this.size]
$hidden$2[] elements == this.size
this.size in $hidden$2[]
$hidden$2[] elements == $hidden$2[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.append(char[], int, int):::ENTER
this.size == startIndex
this.size == this.val$count[this.size]
length == size(str[])
size(this.val$count[]) == size(str[])-1
this.val$count[this.size] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.val$count[this.size] == this.buffer[this.size]
this.val$count[this.size] == this.buffer[startIndex]
this.val$count[this.size] == this.buffer[length]
this.val$count[this.size] == this.buffer[length-1]
this.val$count[] == [0, 0]
this.val$count[] elements == 0
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str has only one value
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
length == 3
size(str[]) == 3
str[startIndex] == 102
str[length-1] == 111
this.size in this.val$count[]
this.val$count[] elements == this.size
this.val$count[] elements == this.val$count[this.size]
this.buffer[] elements == this.size
this.size in this.buffer[]
this.buffer[] elements == this.val$count[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.append(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.size == orig(size(str[]))
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
str[] == orig(str[])
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.val$count[]) == size(str[])-1
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.val$count[]) == orig(size(str[]))-1
size(this.val$count[])-1 == this.val$count[orig(this.size)]
size(this.val$count[])-1 == this.val$count[orig(startIndex)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(length)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.val$count[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[length-1])
this.buffer[this.size-1] == str[this.size-1]
this.buffer[return.size-1] == str[this.size-1]
this.buffer[orig(this.size)] == str[orig(startIndex)]
this.buffer[orig(startIndex)] == str[orig(startIndex)]
this.buffer[orig(length)-1] == str[this.size-1]
str[this.size-1] == return.buffer[this.size-1]
str[this.size-1] == return.buffer[return.size-1]
str[this.size-1] == return.buffer[orig(length)-1]
str[orig(startIndex)] == return.buffer[orig(this.size)]
str[orig(startIndex)] == return.buffer[orig(startIndex)]
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
str[] == [102, 111, 111]
str[] elements one of { 102, 111 }
return has only one value
orig(startIndex) == 0
str[this.size-1] == 111
str[orig(startIndex)] == 102
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
orig(startIndex) in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
orig(startIndex) in this.buffer[]
orig(startIndex) in orig(this.val$count[])
orig(this.val$count[]) elements == orig(startIndex)
orig(this.val$count[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) in orig(this.buffer[])
orig(this.buffer[]) elements == orig(startIndex)
orig(this.buffer[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.appendNewLine():::ENTER
this.val$count[] == [1, 0]
this.buffer[] == [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 102, 111 }
this.size == 3
this.buffer[this.size-1] == 111
size(this.val$count[])-1 in this.val$count[]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in this.val$count[]
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest$9.appendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName)
this.val$count == orig(this.val$count)
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.val$count[]) == orig(size(this.val$count[]))
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.val$count[] == [1, 1]
this.val$count[] elements == 1
this.buffer[] == [102, 111, 111, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
this.buffer[this.size-1] == 10
this.buffer[orig(this.size)] == 13
this.buffer[orig(this.size)-1] == 111
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.this.fName.toString)
size(this.val$count[])-1 in this.val$count[]
this.val$count[] elements == size(this.val$count[])-1
size(this.val$count[])-1 in orig(this.val$count[])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.val$count[])
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest:::CLASS
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP != null
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == "\r\n"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO has only one value
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO != null
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == org.apache.commons.lang3.text.StrBuilderAppendInsertTest$1.class
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest:::OBJECT
this.fName != null
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString < this.fName.toString
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.StrBuilderAppendInsertTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.StrBuilderAppendInsertTest(java.lang.String):::EXIT
this.fName == orig(name)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString < name.toString
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendAll_Array"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Array():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendAll_Array"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendAll_Collection"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Collection():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendAll_Collection"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendAll_Iterator"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendAll_Iterator():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendAll_Iterator"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadLeft"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadLeft"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadLeft_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadLeft_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadRight"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadRight"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadRight_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendFixedWidthPadRight_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendNewLine"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendNewLine():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendNewLine"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendPadding"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendPadding():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendPadding"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendSeparator_String"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendSeparator_String"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendSeparator_String_String"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendSeparator_String_String"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendSeparator_String_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_String_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendSeparator_String_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendSeparator_char"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendSeparator_char"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendSeparator_char_char"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_char():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendSeparator_char_char"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendSeparator_char_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendSeparator_char_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendSeparator_char_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendWithNullText"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendWithNullText"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendWithSeparatorsWithNullText"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendWithSeparatorsWithNullText"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendWithSeparators_Array"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendWithSeparators_Array"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendWithSeparators_Collection"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendWithSeparators_Collection"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendWithSeparators_Iterator"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendWithSeparators_Iterator"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_Boolean"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Boolean():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_Boolean"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_CharArray"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_CharArray"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_CharArray_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_CharArray_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_Object"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_Object():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_Object"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_PrimitiveNumber"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_PrimitiveNumber"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_StrBuilder"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_StrBuilder"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_StrBuilder_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_StrBuilder_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_String"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_String"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_StringBuffer"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_StringBuffer"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_StringBuffer_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_StringBuffer_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppend_String_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_String_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppend_String_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_Boolean"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Boolean():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_Boolean"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_CharArray"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_CharArray"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_CharArray_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_CharArray_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_CharArray_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_Object"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_Object():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_Object"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_PrimitiveNumber"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_PrimitiveNumber():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_PrimitiveNumber"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_StrBuilder"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_StrBuilder"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_StrBuilder_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StrBuilder_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_StrBuilder_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_String"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_String"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_StringBuffer"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_StringBuffer"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_StringBuffer_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_StringBuffer_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_StringBuffer_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAppendln_String_int_int"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppendln_String_int_int():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAppendln_String_int_int"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testInsert"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsert():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testInsert"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testInsertWithNullText"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testInsertWithNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testInsertWithNullText"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLang299"
===========================================================================
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testLang299():::EXIT
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLang299"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.SEP.toString)
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderAppendInsertTest.FOO.getClass().getName())
this.fName.toString == orig(this.fName.toString)
