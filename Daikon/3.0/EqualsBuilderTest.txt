===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == java.lang.Boolean.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
junit.framework.Assert.assertFalse(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message == null
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message != null
message.toString == "TestCase.fName cannot be null"
object != null
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNull(java.lang.Object):::ENTER
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::ENTER
message == object
message == null
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 47
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 47
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.builder.EqualsBuilderTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 47
this.fTests[].getClass().getName() == [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
size(this.fTests[]) == 47
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT276
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 30
this.fTests[].getClass().getName() == [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest]
names[] contains no nulls and has only one value, of length 30
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
orig(m) has only one value
size(this.fTests[]) == 30
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.builder.EqualsBuilderTest], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
names[].getClass().getName() one of { [java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 1, 47 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 1, 47 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.builder.EqualsBuilderTest], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.builder.EqualsBuilderTest], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
return == false
size(this.fTests[]) one of { 1, 47 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 1, 47 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.builder.EqualsBuilderTest], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.builder.EqualsBuilderTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.builder.EqualsBuilderTest], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
return == false
size(this.fTests[]) one of { 1, 47 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 47 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(this.fTests[]) one of { 1, 47 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 47 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest, org.apache.commons.lang3.builder.EqualsBuilderTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 47 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 48 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 47 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 6
runTime == 3955
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 6
return has only one value
return.toString == "3.955"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
runTime == 3955
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 6
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 6
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 47
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 6
runTime == 3955
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 6
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn != orig(this.fColumn)
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 6 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
this.fPrinter.fColumn == 6
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 47
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
this.fPrinter.fColumn == 6
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 47
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 6
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 6
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 47
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.ArrayUtils:::CLASS
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == java.lang.Object[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == java.lang.Class[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[].toString == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == java.lang.Long[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == java.lang.Short[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == java.lang.Byte[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == java.lang.Double[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == java.lang.Float[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == java.lang.Boolean[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == java.lang.Character[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::ENTER
array.getClass().getName() == java.lang.String[].class
array[] elements != null
objectToFind.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array[])-1
array.getClass().getName() != objectToFind.getClass().getName()
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT1718
return == true
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
orig(objectToFind) in array[]
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT1718;condition="return == true"
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT1719
return == false
orig(size(array[])) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT1719;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
(return == false)  ==>  (orig(size(array[])) one of { 0, 1, 2 })
(return == true)  ==>  (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1)
(return == true)  ==>  (orig(objectToFind) in array[])
(return == true)  ==>  (size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1)
array[] elements != null
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= orig(size(array[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
orig(objectToFind) in array[]
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT;condition="not(return == true)"
return == false
orig(size(array[])) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object):::ENTER
array.getClass().getName() == java.lang.String[].class
array[] elements != null
objectToFind.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array[])-1
array.getClass().getName() != objectToFind.getClass().getName()
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
array[] elements != null
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= return
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array[])-1
return >= size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1
return <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= orig(size(array[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::ENTER
startIndex == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
array.getClass().getName() == java.lang.String[].class
array[] elements != null
objectToFind.getClass().getName() == java.lang.String.class
startIndex == 0
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array[])-1
array.getClass().getName() != objectToFind.getClass().getName()
startIndex <= size(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::EXIT1634
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == return
orig(array) == null
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::EXIT1648
orig(objectToFind) == array[return]
return one of { 0, 1, 2 }
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < return
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
orig(objectToFind) in array[]
return >= orig(startIndex)
return >= size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
orig(startIndex) <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::EXIT1652
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == return
orig(size(array[])) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
orig(startIndex) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
array[] elements != null
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= return
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array[])-1
return >= size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1
return <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= orig(size(array[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ObjectUtils$Null:::CLASS
===========================================================================
org.apache.commons.lang3.ObjectUtils$Null:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.ObjectUtils$Null.Null():::EXIT
===========================================================================
org.apache.commons.lang3.ObjectUtils:::CLASS
org.apache.commons.lang3.ObjectUtils.NULL has only one value
===========================================================================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::ENTER
object1.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
object1.getClass().getName() == object2.getClass().getName()
===========================================================================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT152
===========================================================================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT152;condition="return == true"
===========================================================================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.ObjectUtils.NULL == orig(org.apache.commons.lang3.ObjectUtils.NULL)
return == true
===========================================================================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder:::CLASS
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY has only one value
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder:::OBJECT
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.EqualsBuilder():::EXIT
this.isEquals == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean, boolean):::ENTER
this.isEquals == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean, boolean):::EXIT622
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean, boolean):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean[], boolean[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
lhs[] one of { [0, 1], [1, 0], [1, 1] }
rhs[] one of { [0, 1], [1, 0], [1, 1] }
size(lhs[]) == 2
size(rhs[]) == 2
this.isEquals in lhs[]
this.isEquals in rhs[]
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean[], boolean[]):::EXIT888
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [1, 0]
this.isEquals in lhs[]
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean[], boolean[]):::EXIT892
this.isEquals == false
lhs[] == [1, 1]
lhs[] elements == true
return has only one value
orig(lhs) has only one value
orig(rhs) == null
lhs[] elements == orig(this.isEquals)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean[], boolean[]):::EXIT901
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(boolean[], boolean[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
lhs[] one of { [0, 1], [1, 0], [1, 1] }
rhs[] one of { [0, 1], [1, 0], [1, 1] }
orig(this.isEquals) in lhs[]
orig(this.isEquals) in rhs[]
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte, byte):::ENTER
this.isEquals == true
lhs >= 0
rhs >= 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte, byte):::EXIT567
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte, byte):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte[], byte[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
lhs[] elements >= 0
rhs[] one of { [0, 0], [1, 1], [5, 6] }
rhs[] elements >= 0
rhs[] sorted by <=
size(lhs[]) == 2
size(rhs[]) == 2
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte[], byte[]):::EXIT795
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5, 6]
lhs[] elements one of { 5, 6 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte[], byte[]):::EXIT799
this.isEquals == false
lhs[] == [5, 7]
lhs[] elements one of { 5, 7 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte[], byte[]):::EXIT808
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(byte[], byte[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
lhs[] elements >= 0
rhs[] one of { [0, 0], [1, 1], [5, 6] }
rhs[] elements >= 0
rhs[] sorted by <=
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char, char):::ENTER
this.isEquals == true
lhs >= 0
rhs >= 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char, char):::EXIT552
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char, char):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char[], char[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
lhs[] elements >= 0
rhs[] one of { [0, 0], [1, 1], [5, 6] }
rhs[] elements >= 0
rhs[] sorted by <=
size(lhs[]) == 2
size(rhs[]) == 2
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char[], char[]):::EXIT764
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5, 6]
lhs[] elements one of { 5, 6 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char[], char[]):::EXIT768
this.isEquals == false
lhs[] == [5, 7]
lhs[] elements one of { 5, 7 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char[], char[]):::EXIT777
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(char[], char[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
lhs[] elements >= 0
rhs[] one of { [0, 0], [1, 1], [5, 6] }
rhs[] elements >= 0
rhs[] sorted by <=
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double, double):::ENTER
this.isEquals == true
rhs >= 1.0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double, double):::EXIT587
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double, double):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double[], double[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
rhs[] one of { [1.0, 2.0], [2.0, 4.0], [5.0, 6.0] }
rhs[] sorted by <
size(lhs[]) == 2
size(rhs[]) == 2
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double[], double[]):::EXIT826
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5.0, 6.0]
lhs[] elements one of { 5.0, 6.0 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double[], double[]):::EXIT830
this.isEquals == false
lhs[] == [5.0, 7.0]
lhs[] elements one of { 5.0, 7.0 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double[], double[]):::EXIT839
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(double[], double[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
rhs[] one of { [1.0, 2.0], [2.0, 4.0], [5.0, 6.0] }
rhs[] sorted by <
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float, float):::ENTER
this.isEquals == true
rhs >= 1.0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float, float):::EXIT607
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float, float):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float[], float[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
rhs[] one of { [1.0, 2.0], [2.0, 4.0], [5.0, 6.0] }
rhs[] sorted by <
size(lhs[]) == 2
size(rhs[]) == 2
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float[], float[]):::EXIT857
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5.0, 6.0]
lhs[] elements one of { 5.0, 6.0 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float[], float[]):::EXIT861
this.isEquals == false
lhs[] == [5.0, 7.0]
lhs[] elements one of { 5.0, 7.0 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float[], float[]):::EXIT870
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(float[], float[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
rhs[] one of { [1.0, 2.0], [2.0, 4.0], [5.0, 6.0] }
rhs[] sorted by <
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int, int):::ENTER
this.isEquals == true
rhs >= 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int, int):::EXIT522
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int, int):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int[], int[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
rhs[] one of { [1, 2], [2, 4], [5, 6] }
rhs[] sorted by <
size(lhs[]) == 2
size(rhs[]) == 2
rhs[] elements >= size(lhs[])-1
rhs[] elements >= size(rhs[])-1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int[], int[]):::EXIT702
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5, 6]
lhs[] elements one of { 5, 6 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int[], int[]):::EXIT706
this.isEquals == false
lhs[] == [5, 7]
lhs[] elements one of { 5, 7 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int[], int[]):::EXIT715
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(int[], int[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
rhs[] one of { [1, 2], [2, 4], [5, 6] }
rhs[] sorted by <
rhs[] elements >= size(lhs[])-1
rhs[] elements >= size(rhs[])-1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::EXIT449
this.isEquals == orig(this.isEquals)
this.isEquals == false
orig(lhs) has only one value
orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.class
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::EXIT452
this.isEquals == orig(this.isEquals)
orig(lhs) == orig(rhs)
this.isEquals == true
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::EXIT456
this.isEquals == false
orig(this.isEquals) == true
orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::EXIT488
orig(this.isEquals) == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
size(lhs[]) one of { 1, 2, 3 }
size(rhs[]) one of { 1, 2, 3 }
lhs.getClass().getName() == rhs.getClass().getName()
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[]):::EXIT640
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[]):::EXIT644
this.isEquals == false
lhs[] has only one value, of length 3
return has only one value
orig(lhs) has only one value
orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject[].class
orig(rhs) == null
orig(size(lhs[])) == 3
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[]):::EXIT653
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long, long):::ENTER
this.isEquals == true
lhs >= 0
rhs >= 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long, long):::EXIT507
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long, long):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long[], long[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
lhs[] elements >= 0
rhs[] one of { [1, 2], [2, 4], [5, 6] }
rhs[] sorted by <
size(lhs[]) == 2
size(rhs[]) == 2
rhs[] elements >= size(lhs[])-1
rhs[] elements >= size(rhs[])-1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long[], long[]):::EXIT671
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5, 6]
lhs[] elements one of { 5, 6 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long[], long[]):::EXIT675
this.isEquals == false
lhs[] == [5, 7]
lhs[] elements one of { 5, 7 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long[], long[]):::EXIT684
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(long[], long[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
lhs[] elements >= 0
rhs[] one of { [1, 2], [2, 4], [5, 6] }
rhs[] sorted by <
rhs[] elements >= size(lhs[])-1
rhs[] elements >= size(rhs[])-1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short, short):::ENTER
this.isEquals == true
lhs >= 0
rhs >= 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short, short):::EXIT537
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short, short):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short[], short[]):::ENTER
size(lhs[]) == size(rhs[])
this.isEquals == true
lhs[] elements >= 0
rhs[] one of { [0, 0], [1, 1], [5, 6] }
rhs[] elements >= 0
rhs[] sorted by <=
size(lhs[]) == 2
size(rhs[]) == 2
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short[], short[]):::EXIT733
this.isEquals == orig(this.isEquals)
lhs[] == rhs[]
lhs[] == orig(rhs[])
orig(lhs) == orig(rhs)
this.isEquals == true
lhs[] == [5, 6]
lhs[] elements one of { 5, 6 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short[], short[]):::EXIT737
this.isEquals == false
lhs[] == [5, 7]
lhs[] elements one of { 5, 7 }
return has only one value
orig(lhs) has only one value
orig(rhs) == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short[], short[]):::EXIT746
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.append(short[], short[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
lhs[] == orig(lhs[])
rhs[] == orig(rhs[])
return == orig(this)
lhs[] elements >= 0
rhs[] one of { [0, 0], [1, 1], [5, 6] }
rhs[] elements >= 0
rhs[] sorted by <=
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.appendSuper(boolean):::ENTER
this.isEquals == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.appendSuper(boolean):::EXIT434
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.appendSuper(boolean):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
this.isEquals == orig(superEquals)
return == orig(this)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.build():::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.build():::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == orig(this.isEquals)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.getRegisterPair(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
return.getClass().getName() == org.apache.commons.lang3.tuple.ImmutablePair.class
return.getClass().getName() != orig(lhs.getClass().getName())
return.getClass().getName() != orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.getRegistry():::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.getRegistry():::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
return.getClass().getName() == java.util.HashSet.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isEquals():::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isEquals():::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return
return == orig(this.isEquals)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isEquals():::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isEquals():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT158
return == true
orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.class
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT158;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT159
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT159;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
(return == true)  ==>  (orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.class)
(return == true)  ==>  (orig(lhs.getClass().getName()) == orig(rhs.getClass().getName()))
(return == true)  ==>  (orig(rhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.class)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
return == true
orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.class
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.isRegistered(java.lang.Object, java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang3.builder.EqualsBuilder, boolean, java.lang.String[]):::ENTER
excludeFields.getClass().getName() == java.lang.String[].class
excludeFields[] elements != null
lhs.getClass().getName() != excludeFields.getClass().getName()
rhs.getClass().getName() != excludeFields.getClass().getName()
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang3.builder.EqualsBuilder, boolean, java.lang.String[]):::EXIT393
builder.isEquals == orig(builder.isEquals)
builder.isEquals == true
excludeFields[] == []
excludeFields[].toString == []
orig(lhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.class
orig(useTransients) == false
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang3.builder.EqualsBuilder, boolean, java.lang.String[]):::EXIT418
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang3.builder.EqualsBuilder, boolean, java.lang.String[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
excludeFields[] == orig(excludeFields[])
excludeFields[] elements != null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::ENTER
reflectUpToClass == null
excludeFields.getClass().getName() == java.lang.String[].class
excludeFields[] elements != null
lhs.getClass().getName() != excludeFields.getClass().getName()
rhs.getClass().getName() != excludeFields.getClass().getName()
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT327
orig(lhs) == orig(rhs)
excludeFields[] == []
excludeFields[].toString == []
return == true
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT327;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT330
excludeFields[] == []
excludeFields[].toString == []
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT330;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT353
return == orig(testTransients)
excludeFields[] == []
excludeFields[].toString == []
return == false
orig(rhs.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT353;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT368
excludeFields[] == []
excludeFields[].toString == []
return == false
orig(lhs.getClass().getName()) != orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT368;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT370
(return == false)  ==>  (excludeFields[].toString elements one of { "three", "two", "xxx" })
(return == false)  ==>  (orig(size(excludeFields[])) one of { 0, 1 })
(return == true)  ==>  (size(excludeFields[])-1 != 0)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT370;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT370;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
excludeFields[] == orig(excludeFields[])
(return == false)  ==>  (excludeFields[].toString elements one of { "three", "two", "xxx" })
(return == false)  ==>  (orig(size(excludeFields[])) one of { 0, 1 })
(return == true)  ==>  (size(excludeFields[])-1 != 0)
excludeFields[] elements != null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT;condition="return == true"
return == true
size(excludeFields[])-1 != 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[]):::EXIT;condition="not(return == true)"
excludeFields[].toString elements one of { "three", "two", "xxx" }
return == false
orig(size(excludeFields[])) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[]):::ENTER
excludeFields.getClass().getName() == java.lang.String[].class
excludeFields[] elements != null
lhs.getClass().getName() != excludeFields.getClass().getName()
rhs.getClass().getName() != excludeFields.getClass().getName()
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[]):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
excludeFields[] == orig(excludeFields[])
(return == false)  ==>  (excludeFields[].toString elements one of { "three", "two", "xxx" })
(return == false)  ==>  (orig(size(excludeFields[])) one of { 0, 1 })
(return == true)  ==>  (orig(lhs.getClass().getName()) == orig(rhs.getClass().getName()))
excludeFields[] elements != null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[]):::EXIT;condition="return == true"
return == true
orig(lhs.getClass().getName()) == orig(rhs.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[]):::EXIT;condition="not(return == true)"
excludeFields[].toString elements one of { "three", "two", "xxx" }
return == false
orig(size(excludeFields[])) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.register(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.register(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reset():::ENTER
this has only one value
this.isEquals == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.reset():::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.setEquals(boolean):::ENTER
this.isEquals == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.setEquals(boolean):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == orig(isEquals)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.unregister(java.lang.Object, java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilder.unregister(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB:::OBJECT
this has only one value
this.a == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.TestACanEqualB(int):::ENTER
a == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.TestACanEqualB(int):::EXIT
this.a == orig(a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::EXIT895
orig(this) == orig(o)
orig(o) has only one value
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::EXIT895;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::EXIT899
orig(o) has only one value
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::EXIT899;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::EXIT
this.a == orig(this.a)
return == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.getA():::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.getA():::EXIT
this.a == return
return == orig(this.a)
return == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA:::OBJECT
this has only one value
this.b == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.TestBCanEqualA(int):::ENTER
b == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.TestBCanEqualA(int):::EXIT
this.b == orig(b)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::EXIT918
orig(this) == orig(o)
orig(o) has only one value
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::EXIT918;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::EXIT920
orig(o) has only one value
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestACanEqualB.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::EXIT920;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::EXIT
this.b == orig(this.b)
return == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.getB():::ENTER
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestBCanEqualA.getB():::EXIT
this.b == return
return == orig(this.b)
return == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestEmptySubObject:::OBJECT
this.a one of { 1, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestEmptySubObject.TestEmptySubObject(int):::ENTER
a one of { 1, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestEmptySubObject.TestEmptySubObject(int):::EXIT
this.a == orig(a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject:::OBJECT
this.a >= 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.TestObject():::EXIT
this.a == 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.TestObject(int):::ENTER
a >= 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.TestObject(int):::EXIT
this.a == orig(a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::ENTER
o != null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT48
this.a == 4
return == false
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT48;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT52
this.a one of { 1, 4, 5 }
return == true
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT52;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT53
return == false
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT53;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT
this.a == orig(this.a)
(return == true)  ==>  (orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.class)
(return == true)  ==>  (this.a one of { 1, 4, 5 })
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT;condition="return == true"
this.a one of { 1, 4, 5 }
return == true
orig(o.getClass().getName()) == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.getA():::ENTER
this.a one of { 1, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.getA():::EXIT
this.a == return
return == orig(this.a)
return one of { 1, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.setA(int):::ENTER
this.a != a
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject.setA(int):::EXIT
this.a == orig(a)
this.a != orig(this.a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference:::OBJECT
this.reference == this.reference.reference.reference
this.reference.reference.one == this.one
this.reference.one.a == this.one.a
this.reference.reference.reference != null
this.reference.reference.one != null
this.reference.one != null
this.reference.one.a one of { 1, 2 }
this.one != null
this.one.a one of { 1, 2 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.TestObjectReference(int):::ENTER
one one of { 1, 2 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.TestObjectReference(int):::EXIT
this.one.a == orig(one)
this.reference == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.equals(java.lang.Object):::ENTER
this == this.reference.reference
this.one.a == 1
obj.getClass().getName() == org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.class
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.equals(java.lang.Object):::EXIT
this.reference == orig(this.reference)
this.reference == orig(this.reference.reference.reference)
this.reference.reference == orig(this)
this.reference.reference == orig(this.reference.reference)
this.reference.one == orig(this.reference.one)
this.one == orig(this.reference.reference.one)
this.one == orig(this.one)
this.one.a == orig(this.reference.one.a)
this.one.a == orig(this.one.a)
this.one.a == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.setObjectReference(org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference):::ENTER
this.reference == reference.reference.reference
this.one == reference.reference.one
this.one.a == reference.one.a
this.reference == null
reference.reference.reference == null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference.setObjectReference(org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectReference):::EXIT
this.reference == reference.reference.reference
this.reference == orig(reference)
this.reference.reference == reference.reference
this.reference.reference.reference == reference.reference.reference
this.reference.reference.one == reference.reference.one
this.reference.one == reference.one
this.one == reference.reference.one
this.one == orig(this.one)
this.one.a == reference.one.a
this.one.a == orig(this.one.a)
this.one.a == orig(reference.one.a)
reference.reference == orig(reference.reference)
reference.reference.one == orig(reference.reference.one)
reference.one == orig(reference.one)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectWithMultipleFields:::OBJECT
this.one.a == 1
this.two.a one of { 2, 3 }
this.three.a one of { 3, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int):::ENTER
one == 1
two one of { 2, 3 }
three one of { 3, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestObjectWithMultipleFields.TestObjectWithMultipleFields(int, int, int):::EXIT
this.one.a == orig(one)
this.two.a == orig(two)
this.three.a == orig(three)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject:::OBJECT
this.a one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.TestSubObject():::EXIT
this.b == this.a
this.b == 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.TestSubObject(int, int):::ENTER
a one of { 0, 1, 2 }
a < b
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.TestSubObject(int, int):::EXIT
this.b == orig(b)
this.a == orig(a)
this.b > this.a
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.getB():::ENTER
this.b == 4
this.a == 1
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.getB():::EXIT
this.b == return
this.a == orig(this.a)
return == orig(this.b)
this.a == 1
return == 4
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.setB(int):::ENTER
this.b one of { 0, 4 }
this.a one of { 1, 2 }
b one of { 4, 5 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestSubObject.setB(int):::EXIT
this.b == orig(b)
this.a == orig(this.a)
this.b one of { 4, 5 }
this.a one of { 1, 2 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTSubObject:::OBJECT
this.t one of { 0, 1, 2 }
this.a one of { 0, 1, 4 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTSubObject.TestTSubObject(int, int):::ENTER
a one of { 0, 1, 4 }
t one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTSubObject.TestTSubObject(int, int):::EXIT
this.t == orig(t)
this.a == orig(a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTTLeafObject:::OBJECT
this.leafValue one of { 0, 3, 4 }
this.tt one of { 0, 2, 3 }
this.t one of { 0, 1, 2 }
this.a one of { 0, 1, 4 }
this.leafValue != this.tt
this.leafValue != this.t
this.leafValue != this.a
this.tt >= this.t
this.tt != this.a
this.t != this.a
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTTLeafObject.TestTTLeafObject(int, int, int, int):::ENTER
a one of { 0, 1, 4 }
t one of { 0, 1, 2 }
tt one of { 0, 2, 3 }
leafValue one of { 0, 3, 4 }
a != t
a != tt
a != leafValue
t <= tt
t != leafValue
tt != leafValue
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTTLeafObject.TestTTLeafObject(int, int, int, int):::EXIT
this.leafValue == orig(leafValue)
this.tt == orig(tt)
this.t == orig(t)
this.a == orig(a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTTSubObject:::OBJECT
this.tt one of { 0, 2, 3 }
this.t one of { 0, 1, 2 }
this.a one of { 0, 1, 4 }
this.tt >= this.t
this.tt != this.a
this.t != this.a
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTTSubObject.TestTTSubObject(int, int, int):::ENTER
a one of { 0, 1, 4 }
t one of { 0, 1, 2 }
tt one of { 0, 2, 3 }
a != t
a != tt
t <= tt
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest$TestTTSubObject.TestTTSubObject(int, int, int):::EXIT
this.tt == orig(tt)
this.t == orig(t)
this.a == orig(a)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.EqualsBuilderTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.EqualsBuilderTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testAccessors():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAccessors"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testAccessors():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAccessors"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testBoolean():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testBoolean"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testBoolean():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testBoolean"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testBooleanArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testBooleanArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testBooleanArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testBooleanArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testByte():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testByte"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testByte():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testByte"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testByteArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testByteArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testByteArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testByteArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testByteArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testChar():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testChar"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testChar():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testChar"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCharArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCharArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCharArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testCharArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCharArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCyclicalObjectReferences"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testCyclicalObjectReferences():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCyclicalObjectReferences"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDouble"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDoubleArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDoubleArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDoubleArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testDoubleArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDoubleArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFloat"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testFloatArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFloatArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testFloatArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFloatArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testFloatArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFloatArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testFloatArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFloatArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testInt():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testInt"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testInt():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testIntArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIntArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testIntArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIntArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testIntArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIntArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testIntArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIntArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testLong():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLong"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testLong():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLong"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLongArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLongArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLongArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testLongArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLongArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMixedArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMixedArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMixedArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMixedArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiBooleanArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiBooleanArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiBooleanArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiBooleanArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiByteArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiByteArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiByteArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiByteArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiCharArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiCharArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiCharArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiCharArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiDoubleArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiDoubleArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiDoubleArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiDoubleArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiFloatArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiFloatArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiFloatArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiFloatArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiIntArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiIntArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiIntArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiIntArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiLongArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiLongArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiLongArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiLongArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiShortArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMultiShortArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testMultiShortArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMultiShortArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testNpeForNullElement():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testNpeForNullElement"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testNpeForNullElement():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testNpeForNullElement"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testObjectArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testObjectArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testObjectArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testObjectArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectBuild():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testObjectBuild"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectBuild():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testObjectBuild"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testRaggedArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testRaggedArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testRaggedArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testRaggedArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testReflectionEquals"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEquals():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testReflectionEquals"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship(org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, boolean):::ENTER
to.a == toBis.a
to.a == toTer.a
this has only one value
this.fName has only one value
this.fName.toString == "testReflectionHierarchyEquals"
to.a one of { 1, 4 }
to2.a one of { 2, 5 }
oToChange.a == 0
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship(org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, org.apache.commons.lang3.builder.EqualsBuilderTest$TestObject, boolean):::EXIT
this.fName == orig(this.fName)
to.a == toBis.a
to.a == toTer.a
to.a == orig(to.a)
to.a == orig(toBis.a)
to.a == orig(toTer.a)
to2.a == oToChange.a
to2.a == orig(to2.a)
this.fName has only one value
this.fName.toString == "testReflectionHierarchyEquals"
to.a one of { 1, 4 }
to2.a one of { 2, 5 }
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testReflectionEqualsExcludeFields"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testReflectionEqualsExcludeFields"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testReflectionHierarchyEquals"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testReflectionHierarchyEquals"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals(boolean):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testReflectionHierarchyEquals"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReflectionHierarchyEquals(boolean):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testReflectionHierarchyEquals"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReset():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testReset"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testReset():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testReset"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testShort():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testShort"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testShort():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testShort"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArray():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testShortArray"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArray():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testShortArray"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArrayHiddenByObject():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testShortArrayHiddenByObject"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testShortArrayHiddenByObject():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testShortArrayHiddenByObject"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testSuper():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSuper"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testSuper():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSuper"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testUnrelatedClasses():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testUnrelatedClasses"
===========================================================================
org.apache.commons.lang3.builder.EqualsBuilderTest.testUnrelatedClasses():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testUnrelatedClasses"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.builder.IDKey:::OBJECT
===========================================================================
org.apache.commons.lang3.builder.IDKey.IDKey(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.builder.IDKey.IDKey(java.lang.Object):::EXIT
this.value == orig(_value)
this.value.getClass().getName() == orig(_value.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.IDKey.equals(java.lang.Object):::ENTER
other.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
this.value.getClass().getName() != other.getClass().getName()
===========================================================================
org.apache.commons.lang3.builder.IDKey.equals(java.lang.Object):::EXIT72
===========================================================================
org.apache.commons.lang3.builder.IDKey.equals(java.lang.Object):::EXIT72;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.IDKey.equals(java.lang.Object):::EXIT
this.value == orig(this.value)
this.id == orig(this.id)
return == true
this.value.getClass().getName() == orig(this.value.getClass().getName())
this.value.getClass().getName() != orig(other.getClass().getName())
===========================================================================
org.apache.commons.lang3.builder.IDKey.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.builder.IDKey.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.builder.IDKey.hashCode():::EXIT
this.value == orig(this.value)
this.id == return
return == orig(this.id)
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.apache.commons.lang3.daikon.EqualsBuilderTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.EqualsBuilderTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair:::CLASS
org.apache.commons.lang3.tuple.ImmutablePair.serialVersionUID == org.apache.commons.lang3.tuple.Pair.serialVersionUID
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair:::OBJECT
this.left.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
this.left.getClass().getName() == this.right.getClass().getName()
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.ImmutablePair(java.lang.Object, java.lang.Object):::ENTER
left.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
left.getClass().getName() == right.getClass().getName()
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.ImmutablePair(java.lang.Object, java.lang.Object):::EXIT
this.left == orig(left)
this.right == orig(right)
this.left.getClass().getName() == orig(left.getClass().getName())
this.left.getClass().getName() == orig(right.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getLeft():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getLeft():::EXIT
this.left == return
this.right == orig(this.right)
return == orig(this.left)
return.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
this.left.getClass().getName() == return.getClass().getName()
this.right.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.left.getClass().getName())
return.getClass().getName() == orig(this.right.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getRight():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.ImmutablePair.getRight():::EXIT
this.left == orig(this.left)
this.right == return
return == orig(this.right)
return.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
this.left.getClass().getName() == return.getClass().getName()
this.right.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.left.getClass().getName())
return.getClass().getName() == orig(this.right.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.Pair:::CLASS
===========================================================================
org.apache.commons.lang3.tuple.Pair:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.tuple.ImmutablePair.class
===========================================================================
org.apache.commons.lang3.tuple.Pair.Pair():::EXIT
===========================================================================
org.apache.commons.lang3.tuple.Pair.equals(java.lang.Object):::ENTER
this.getClass().getName() == obj.getClass().getName()
===========================================================================
org.apache.commons.lang3.tuple.Pair.equals(java.lang.Object):::EXIT132
===========================================================================
org.apache.commons.lang3.tuple.Pair.equals(java.lang.Object):::EXIT132;condition="return == true"
===========================================================================
org.apache.commons.lang3.tuple.Pair.equals(java.lang.Object):::EXIT
return == true
===========================================================================
org.apache.commons.lang3.tuple.Pair.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.tuple.Pair.getKey():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.Pair.getKey():::EXIT
return.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.Pair.getValue():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.Pair.getValue():::EXIT
return.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.lang3.tuple.Pair.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.tuple.Pair.hashCode():::EXIT
org.apache.commons.lang3.tuple.Pair.serialVersionUID > return
===========================================================================
org.apache.commons.lang3.tuple.Pair.of(java.lang.Object, java.lang.Object):::ENTER
left.getClass().getName() == org.apache.commons.lang3.builder.IDKey.class
left.getClass().getName() == right.getClass().getName()
===========================================================================
org.apache.commons.lang3.tuple.Pair.of(java.lang.Object, java.lang.Object):::EXIT
return.getClass().getName() == org.apache.commons.lang3.tuple.ImmutablePair.class
return.getClass().getName() != orig(left.getClass().getName())
