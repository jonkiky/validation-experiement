===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(char, char):::ENTER
expected == actual
expected one of { 65, 66, 88 }
===========================================================================
junit.framework.Assert.assertEquals(char, char):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == java.lang.Character.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, char, char):::ENTER
expected == actual
message == null
expected one of { 65, 66, 88 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, char, char):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT61
orig(message) == orig(expected)
orig(expected) == orig(actual)
orig(expected) == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
orig(expected) != null
orig(actual) != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT78
orig(message) == orig(expected)
orig(message) == orig(actual)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
orig(expected) != null
orig(actual) != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
(orig(expected) != null)  <==>  (orig(actual) != null)
(orig(expected) == null)  <==>  (orig(actual) == null)
(orig(expected) == null)  ==>  (orig(message) == orig(actual))
(orig(expected) == null)  ==>  (orig(message) == orig(expected))
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.CharUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 23
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.CharUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 23
this.fTests[].getClass().getName() == [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
size(this.fTests[]) == 23
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 23
this.fTests[].getClass().getName() == [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest]
names[] contains no nulls and has only one value, of length 23
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 23
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 23)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 23)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 23
this.fTests[].getClass().getName() == [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest]
return == false
size(this.fTests[]) == 23
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 23)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 23)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.CharUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 23
this.fTests[].getClass().getName() == [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest]
return == false
size(this.fTests[]) == 23
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 23
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest, org.apache.commons.lang3.CharUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 24 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 23 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 23
runTime == 3536
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 23
return has only one value
return.toString == "3.536"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 3536
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 23
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 23
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 23
runTime == 3536
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 23
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.CharUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 23 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 23
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 23
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 23
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 23
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 23
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.CharUtils:::CLASS
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_STRING has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == "\000\001\002\003\004\005\006\007\010\t\n\013\014\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\036\037 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\177"
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] contains no nulls and has only one value, of length 128
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] elements != null
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].getClass().getName() elements == java.lang.String.class
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].toString == [ , , , , , , , , , 	, 
, , , , , , , , , , , , , , , , , , , , , ,  , !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, :, ;, <, =, >, ?, @, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, [, \, ], ^, _, `, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, {, |, }, ~, ]
org.apache.commons.lang3.CharUtils.CHAR_ARRAY has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == java.lang.Character[].class
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] contains no nulls and has only one value, of length 128
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] elements != null
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[].getClass().getName() == [java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character, java.lang.Character]
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[].getClass().getName() elements == java.lang.Character.class
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == 128
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[org.apache.commons.lang3.CharUtils.LF] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[org.apache.commons.lang3.CharUtils.LF-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[org.apache.commons.lang3.CharUtils.CR] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[org.apache.commons.lang3.CharUtils.CR-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[org.apache.commons.lang3.CharUtils.LF] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[org.apache.commons.lang3.CharUtils.LF-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[org.apache.commons.lang3.CharUtils.CR] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[org.apache.commons.lang3.CharUtils.CR-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName()
===========================================================================
org.apache.commons.lang3.CharUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.CharUtils.CharUtils():::EXIT
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::ENTER
ch != size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT424
return == true
orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT424;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT425
return == false
orig(ch) == 169
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT425;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == false)  <==>  (orig(ch) == 169)
(return == true)  <==>  (orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
orig(ch) != size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT;condition="return == true"
return == true
orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAscii(char):::EXIT;condition="not(return == true)"
return == false
orig(ch) == 169
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT481
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT481;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT482
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT482;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == true)  ==>  (orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlpha(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT519
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT519;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT520
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT520;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == true)  ==>  (orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaLower(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT500
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT500;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT501
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT501;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == true)  ==>  (orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphaUpper(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT557
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT557;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT558
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT558;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == true)  ==>  (orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiAlphanumeric(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT462
return == false
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) != size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT462;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT463
return == true
orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT463;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == false)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == false)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == false)  ==>  (orig(ch) != size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
(return == true)  ==>  (orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT;condition="return == true"
return == true
orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiControl(char):::EXIT;condition="not(return == true)"
return == false
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) != size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT538
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT538;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT539
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT539;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == true)  ==>  (orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiNumeric(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT443
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT443;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT444
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT444;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(return == true)  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
(return == true)  ==>  (orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT;condition="return == true"
return == true
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.Character):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.Character):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
return one of { 65, 66 }
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.Character, char):::ENTER
defaultValue == 88
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[defaultValue] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[defaultValue-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[defaultValue] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[defaultValue-1] has only one value
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.Character, char):::EXIT172
return == orig(defaultValue)
return == 88
orig(ch) == null
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return-1] has only one value
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.Character, char):::EXIT174
return one of { 65, 66 }
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.Character, char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == 88)  <==>  (return == orig(defaultValue))
(return == 88)  ==>  (org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return-1] has only one value)
(return == 88)  ==>  (org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return] has only one value)
(return == 88)  ==>  (org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return-1] has only one value)
(return == 88)  ==>  (org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return] has only one value)
(return == 88)  ==>  (orig(ch) == null)
return one of { 65, 66, 88 }
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[orig(defaultValue)] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[orig(defaultValue)-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[orig(defaultValue)] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[orig(defaultValue)-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.String):::ENTER
str.toString one of { "A", "BA" }
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.String):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
str.toString one of { "A", "BA" }
return one of { 65, 66 }
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.String, char):::ENTER
str.toString one of { "", "A", "BA" }
defaultValue == 88
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[defaultValue] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[defaultValue-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[defaultValue] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[defaultValue-1] has only one value
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.String, char):::EXIT217
return == orig(defaultValue)
str.toString == ""
return == 88
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return-1] has only one value
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.String, char):::EXIT219
str.toString one of { "A", "BA" }
return one of { 65, 66 }
===========================================================================
org.apache.commons.lang3.CharUtils.toChar(java.lang.String, char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(str.toString == "")  <==>  (return == 88)
(str.toString == "")  <==>  (return == orig(defaultValue))
(str.toString == "")  ==>  (org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return-1] has only one value)
(str.toString == "")  ==>  (org.apache.commons.lang3.CharUtils.CHAR_ARRAY[return] has only one value)
(str.toString == "")  ==>  (org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return-1] has only one value)
(str.toString == "")  ==>  (org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[return] has only one value)
(str.toString one of { "A", "BA" })  <==>  (return one of { 65, 66 })
str.toString one of { "", "A", "BA" }
return one of { 65, 66, 88 }
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[orig(defaultValue)] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[orig(defaultValue)-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[orig(defaultValue)] has only one value
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[orig(defaultValue)-1] has only one value
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(char):::EXIT107
return == org.apache.commons.lang3.CharUtils.CHAR_ARRAY[orig(ch)]
return in org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]
orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(char):::EXIT109
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == org.apache.commons.lang3.CharUtils.CHAR_ARRAY[ch])
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == org.apache.commons.lang3.CharUtils.CHAR_ARRAY[orig(ch)])
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[ch]))
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[post(ch)]))
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return in org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
(orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]))  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]))  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(java.lang.String):::ENTER
str.toString one of { "", "a", "abc" }
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(java.lang.String):::EXIT131
str.toString == ""
return == null
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(java.lang.String):::EXIT133
str.toString one of { "a", "abc" }
return has only one value
return in org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]
===========================================================================
org.apache.commons.lang3.CharUtils.toCharacterObject(java.lang.String):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(str.toString == "")  <==>  (return == null)
(str.toString one of { "a", "abc" })  <==>  (return has only one value)
(str.toString one of { "a", "abc" })  ==>  (return in org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
str.toString one of { "", "a", "abc" }
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(char):::ENTER
org.apache.commons.lang3.CharUtils.LF < ch
org.apache.commons.lang3.CharUtils.CR < ch
ch < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.LF > return
org.apache.commons.lang3.CharUtils.CR > return
return - orig(ch) + 48 == 0
return < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(char, int):::ENTER
defaultValue == -1
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(char, int):::EXIT262
return == orig(defaultValue)
return == -1
orig(ch) one of { 65, 97 }
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(char, int):::EXIT264
return one of { 0, 3 }
orig(ch) one of { 48, 51 }
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(char, int):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == -1)  <==>  (orig(ch) one of { 65, 97 })
(return == -1)  <==>  (return == orig(defaultValue))
(return one of { 0, 3 })  <==>  (orig(ch) one of { 48, 51 })
return one of { -1, 0, 3 }
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
return one of { 0, 3 }
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character, int):::ENTER
defaultValue == -1
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character, int):::EXIT308
return == orig(defaultValue)
return == -1
orig(ch) == null
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character, int):::EXIT310
===========================================================================
org.apache.commons.lang3.CharUtils.toIntValue(java.lang.Character, int):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
return one of { -1, 0, 3 }
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toString(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.toString(char):::EXIT330
return == org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[orig(ch)]
return in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]
return.toString in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].toString
orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.toString(char):::EXIT332
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString < return.toString
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
===========================================================================
org.apache.commons.lang3.CharUtils.toString(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[ch])
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[orig(ch)])
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[ch]))
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[post(ch)]))
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
(orig(ch) <= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1)  ==>  (return.toString in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].toString)
(orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]))  ==>  (org.apache.commons.lang3.CharUtils.CHAR_STRING.toString < return.toString)
(orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]))  ==>  (org.apache.commons.lang3.CharUtils.CR < orig(ch))
(orig(ch) >= size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]))  ==>  (org.apache.commons.lang3.CharUtils.LF < orig(ch))
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString != return.toString
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.toString(java.lang.Character):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.toString(java.lang.Character):::EXIT354
return == null
orig(ch) == null
===========================================================================
org.apache.commons.lang3.CharUtils.toString(java.lang.Character):::EXIT356
return has only one value
orig(ch) has only one value
return in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]
===========================================================================
org.apache.commons.lang3.CharUtils.toString(java.lang.Character):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == null)  <==>  (orig(ch) == null)
(return has only one value)  <==>  (orig(ch) has only one value)
(return has only one value)  ==>  (return in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
(return has only one value)  ==>  (return.toString == "A")
(return has only one value)  ==>  (return.toString in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].toString)
return.toString == "A"
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
return.toString in org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[].toString
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(char):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(char):::EXIT375
orig(ch) < size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])-1
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(char):::EXIT377
org.apache.commons.lang3.CharUtils.LF < orig(ch)
org.apache.commons.lang3.CharUtils.CR < orig(ch)
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(char):::EXIT379
return has only one value
return.toString == "\\u0999"
orig(ch) == 2457
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(char):::EXIT381
return has only one value
return.toString == "\\u1001"
orig(ch) == 4097
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(char):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString < return.toString
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(java.lang.Character):::ENTER
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(java.lang.Character):::EXIT402
return == null
orig(ch) == null
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(java.lang.Character):::EXIT404
return has only one value
orig(ch) has only one value
===========================================================================
org.apache.commons.lang3.CharUtils.unicodeEscaped(java.lang.Character):::EXIT
org.apache.commons.lang3.CharUtils.CHAR_STRING == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[])
org.apache.commons.lang3.CharUtils.CHAR_ARRAY == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY)
org.apache.commons.lang3.CharUtils.CHAR_ARRAY[] == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[])
size(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY[]) == orig(size(org.apache.commons.lang3.CharUtils.CHAR_ARRAY[]))
(return == null)  <==>  (orig(ch) == null)
(return has only one value)  <==>  (orig(ch) has only one value)
(return has only one value)  ==>  (return.toString == "\\u0041")
return.toString == "\\u0041"
org.apache.commons.lang3.CharUtils.CHAR_STRING.toString == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING.toString)
org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.CharUtils.CHAR_ARRAY.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharUtilsTest:::CLASS
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A has only one value
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A != null
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B has only one value
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B != null
===========================================================================
org.apache.commons.lang3.CharUtilsTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.CharUtilsTest.CharUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.CharUtilsTest.CharUtilsTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testConstructor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testConstructor():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testConstructor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaLower_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiAlphaLower_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaLower_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiAlphaLower_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaUpper_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiAlphaUpper_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphaUpper_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiAlphaUpper_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiAlpha_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlpha_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiAlpha_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiAlphanumeric_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiAlphanumeric_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiAlphanumeric_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiControl_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiControl_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiControl_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiControl_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiNumeric_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiNumeric_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiNumeric_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiNumeric_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiPrintable_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAsciiPrintable_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAsciiPrintable_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAsciiPrintable_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAscii_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsAscii_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testIsAscii_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsAscii_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_Character():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToChar_Character"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_Character():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToChar_Character"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_Character_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToChar_Character_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_Character_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToChar_Character_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToChar_String"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_String():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToChar_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_String_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToChar_String_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToChar_String_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToChar_String_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_String():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToCharacterObject_String"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_String():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToCharacterObject_String"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToCharacterObject_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToCharacterObject_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToCharacterObject_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToIntValue_Character"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToIntValue_Character"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToIntValue_Character_int"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_Character_int():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToIntValue_Character_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToIntValue_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToIntValue_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_char_int():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToIntValue_char_int"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToIntValue_char_int():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToIntValue_char_int"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToString_Character():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToString_Character"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToString_Character():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToString_Character"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToString_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToString_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToString_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToString_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_Character():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToUnicodeEscaped_Character"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_Character():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToUnicodeEscaped_Character"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_char():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToUnicodeEscaped_char"
===========================================================================
org.apache.commons.lang3.CharUtilsTest.testToUnicodeEscaped_char():::EXIT
org.apache.commons.lang3.CharUtilsTest.CHARACTER_A == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_A)
org.apache.commons.lang3.CharUtilsTest.CHARACTER_B == orig(org.apache.commons.lang3.CharUtilsTest.CHARACTER_B)
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToUnicodeEscaped_char"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != cs.getClass().getName()
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT184
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT184;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
(return == false)  ==>  (org.apache.commons.lang3.StringUtils.sunAvailable == return)
(return == true)  ==>  (org.apache.commons.lang3.StringUtils.java6Available == return)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != orig(cs.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="return == true"
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.daikon.CharUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.CharUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
