===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected == actual
expected != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
expected == actual
message == null
expected != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNull(java.lang.Object):::ENTER
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::ENTER
message == object
message == null
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
test.fName.toString == orig(test.fName.toString)
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 6
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 6
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.reflect.ConstructorUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 6
this.fTests[].getClass().getName() == [org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
size(this.fTests[]) == 6
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
size(this.fTests[]) one of { 0, 1, 6 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 0, 1, 6 })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 1, 6 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 0, 1, 6 })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
size(this.fTests[]) one of { 0, 1, 6 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 6 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 6
result.fStop == false
size(this.fTests[]) one of { 1, 6 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 6 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest, org.apache.commons.lang3.reflect.ConstructorUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 6 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 7 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 6 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 6
runTime == 2369
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 6
return has only one value
return.toString == "2.369"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 2369
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 6
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 6
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 6
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 6
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 6
runTime == 2369
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 6
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 6 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 6
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 6
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 6
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 6
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 6
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.ArrayUtils:::CLASS
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == java.lang.Object[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == java.lang.Class[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[].toString == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == java.lang.Long[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == java.lang.Short[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == java.lang.Byte[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == java.lang.Double[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == java.lang.Float[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == java.lang.Boolean[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == java.lang.Character[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::ENTER
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(array1[])-1
array1[] elements != null
array2[] elements != null
size(array1[]) == 1
size(array2[]) one of { 0, 1 }
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == array1.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == array2.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array2[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array2[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) >= size(array2[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array2[])-1
size(array1[]) >= size(array2[])
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT1195
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == array2[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(array2[])
return == false
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT1195;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT1197
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(array2[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(array2[]))-1
orig(size(array1[])) == orig(size(array2[]))
return == true
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT1197;condition="return == true"
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array1[] == orig(array1[])
array2[] == orig(array2[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(array1[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(array1[]))-1
(return == false)  <==>  (org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == size(array2[])-1)
(return == false)  ==>  (array2[] == [])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] is the reverse of array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == array2[])
(return == false)  ==>  (org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] is the reverse of array2[])
(return == true)  <==>  (orig(size(array1[])) == orig(size(array2[])))
(return == true)  <==>  (orig(size(array2[])) == 1)
(return == true)  <==>  (size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(array2[])-1)
array1[] elements != null
array2[] elements != null
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(array1.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(array2.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND <= size(array2[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) >= size(array2[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= orig(size(array2[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1 <= size(array2[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT;condition="return == true"
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(array2[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(array2[]))-1
orig(size(array1[])) == orig(size(array2[]))
return == true
===========================================================================
org.apache.commons.lang3.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[]):::EXIT;condition="not(return == true)"
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == array2[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(array2[])
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils:::CLASS
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR has only one value
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == "."
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR has only one value
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == "$"
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap has only one value
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == java.util.HashMap.class
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap has only one value
org.apache.commons.lang3.ClassUtils.abbreviationMap has only one value
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap has only one value
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString > org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName()
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName()
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName()
===========================================================================
org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String):::ENTER
primitive.toString > abbreviation.toString
===========================================================================
org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String):::EXIT
primitive.toString > abbreviation.toString
primitive.toString == orig(primitive.toString)
abbreviation.toString == orig(abbreviation.toString)
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::ENTER
autoboxing == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT612
return == orig(autoboxing)
return == true
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT612;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT624
return == false
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT624;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT625
return == orig(autoboxing)
return == true
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT625;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT628
return == false
orig(cls) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT628;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT631
return == false
orig(cls) has only one value
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT631;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT634
(return == true)  ==>  (return == orig(autoboxing))
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT634;condition="return == true"
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT634;condition="not(return == true)"
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT638
return == orig(autoboxing)
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT638;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT644
return == orig(autoboxing)
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT644;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT650
return == orig(autoboxing)
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT650;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT658
(return == true)  ==>  (orig(toClass) has only one value)
(return == true)  ==>  (return == orig(autoboxing))
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT658;condition="return == true"
orig(toClass) has only one value
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT658;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
(return == true)  ==>  (return == orig(autoboxing))
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT;condition="return == true"
return == orig(autoboxing)
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::ENTER
classArray.getClass().getName() == java.lang.Class[].class
classArray[] elements != null
toClassArray[] elements != null
autoboxing == true
size(classArray[]) == 1
size(toClassArray[]) one of { 0, 1 }
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR_CHAR > size(toClassArray[])
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR_CHAR > size(toClassArray[])
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() != classArray.getClass().getName()
classArray.getClass().getName() == toClassArray.getClass().getName()
size(classArray[]) >= size(toClassArray[])
size(classArray[])-1 <= size(toClassArray[])
size(classArray[])-1 >= size(toClassArray[])-1
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT510
size(classArray[])-1 == orig(size(toClassArray[]))
toClassArray[] == []
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT510;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT520
orig(size(classArray[])) == orig(size(toClassArray[]))
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT520;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT523
return == orig(autoboxing)
orig(size(classArray[])) == orig(size(toClassArray[]))
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT523;condition="return == true"
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
classArray[] == orig(classArray[])
toClassArray[] == orig(toClassArray[])
(return == false)  ==>  (orig(size(toClassArray[])) one of { 0, 1 })
(return == true)  ==>  (orig(size(classArray[])) == orig(size(toClassArray[])))
(return == true)  ==>  (orig(size(toClassArray[])) == 1)
(return == true)  ==>  (return == orig(autoboxing))
classArray[] elements != null
toClassArray[] elements != null
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() != orig(classArray.getClass().getName())
size(classArray[])-1 >= size(toClassArray[])-1
size(classArray[])-1 <= orig(size(toClassArray[]))
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT;condition="return == true"
return == orig(autoboxing)
orig(size(classArray[])) == orig(size(toClassArray[]))
return == true
===========================================================================
org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.ClassUtils.wrapperToPrimitive(java.lang.Class):::EXIT
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap)
org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap)
org.apache.commons.lang3.ClassUtils.abbreviationMap == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap)
org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap)
org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.PACKAGE_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString == orig(org.apache.commons.lang3.ClassUtils.INNER_CLASS_SEPARATOR.toString)
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.wrapperPrimitiveMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.abbreviationMap.getClass().getName())
org.apache.commons.lang3.ClassUtils.primitiveWrapperMap.getClass().getName() == orig(org.apache.commons.lang3.ClassUtils.reverseAbbreviationMap.getClass().getName())
===========================================================================
org.apache.commons.lang3.daikon.ConstructorUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.ConstructorUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class[]):::ENTER
parameterTypes.getClass().getName() == java.lang.Class[].class
size(parameterTypes[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class[]):::EXIT212
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class[]):::EXIT214
return == null
orig(cls) has only one value
orig(size(parameterTypes[])) == 1
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class[]):::EXIT
parameterTypes[] == orig(parameterTypes[])
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.reflect.Constructor):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.reflect.Constructor):::EXIT
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[]):::ENTER
cls has only one value
parameterTypes.getClass().getName() == java.lang.Class[].class
parameterTypes[] elements != null
size(parameterTypes[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[]):::EXIT257
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[]):::EXIT286
orig(size(parameterTypes[])) == 1
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[]):::EXIT
parameterTypes[] == orig(parameterTypes[])
parameterTypes[] elements != null
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[]):::ENTER
cls has only one value
size(args[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[]):::EXIT
return.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.class
return.getClass().getName() != orig(args.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]):::ENTER
size(args[]) == size(parameterTypes[])
cls has only one value
parameterTypes.getClass().getName() == java.lang.Class[].class
size(args[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]):::EXIT
args[] == orig(args[])
parameterTypes[] == orig(parameterTypes[])
return.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.class
return.getClass().getName() != orig(args.getClass().getName())
return.getClass().getName() != orig(parameterTypes.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[]):::ENTER
cls has only one value
size(args[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[]):::EXIT
return.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.class
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]):::ENTER
size(args[]) == size(parameterTypes[])
cls has only one value
parameterTypes.getClass().getName() == java.lang.Class[].class
size(args[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[]):::EXIT
args[] == orig(args[])
parameterTypes[] == orig(parameterTypes[])
return.getClass().getName() == org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.class
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean:::OBJECT
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean():::EXIT
this.toString has only one value
this.toString.toString == "()"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(double):::ENTER
d == 1.0
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(double):::EXIT
this.toString has only one value
this.toString.toString == "(double)"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(int):::ENTER
i == 1
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(int):::EXIT
this.toString has only one value
this.toString.toString == "(int)"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(java.lang.Integer):::ENTER
i has only one value
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(java.lang.Integer):::EXIT
this.toString has only one value
this.toString.toString == "(Integer)"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(java.lang.Object):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(java.lang.Object):::EXIT
this.toString has only one value
this.toString.toString == "(Object)"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(java.lang.String):::ENTER
s has only one value
s.toString == ""
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.TestBean(java.lang.String):::EXIT
this.toString has only one value
this.toString.toString == "(String)"
s.toString == ""
s.toString == orig(s.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.toString():::ENTER
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest$TestBean.toString():::EXIT
this.toString == return
return == orig(this.toString)
this.toString.toString == return.toString
return.toString == orig(this.toString.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest:::OBJECT
this.classCache != null
this.classCache.getClass().getName() == java.util.HashMap.class
this.fName != null
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.ConstructorUtilsTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.ConstructorUtilsTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.expectMatchingAccessibleConstructorParameterTypes(java.lang.Class, java.lang.Class[], java.lang.Class[]):::ENTER
size(requestTypes[]) == size(actualTypes[])
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
cls has only one value
cls != null
requestTypes.getClass().getName() == java.lang.Class[].class
requestTypes[] elements != null
actualTypes != null
actualTypes.getClass().getName() == java.lang.Class[].class
actualTypes[] elements != null
size(requestTypes[]) one of { 0, 1 }
size(actualTypes[]) one of { 0, 1 }
this.classCache.getClass().getName() != requestTypes.getClass().getName()
this.classCache.getClass().getName() != actualTypes.getClass().getName()
requestTypes.getClass().getName() == actualTypes.getClass().getName()
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.expectMatchingAccessibleConstructorParameterTypes(java.lang.Class, java.lang.Class[], java.lang.Class[]):::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
requestTypes[] == orig(requestTypes[])
actualTypes[] == orig(actualTypes[])
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
requestTypes[] elements != null
actualTypes[] elements != null
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.classCache.getClass().getName() != orig(requestTypes.getClass().getName())
this.classCache.getClass().getName() != orig(actualTypes.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.setUp():::ENTER
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.setUp():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.singletonArray(java.lang.Class):::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
c != null
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.singletonArray(java.lang.Class):::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
return != null
return.getClass().getName() == java.lang.Class[].class
return[] elements != null
size(return[]) == 1
this.classCache.getClass().getName() != return.getClass().getName()
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
orig(c) in return[]
return[] elements == orig(c)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testConstructor():::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testConstructor():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor():::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetAccessibleConstructor"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructor():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetAccessibleConstructor"
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructorFromDescription():::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetAccessibleConstructorFromDescription"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetAccessibleConstructorFromDescription():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetAccessibleConstructorFromDescription"
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod():::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testGetMatchingAccessibleMethod():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor():::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testInvokeConstructor"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeConstructor():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testInvokeConstructor"
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor():::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testInvokeExactConstructor"
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.testInvokeExactConstructor():::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testInvokeExactConstructor"
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.toString(java.lang.Class[]):::ENTER
this has only one value
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
c != null
c.getClass().getName() == java.lang.Class[].class
c[] elements != null
size(c[]) one of { 0, 1 }
this.classCache.getClass().getName() != c.getClass().getName()
===========================================================================
org.apache.commons.lang3.reflect.ConstructorUtilsTest.toString(java.lang.Class[]):::EXIT
this.classCache == orig(this.classCache)
this.fName == orig(this.fName)
c[] == orig(c[])
this.classCache has only one value
this.fName has only one value
this.fName.toString == "testGetMatchingAccessibleMethod"
c[] elements != null
return != null
this.classCache.getClass().getName() == orig(this.classCache.getClass().getName())
this.classCache.getClass().getName() != orig(c.getClass().getName())
this.fName.toString > return.toString
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils:::CLASS
org.apache.commons.lang3.reflect.MemberUtils.ACCESS_TEST == size(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES has only one value
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == java.lang.Class[].class
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] contains no nulls and has only one value, of length 7
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] elements != null
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[].getClass().getName() == [java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class, java.lang.Class]
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[].getClass().getName() elements == java.lang.Class.class
size(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[]) == 7
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[org.apache.commons.lang3.reflect.MemberUtils.ACCESS_TEST-1] has only one value
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(java.lang.Class[], java.lang.Class[], java.lang.Class[]):::ENTER
size(left[]) == size(right[])
size(left[]) == size(actual[])
left[] elements != null
right[] elements != null
actual[] elements != null
size(left[]) == 1
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == left.getClass().getName()
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == right.getClass().getName()
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == actual.getClass().getName()
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.compareParameterTypes(java.lang.Class[], java.lang.Class[], java.lang.Class[]):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
left[] == orig(left[])
right[] == orig(right[])
actual[] == orig(actual[])
left[] elements != null
right[] elements != null
actual[] elements != null
return == -1
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(left.getClass().getName())
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(right.getClass().getName())
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(actual.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(java.lang.Class, java.lang.Class):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(java.lang.Class, java.lang.Class):::EXIT133
orig(destClass) in org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[]
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(java.lang.Class, java.lang.Class):::EXIT156
return one of { 1.0, 2.0, 2.5 }
orig(destClass) has only one value
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getObjectTransformationCost(java.lang.Class, java.lang.Class):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
(return one of { 1.0, 2.0, 2.5 })  ==>  (orig(destClass) has only one value)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getPrimitivePromotionCost(java.lang.Class, java.lang.Class):::ENTER
destClass in org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[]
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getPrimitivePromotionCost(java.lang.Class, java.lang.Class):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
orig(destClass) in org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[]
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getTotalTransformationCost(java.lang.Class[], java.lang.Class[]):::ENTER
size(srcArgs[]) == size(destArgs[])
srcArgs[] elements != null
destArgs[] elements != null
size(srcArgs[]) == 1
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == srcArgs.getClass().getName()
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == destArgs.getClass().getName()
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.getTotalTransformationCost(java.lang.Class[], java.lang.Class[]):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
srcArgs[] == orig(srcArgs[])
destArgs[] == orig(destArgs[])
srcArgs[] elements != null
destArgs[] elements != null
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(srcArgs.getClass().getName())
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(destArgs.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isAccessible(java.lang.reflect.Member):::ENTER
m.getClass().getName() == java.lang.reflect.Constructor.class
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() != m.getClass().getName()
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isAccessible(java.lang.reflect.Member):::EXIT84
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isAccessible(java.lang.reflect.Member):::EXIT84;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isAccessible(java.lang.reflect.Member):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
return == true
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() != orig(m.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isAccessible(java.lang.reflect.Member):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(int):::ENTER
modifiers == 9
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(int):::EXIT76
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(int):::EXIT76;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(int):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
return == false
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.isPackageAccess(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(java.lang.reflect.AccessibleObject):::ENTER
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(java.lang.reflect.AccessibleObject):::EXIT67
===========================================================================
org.apache.commons.lang3.reflect.MemberUtils.setAccessibleWorkaround(java.lang.reflect.AccessibleObject):::EXIT
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES)
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[] == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES[])
org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName() == orig(org.apache.commons.lang3.reflect.MemberUtils.ORDERED_PRIMITIVE_TYPES.getClass().getName())
===========================================================================
org.apache.commons.lang3.reflect.MethodUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.reflect.MethodUtils.MethodUtils():::EXIT
