===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m2 has only one value
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m0 has only one value
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.equals(java.lang.Object):::ENTER
this == arg0
this has only one value
arg0 has only one value
arg0.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
com.sun.proxy.$Proxy2.equals(java.lang.Object):::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
return == true
===========================================================================
com.sun.proxy.$Proxy2.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
com.sun.proxy.$Proxy2.vetoableChange(java.beans.PropertyChangeEvent):::ENTER
===========================================================================
com.sun.proxy.$Proxy2.vetoableChange(java.beans.PropertyChangeEvent):::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected >= 0
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected has only one value
expected.getClass().getName() == java.lang.Class.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected >= 0
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
object.getClass().getName() == java.lang.String.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message has only one value
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == $hidden$2.fName
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 9
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.event.EventListenerSupportTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 9
this.fTests[].getClass().getName() == [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
size(this.fTests[]) == 9
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
names[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 4, 9 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT87
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 4, 9 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
return == false
size(this.fTests[]) one of { 4, 9 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 4, 9 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.event.EventListenerSupportTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
return == false
size(this.fTests[]) one of { 4, 9 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 9
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupportTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 10 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 9 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 9
runTime == 3430
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
return has only one value
return.toString == "3.43"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 3430
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 9
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 9
runTime == 3430
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 9 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 9
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 9
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
size(return.fListeners[]) == 1
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.Validate:::CLASS
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified exclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified inclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX has only one value
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == "The string %s does not match the pattern %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == "The validated object is null"
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == "The validated expression is false"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == "The validated array contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == "The validated collection contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == "The validated character sequence is blank"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == "The validated array is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == "The validated collection is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == "The validated map is empty"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == "The validated array index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == "The validated collection index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == "The validated state is false"
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == "The validated class can not be converted to the %s class"
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == "The validated object is not an instance of %s"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, java.lang.Object[]):::ENTER
expression == true
message has only one value
message.toString == "Class {0} is not an interface"
values.getClass().getName() == java.lang.Object[].class
values[] contains no nulls and has only one value, of length 1
values[] elements has only one value
size(values[]) == 1
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, java.lang.Object[]):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
values[] == orig(values[])
message.toString == "Class {0} is not an interface"
values[] contains no nulls and has only one value, of length 1
values[] elements has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.Validate.notNull(java.lang.Object, java.lang.String, java.lang.Object[]):::ENTER
message.toString one of { "ClassLoader cannot be null.", "Listener interface cannot be null.", "Listener object cannot be null." }
values.getClass().getName() == java.lang.Object[].class
values[] == []
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
object.getClass().getName() != values.getClass().getName()
===========================================================================
org.apache.commons.lang3.Validate.notNull(java.lang.Object, java.lang.String, java.lang.Object[]):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
values[] == orig(values[])
return == orig(object)
message.toString one of { "ClassLoader cannot be null.", "Listener interface cannot be null.", "Listener object cannot be null." }
values[] == []
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
return.getClass().getName() == orig(object.getClass().getName())
return.getClass().getName() != orig(values.getClass().getName())
===========================================================================
org.apache.commons.lang3.daikon.EventListenerSupportTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.EventListenerSupportTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:::CLASS
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler:::OBJECT
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] elements != null
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.ProxyInvocationHandler(org.apache.commons.lang3.event.EventListenerSupport):::ENTER
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] elements has only one value
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == null
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[].getClass().getName() == []
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 0, 1 }
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() != org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 <= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 >= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.ProxyInvocationHandler(org.apache.commons.lang3.event.EventListenerSupport):::EXIT
org.apache.commons.lang3.event.EventListenerSupport.this == orig(org.apache.commons.lang3.event.EventListenerSupport.this)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == orig(org.apache.commons.lang3.event.EventListenerSupport.this.proxy)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] elements has only one value
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == null
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 0, 1 }
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID >= size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName())
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1 <= size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID == size(args[])
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == proxy
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size(args[])-1
method has only one value
args.getClass().getName() == java.lang.Object[].class
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 1, 2, 10 }
size(args[]) == 1
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == proxy.getClass().getName()
args[] elements == args[org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID-1]
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
org.apache.commons.lang3.event.EventListenerSupport.this == orig(org.apache.commons.lang3.event.EventListenerSupport.this)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners)
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == orig(proxy)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
args[] == orig(args[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size(args[])-1
size(args[])-1 == orig(size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]))
return == null
orig(proxy.getClass().getName()) == com.sun.proxy.$Proxy2.class
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) one of { 0, 1, 2 }
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == orig(proxy.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName())
args[] elements == args[org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID-1]
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport:::CLASS
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport:::OBJECT
this.listeners[] elements != null
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
this.prototypeArray[] == []
this.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(this.listeners[])
this.listeners.getClass().getName() != this.proxy.getClass().getName()
this.listeners.getClass().getName() != this.prototypeArray.getClass().getName()
this.proxy.getClass().getName() != this.prototypeArray.getClass().getName()
size(this.listeners[]) >= size(this.prototypeArray[])
size(this.listeners[])-1 >= size(this.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport():::EXIT
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.proxy == null
this.prototypeArray == null
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class):::ENTER
listenerInterface has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class):::EXIT
size(this.listeners[]) == size(this.prototypeArray[])
this.listeners[] == []
this.listeners[].getClass().getName() == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class, java.lang.ClassLoader):::ENTER
listenerInterface has only one value
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.EventListenerSupport(java.lang.Class, java.lang.ClassLoader):::EXIT
size(this.listeners[]) == size(this.prototypeArray[])
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() != orig(classLoader.getClass().getName())
this.proxy.getClass().getName() != orig(classLoader.getClass().getName())
this.prototypeArray.getClass().getName() != orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.addListener(java.lang.Object):::ENTER
this.listeners != null
this.proxy != null
this.prototypeArray != null
listener != null
this.listeners.getClass().getName() != listener.getClass().getName()
this.proxy.getClass().getName() != listener.getClass().getName()
this.prototypeArray.getClass().getName() != listener.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.addListener(java.lang.Object):::EXIT
this.listeners == orig(this.listeners)
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[])-1 == orig(size(this.listeners[]))
this.listeners != null
this.proxy != null
this.prototypeArray != null
size(this.listeners[]) >= 1
orig(listener) in this.listeners[]
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(listener.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.proxy.getClass().getName() != orig(listener.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
this.prototypeArray.getClass().getName() != orig(listener.getClass().getName())
size(this.listeners[])-1 >= size(this.prototypeArray[])
size(this.prototypeArray[])-1 <= orig(size(this.listeners[]))-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.create(java.lang.Class):::ENTER
listenerInterface has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.create(java.lang.Class):::EXIT
size(return.listeners[]) == size(return.prototypeArray[])
return.listeners[] == []
return.listeners[].getClass().getName() == []
return.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
return.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
return.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
return.prototypeArray[] == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createInvocationHandler():::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
this.proxy == null
size(this.listeners[]) one of { 0, 1 }
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createInvocationHandler():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
this.proxy == null
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.class
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != return.getClass().getName()
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.prototypeArray.getClass().getName() != return.getClass().getName()
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createProxy(java.lang.Class, java.lang.ClassLoader):::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
this.proxy == null
listenerInterface has only one value
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != classLoader.getClass().getName()
this.prototypeArray.getClass().getName() != classLoader.getClass().getName()
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.createProxy(java.lang.Class, java.lang.ClassLoader):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(classLoader.getClass().getName())
this.proxy.getClass().getName() != orig(classLoader.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
this.prototypeArray.getClass().getName() != orig(classLoader.getClass().getName())
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.fire():::ENTER
size(this.listeners[]) one of { 1, 2, 10 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.fire():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == return
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
return == orig(this.proxy)
return.getClass().getName() == com.sun.proxy.$Proxy2.class
size(this.listeners[]) one of { 1, 2, 10 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() == return.getClass().getName()
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
return.getClass().getName() == orig(this.proxy.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListenerCount():::ENTER
this has only one value
this.listeners has only one value
this.listeners[].getClass().getName() elements == null
this.listeners[].getClass().getName() one of { [], [null, null, null, null, null, null, null, null, null, null] }
this.proxy has only one value
this.prototypeArray has only one value
size(this.listeners[]) one of { 0, 10 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListenerCount():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
return == size(this.listeners[])
return == orig(size(this.listeners[]))
this.listeners has only one value
this.listeners[].getClass().getName() elements == null
this.listeners[].getClass().getName() one of { [], [null, null, null, null, null, null, null, null, null, null] }
this.proxy has only one value
this.prototypeArray has only one value
return one of { 0, 10 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListeners():::ENTER
size(this.listeners[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.getListeners():::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[]) == size(return[])
size(return[]) == orig(size(this.listeners[]))
return.getClass().getName() == java.beans.VetoableChangeListener[].class
size(return[]) one of { 0, 1, 2 }
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(return[])
this.listeners.getClass().getName() != return.getClass().getName()
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() != return.getClass().getName()
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.prototypeArray.getClass().getName())
size(this.prototypeArray[]) <= size(return[])
size(this.prototypeArray[])-1 <= size(return[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.initializeTransientFields(java.lang.Class, java.lang.ClassLoader):::ENTER
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
this.proxy == null
this.prototypeArray == null
listenerInterface has only one value
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() != classLoader.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.initializeTransientFields(java.lang.Class, java.lang.ClassLoader):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.listeners[] elements has only one value
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.listeners[]) one of { 0, 1 }
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(classLoader.getClass().getName())
this.proxy.getClass().getName() != orig(classLoader.getClass().getName())
this.prototypeArray.getClass().getName() != orig(classLoader.getClass().getName())
size(this.listeners[])-1 <= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.readObject(java.io.ObjectInputStream):::ENTER
this.listeners == this.proxy
this has only one value
this.listeners == null
this.proxy == null
this.prototypeArray == null
objectInputStream has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.readObject(java.io.ObjectInputStream):::EXIT
size(this.listeners[])-1 == size(this.prototypeArray[])
this.listeners has only one value
this.listeners[] contains no nulls and has only one value, of length 1
this.listeners[] elements has only one value
this.listeners[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.proxy has only one value
this.prototypeArray has only one value
size(this.listeners[]) == 1
this.proxy.getClass().getName() in this.listeners[].getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.removeListener(java.lang.Object):::ENTER
this.listeners != null
this.proxy != null
this.prototypeArray != null
listener != null
size(this.listeners[]) >= 1
listener in this.listeners[]
this.listeners.getClass().getName() != listener.getClass().getName()
this.prototypeArray.getClass().getName() != listener.getClass().getName()
size(this.listeners[])-1 >= size(this.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.removeListener(java.lang.Object):::EXIT
this.listeners == orig(this.listeners)
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[]) == orig(size(this.listeners[]))-1
this.listeners != null
this.proxy != null
this.prototypeArray != null
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.listeners.getClass().getName() != orig(listener.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
this.prototypeArray.getClass().getName() != orig(listener.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.writeObject(java.io.ObjectOutputStream):::ENTER
this has only one value
this.listeners has only one value
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [null, com.sun.proxy.$Proxy3]
this.proxy has only one value
this.prototypeArray has only one value
objectOutputStream has only one value
size(this.listeners[]) == 2
===========================================================================
org.apache.commons.lang3.event.EventListenerSupport.writeObject(java.io.ObjectOutputStream):::EXIT
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
this.listeners has only one value
this.listeners[] contains no nulls and has only one value, of length 2
this.listeners[].getClass().getName() == [null, com.sun.proxy.$Proxy3]
this.proxy has only one value
this.prototypeArray has only one value
size(this.listeners[]) == 2
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.proxy.getClass().getName() == orig(this.proxy.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$1:::OBJECT
this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testSerialization"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$1.(org.apache.commons.lang3.event.EventListenerSupportTest):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testSerialization"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$1.(org.apache.commons.lang3.event.EventListenerSupportTest):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1:::CLASS
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1:::OBJECT
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == org.apache.commons.lang3.event.EventListenerSupport.this.listeners
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == org.apache.commons.lang3.event.EventListenerSupport.this.proxy
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]
this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testSubclassInvocationHandling"
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] elements has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() elements == com.sun.proxy.$Proxy3.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() one of { [], [com.sun.proxy.$Proxy3] }
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.this has only one value
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) one of { 0, 1 }
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.(org.apache.commons.lang3.event.EventListenerSupportTest$2, org.apache.commons.lang3.event.EventListenerSupport):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == $hidden$2.listeners
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == $hidden$2.listeners[]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == $hidden$2.proxy
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == $hidden$2.prototypeArray
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == $hidden$2.prototypeArray[]
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == size($hidden$2.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testSubclassInvocationHandling"
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == null
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == []
$hidden$2 has only one value
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.(org.apache.commons.lang3.event.EventListenerSupportTest$2, org.apache.commons.lang3.event.EventListenerSupport):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest$2.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == $hidden$2.listeners
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == $hidden$2.listeners[]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == $hidden$2.proxy
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == $hidden$2.prototypeArray
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == $hidden$2.prototypeArray[]
org.apache.commons.lang3.event.EventListenerSupport.this == orig($hidden$2)
org.apache.commons.lang3.event.EventListenerSupport.this.listeners == $hidden$2.listeners
org.apache.commons.lang3.event.EventListenerSupport.this.listeners[] == $hidden$2.listeners[]
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == $hidden$2.proxy
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray == $hidden$2.prototypeArray
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[] == $hidden$2.prototypeArray[]
$hidden$2.listeners == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners)
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.proxy == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy)
$hidden$2.proxy == orig($hidden$2.proxy)
$hidden$2.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray)
$hidden$2.prototypeArray == orig($hidden$2.prototypeArray)
$hidden$2.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
$hidden$2.prototypeArray[] == orig($hidden$2.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size($hidden$2.listeners[])
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size($hidden$2.listeners[])
size($hidden$2.listeners[]) == size($hidden$2.prototypeArray[])
size($hidden$2.listeners[]) == orig(size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]))
size($hidden$2.listeners[]) == orig(size($hidden$2.prototypeArray[]))
$hidden$2.listeners has only one value
$hidden$2.listeners[] == []
$hidden$2.listeners[].getClass().getName() == []
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.proxy == null
$hidden$2.prototypeArray has only one value
$hidden$2.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
$hidden$2.prototypeArray[] == []
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
$hidden$2.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName())
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName())
$hidden$2.prototypeArray.getClass().getName() == orig($hidden$2.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == proxy
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID == size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == size(args[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])-1 == size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])-1
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size(args[])-1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() == [com.sun.proxy.$Proxy3]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy has only one value
method has only one value
args.getClass().getName() == java.lang.Object[].class
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] elements == org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID-1]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == proxy.getClass().getName()
args[] elements == args[org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID-1]
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest$2.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy == orig(proxy)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[] == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[])
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID == orig(size(args[]))
org.apache.commons.lang3.event.EventListenerSupport.this == orig(org.apache.commons.lang3.event.EventListenerSupport.this)
org.apache.commons.lang3.event.EventListenerSupport.this.proxy == orig(proxy)
args[] == orig(args[])
orig(org.apache.commons.lang3.event.EventListenerSupport.this.proxy) == orig(proxy)
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[]) == orig(size(args[]))
size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]) == size(args[])-1
size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[]) == orig(size(args[]))
size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]) == size(args[])-1
size(args[])-1 == orig(size(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray[]))
size(args[])-1 == orig(size(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray[]))
orig(size(org.apache.commons.lang3.event.EventListenerSupport.this.listeners[])) == orig(size(args[]))
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] contains no nulls and has only one value, of length 1
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[].getClass().getName() == [com.sun.proxy.$Proxy3]
return == null
orig(proxy) has only one value
orig(proxy.getClass().getName()) == com.sun.proxy.$Proxy2.class
orig(size(args[])) == 1
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[] elements == org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners[org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID-1]
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.listeners.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.listeners.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.proxy.getClass().getName() == orig(proxy.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupportTest$2.this.prototypeArray.getClass().getName() == orig(org.apache.commons.lang3.event.EventListenerSupport.this.prototypeArray.getClass().getName())
org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName() == orig(proxy.getClass().getName())
args[] elements == args[org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler.serialVersionUID-1]
orig(org.apache.commons.lang3.event.EventListenerSupport.this.proxy.getClass().getName()) == orig(proxy.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2:::CLASS
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2:::OBJECT
size(this.listeners[]) == size(this.prototypeArray[])
this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testSubclassInvocationHandling"
this.listeners has only one value
this.listeners[] == []
this.listeners[].getClass().getName() == []
this.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
this.prototypeArray has only one value
this.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
this.prototypeArray[] == []
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.(org.apache.commons.lang3.event.EventListenerSupportTest, java.lang.Class):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testSubclassInvocationHandling"
$anonymous0 has only one value
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.(org.apache.commons.lang3.event.EventListenerSupportTest, java.lang.Class):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
this.proxy has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.createInvocationHandler():::ENTER
this.proxy == null
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$2.createInvocationHandler():::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
this.listeners == orig(this.listeners)
this.listeners[] == orig(this.listeners[])
this.proxy == orig(this.proxy)
this.prototypeArray == orig(this.prototypeArray)
this.prototypeArray[] == orig(this.prototypeArray[])
size(this.listeners[]) == orig(size(this.prototypeArray[]))
this.proxy == null
return has only one value
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest$2$1.class
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
this.listeners.getClass().getName() == orig(this.listeners.getClass().getName())
this.prototypeArray.getClass().getName() == orig(this.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3:::OBJECT
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testRemoveListenerDuringEvent"
this.val$listenerSupport has only one value
this.val$listenerSupport.listeners has only one value
this.val$listenerSupport.listeners[] elements != null
this.val$listenerSupport.listeners[].getClass().getName() elements == null
this.val$listenerSupport.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
this.val$listenerSupport.proxy has only one value
this.val$listenerSupport.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
this.val$listenerSupport.prototypeArray has only one value
this.val$listenerSupport.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
this.val$listenerSupport.prototypeArray[] == []
this.val$listenerSupport.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(this.val$listenerSupport.listeners[])
this.val$listenerSupport.listeners.getClass().getName() != this.val$listenerSupport.proxy.getClass().getName()
this.val$listenerSupport.listeners.getClass().getName() != this.val$listenerSupport.prototypeArray.getClass().getName()
this.val$listenerSupport.proxy.getClass().getName() != this.val$listenerSupport.prototypeArray.getClass().getName()
size(this.val$listenerSupport.listeners[]) >= size(this.val$listenerSupport.prototypeArray[])
size(this.val$listenerSupport.listeners[])-1 >= size(this.val$listenerSupport.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.(org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupport):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testRemoveListenerDuringEvent"
$hidden$2 has only one value
$hidden$2.listeners has only one value
$hidden$2.listeners[].getClass().getName() elements == null
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.proxy has only one value
$hidden$2.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
$hidden$2.prototypeArray has only one value
$hidden$2.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
$hidden$2.prototypeArray[] == []
$hidden$2.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size($hidden$2.listeners[])
$hidden$2.listeners.getClass().getName() != $hidden$2.proxy.getClass().getName()
$hidden$2.listeners.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
$hidden$2.proxy.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
size($hidden$2.listeners[]) >= size($hidden$2.prototypeArray[])
size($hidden$2.listeners[])-1 >= size($hidden$2.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.(org.apache.commons.lang3.event.EventListenerSupportTest, org.apache.commons.lang3.event.EventListenerSupport):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
this.val$listenerSupport == orig($hidden$2)
this.val$listenerSupport.listeners == $hidden$2.listeners
this.val$listenerSupport.listeners[] == $hidden$2.listeners[]
this.val$listenerSupport.proxy == $hidden$2.proxy
this.val$listenerSupport.prototypeArray == $hidden$2.prototypeArray
this.val$listenerSupport.prototypeArray[] == $hidden$2.prototypeArray[]
$hidden$2.listeners == orig($hidden$2.listeners)
$hidden$2.listeners[] == orig($hidden$2.listeners[])
$hidden$2.proxy == orig($hidden$2.proxy)
$hidden$2.prototypeArray == orig($hidden$2.prototypeArray)
$hidden$2.prototypeArray[] == orig($hidden$2.prototypeArray[])
$hidden$2.listeners has only one value
$hidden$2.listeners[].getClass().getName() elements == null
$hidden$2.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
$hidden$2.proxy has only one value
$hidden$2.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
$hidden$2.prototypeArray has only one value
$hidden$2.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
$hidden$2.prototypeArray[] == []
$hidden$2.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size($hidden$2.listeners[])
this.val$listenerSupport.listeners.getClass().getName() == $hidden$2.listeners.getClass().getName()
this.val$listenerSupport.proxy.getClass().getName() == $hidden$2.proxy.getClass().getName()
this.val$listenerSupport.prototypeArray.getClass().getName() == $hidden$2.prototypeArray.getClass().getName()
$hidden$2.listeners.getClass().getName() != $hidden$2.proxy.getClass().getName()
$hidden$2.listeners.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
$hidden$2.listeners.getClass().getName() == orig($hidden$2.listeners.getClass().getName())
$hidden$2.proxy.getClass().getName() != $hidden$2.prototypeArray.getClass().getName()
$hidden$2.proxy.getClass().getName() == orig($hidden$2.proxy.getClass().getName())
$hidden$2.prototypeArray.getClass().getName() == orig($hidden$2.prototypeArray.getClass().getName())
size($hidden$2.listeners[]) >= size($hidden$2.prototypeArray[])
size($hidden$2.listeners[])-1 >= size($hidden$2.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.vetoableChange(java.beans.PropertyChangeEvent):::ENTER
e has only one value
this in this.val$listenerSupport.listeners[]
size(this.val$listenerSupport.listeners[])-1 >= size(this.val$listenerSupport.prototypeArray[])
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$3.vetoableChange(java.beans.PropertyChangeEvent):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
this.val$listenerSupport == orig(this.val$listenerSupport)
this.val$listenerSupport.listeners == orig(this.val$listenerSupport.listeners)
this.val$listenerSupport.proxy == orig(this.val$listenerSupport.proxy)
this.val$listenerSupport.prototypeArray == orig(this.val$listenerSupport.prototypeArray)
this.val$listenerSupport.prototypeArray[] == orig(this.val$listenerSupport.prototypeArray[])
size(this.val$listenerSupport.listeners[]) == orig(size(this.val$listenerSupport.listeners[]))-1
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
this.val$listenerSupport.listeners.getClass().getName() == orig(this.val$listenerSupport.listeners.getClass().getName())
this.val$listenerSupport.proxy.getClass().getName() == orig(this.val$listenerSupport.proxy.getClass().getName())
this.val$listenerSupport.prototypeArray.getClass().getName() == orig(this.val$listenerSupport.prototypeArray.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4:::OBJECT
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testEventDispatchOrder"
this.val$calledListeners has only one value
this.val$calledListeners[].getClass().getName() elements == null
this.val$calledListeners.getClass().getName() == java.util.ArrayList.class
size(this.val$calledListeners[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.(org.apache.commons.lang3.event.EventListenerSupportTest, java.util.List):::ENTER
org.apache.commons.lang3.event.EventListenerSupportTest.this has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName has only one value
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == "testEventDispatchOrder"
$hidden$2 has only one value
$hidden$2[] == []
$hidden$2[].getClass().getName() == []
$hidden$2.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.(org.apache.commons.lang3.event.EventListenerSupportTest, java.util.List):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
this.val$calledListeners == orig($hidden$2)
this.val$calledListeners[] == $hidden$2[]
$hidden$2[] == orig($hidden$2[])
$hidden$2[] == []
$hidden$2[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
this.val$calledListeners.getClass().getName() == orig($hidden$2.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.vetoableChange(java.beans.PropertyChangeEvent):::ENTER
this.val$calledListeners[] elements has only one value
this.val$calledListeners[].getClass().getName() one of { [], [null] }
e has only one value
size(this.val$calledListeners[]) one of { 0, 1 }
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest$4.vetoableChange(java.beans.PropertyChangeEvent):::EXIT
org.apache.commons.lang3.event.EventListenerSupportTest.this == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this)
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName)
this.val$calledListeners == orig(this.val$calledListeners)
size(this.val$calledListeners[])-1 == orig(size(this.val$calledListeners[]))
this.val$calledListeners[].getClass().getName() one of { [null], [null, null] }
size(this.val$calledListeners[]) one of { 1, 2 }
org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString == orig(org.apache.commons.lang3.event.EventListenerSupportTest.this.fName.toString)
orig(this) in this.val$calledListeners[]
this.val$calledListeners.getClass().getName() == orig(this.val$calledListeners.getClass().getName())
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest:::OBJECT
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.EventListenerSupportTest():::EXIT
this.fName == null
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.addDeregisterListener(org.apache.commons.lang3.event.EventListenerSupport):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testRemoveListenerDuringEvent"
listenerSupport has only one value
listenerSupport.listeners has only one value
listenerSupport.listeners[].getClass().getName() elements == null
listenerSupport.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
listenerSupport.proxy has only one value
listenerSupport.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
listenerSupport.prototypeArray has only one value
listenerSupport.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
listenerSupport.prototypeArray[] == []
listenerSupport.prototypeArray[].getClass().getName() == []
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(listenerSupport.listeners[])
listenerSupport.listeners.getClass().getName() != listenerSupport.proxy.getClass().getName()
listenerSupport.listeners.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
listenerSupport.proxy.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
size(listenerSupport.listeners[]) >= size(listenerSupport.prototypeArray[])
size(listenerSupport.listeners[])-1 >= size(listenerSupport.prototypeArray[])-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.addDeregisterListener(org.apache.commons.lang3.event.EventListenerSupport):::EXIT
this.fName == orig(this.fName)
listenerSupport.listeners == orig(listenerSupport.listeners)
listenerSupport.proxy == orig(listenerSupport.proxy)
listenerSupport.prototypeArray == orig(listenerSupport.prototypeArray)
listenerSupport.prototypeArray[] == orig(listenerSupport.prototypeArray[])
size(listenerSupport.listeners[])-1 == orig(size(listenerSupport.listeners[]))
this.fName has only one value
this.fName.toString == "testRemoveListenerDuringEvent"
listenerSupport.listeners has only one value
listenerSupport.listeners[].getClass().getName() elements == null
listenerSupport.listeners.getClass().getName() == java.util.concurrent.CopyOnWriteArrayList.class
listenerSupport.proxy has only one value
listenerSupport.proxy.getClass().getName() == com.sun.proxy.$Proxy2.class
listenerSupport.prototypeArray has only one value
listenerSupport.prototypeArray.getClass().getName() == java.beans.VetoableChangeListener[].class
listenerSupport.prototypeArray[] == []
listenerSupport.prototypeArray[].getClass().getName() == []
this.fName.toString == orig(this.fName.toString)
org.apache.commons.lang3.event.EventListenerSupport.serialVersionUID > size(listenerSupport.listeners[])
listenerSupport.listeners.getClass().getName() != listenerSupport.proxy.getClass().getName()
listenerSupport.listeners.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
listenerSupport.listeners.getClass().getName() == orig(listenerSupport.listeners.getClass().getName())
listenerSupport.proxy.getClass().getName() != listenerSupport.prototypeArray.getClass().getName()
listenerSupport.proxy.getClass().getName() == orig(listenerSupport.proxy.getClass().getName())
listenerSupport.prototypeArray.getClass().getName() == orig(listenerSupport.prototypeArray.getClass().getName())
size(listenerSupport.listeners[])-1 >= size(listenerSupport.prototypeArray[])
size(listenerSupport.prototypeArray[])-1 <= orig(size(listenerSupport.listeners[]))-1
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.createListener(java.util.List):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testEventDispatchOrder"
calledListeners has only one value
calledListeners[] == []
calledListeners[].getClass().getName() == []
calledListeners.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.createListener(java.util.List):::EXIT
this.fName == orig(this.fName)
calledListeners[] == orig(calledListeners[])
this.fName has only one value
this.fName.toString == "testEventDispatchOrder"
calledListeners[] == []
calledListeners[].getClass().getName() == []
return.getClass().getName() == org.apache.commons.lang3.event.EventListenerSupportTest$4.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testAddNullListener():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testAddNullListener"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testAddNullListener():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testAddNullListener"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testCreateWithNonInterfaceParameter():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateWithNonInterfaceParameter"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testCreateWithNonInterfaceParameter():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateWithNonInterfaceParameter"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testCreateWithNullParameter():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateWithNullParameter"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testCreateWithNullParameter():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateWithNullParameter"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testEventDispatchOrder():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testEventDispatchOrder"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testEventDispatchOrder():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testEventDispatchOrder"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testGetListeners():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetListeners"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testGetListeners():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetListeners"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testRemoveListenerDuringEvent():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testRemoveListenerDuringEvent"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testRemoveListenerDuringEvent():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testRemoveListenerDuringEvent"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testRemoveNullListener():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testRemoveNullListener"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testRemoveNullListener():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testRemoveNullListener"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSerialization():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSerialization"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSerialization():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSerialization"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSubclassInvocationHandling():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSubclassInvocationHandling"
===========================================================================
org.apache.commons.lang3.event.EventListenerSupportTest.testSubclassInvocationHandling():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSubclassInvocationHandling"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.easymock.AbstractMatcher:::CLASS
===========================================================================
org.easymock.AbstractMatcher:::OBJECT
===========================================================================
org.easymock.AbstractMatcher.AbstractMatcher():::EXIT
===========================================================================
org.easymock.EasyMock:::CLASS
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT has only one value
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == "easymock.enableThreadSafetyCheckByDefault"
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT has only one value
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == "easymock.notThreadSafeByDefault"
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString < org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString
===========================================================================
org.easymock.EasyMock.createNiceControl():::ENTER
===========================================================================
org.easymock.EasyMock.createNiceControl():::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
return.getClass().getName() == org.easymock.internal.MocksControl.class
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.EasyMock.createNiceMock(java.lang.Class):::ENTER
toMock has only one value
===========================================================================
org.easymock.EasyMock.createNiceMock(java.lang.Class):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
return.getClass().getName() == com.sun.proxy.$Proxy3.class
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.EasyMock.getControl(java.lang.Object):::ENTER
===========================================================================
org.easymock.EasyMock.getControl(java.lang.Object):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
return.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
return.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.EasyMock.replay(java.lang.Object[]):::ENTER
mocks.getClass().getName() == java.lang.Object[].class
size(mocks[]) == 1
===========================================================================
org.easymock.EasyMock.replay(java.lang.Object[]):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
mocks[] == orig(mocks[])
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.EasyMock.verify(java.lang.Object[]):::ENTER
mocks.getClass().getName() == java.lang.Object[].class
size(mocks[]) == 1
===========================================================================
org.easymock.EasyMock.verify(java.lang.Object[]):::EXIT
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT)
mocks[] == orig(mocks[])
org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString == orig(org.easymock.EasyMock.ENABLE_THREAD_SAFETY_CHECK_BY_DEFAULT.toString)
org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString == orig(org.easymock.EasyMock.NOT_THREAD_SAFE_BY_DEFAULT.toString)
===========================================================================
org.easymock.internal.AlwaysMatcher:::CLASS
===========================================================================
org.easymock.internal.AlwaysMatcher:::OBJECT
this has only one value
===========================================================================
org.easymock.internal.AlwaysMatcher.AlwaysMatcher():::EXIT
===========================================================================
org.easymock.internal.ArrayMatcher:::CLASS
===========================================================================
org.easymock.internal.ArrayMatcher:::OBJECT
this has only one value
===========================================================================
org.easymock.internal.ArrayMatcher.ArrayMatcher():::EXIT
===========================================================================
org.easymock.internal.EasyMockProperties:::CLASS
org.easymock.internal.EasyMockProperties.PREFIX has only one value
org.easymock.internal.EasyMockProperties.PREFIX.toString == "easymock."
org.easymock.internal.EasyMockProperties.instance.properties has only one value
===========================================================================
org.easymock.internal.EasyMockProperties:::OBJECT
org.easymock.internal.EasyMockProperties.instance.properties == this.properties
this has only one value
this.properties has only one value
===========================================================================
org.easymock.internal.EasyMockProperties.EasyMockProperties():::EXIT
org.easymock.internal.EasyMockProperties.instance == null
===========================================================================
org.easymock.internal.EasyMockProperties.getClassLoader():::ENTER
org.easymock.internal.EasyMockProperties.instance == null
===========================================================================
org.easymock.internal.EasyMockProperties.getClassLoader():::EXIT
org.easymock.internal.EasyMockProperties.PREFIX == orig(org.easymock.internal.EasyMockProperties.PREFIX)
org.easymock.internal.EasyMockProperties.instance == orig(org.easymock.internal.EasyMockProperties.instance)
org.easymock.internal.EasyMockProperties.instance == null
return has only one value
return.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.easymock.internal.EasyMockProperties.PREFIX.toString == orig(org.easymock.internal.EasyMockProperties.PREFIX.toString)
===========================================================================
org.easymock.internal.EasyMockProperties.getInstance():::ENTER
===========================================================================
org.easymock.internal.EasyMockProperties.getInstance():::EXIT
org.easymock.internal.EasyMockProperties.PREFIX == orig(org.easymock.internal.EasyMockProperties.PREFIX)
org.easymock.internal.EasyMockProperties.instance == return
org.easymock.internal.EasyMockProperties.instance.properties == return.properties
org.easymock.internal.EasyMockProperties.instance.properties == orig(org.easymock.internal.EasyMockProperties.instance.properties)
org.easymock.internal.EasyMockProperties.instance has only one value
org.easymock.internal.EasyMockProperties.PREFIX.toString == orig(org.easymock.internal.EasyMockProperties.PREFIX.toString)
===========================================================================
org.easymock.internal.EasyMockProperties.getProperty(java.lang.String):::ENTER
this == org.easymock.internal.EasyMockProperties.instance
org.easymock.internal.EasyMockProperties.instance has only one value
key.toString one of { "easymock.enableThreadSafetyCheckByDefault", "easymock.notThreadSafeByDefault" }
org.easymock.internal.EasyMockProperties.PREFIX.toString < key.toString
===========================================================================
org.easymock.internal.EasyMockProperties.getProperty(java.lang.String):::EXIT
org.easymock.internal.EasyMockProperties.PREFIX == orig(org.easymock.internal.EasyMockProperties.PREFIX)
org.easymock.internal.EasyMockProperties.instance == orig(this)
org.easymock.internal.EasyMockProperties.instance == orig(org.easymock.internal.EasyMockProperties.instance)
org.easymock.internal.EasyMockProperties.instance.properties == orig(org.easymock.internal.EasyMockProperties.instance.properties)
org.easymock.internal.EasyMockProperties.instance.properties == orig(this.properties)
org.easymock.internal.EasyMockProperties.instance has only one value
key.toString one of { "easymock.enableThreadSafetyCheckByDefault", "easymock.notThreadSafeByDefault" }
return == null
org.easymock.internal.EasyMockProperties.PREFIX.toString < key.toString
org.easymock.internal.EasyMockProperties.PREFIX.toString == orig(org.easymock.internal.EasyMockProperties.PREFIX.toString)
key.toString == orig(key.toString)
===========================================================================
org.easymock.internal.EqualsMatcher:::CLASS
===========================================================================
org.easymock.internal.EqualsMatcher:::OBJECT
this has only one value
===========================================================================
org.easymock.internal.EqualsMatcher.EqualsMatcher():::EXIT
===========================================================================
org.easymock.internal.ExpectedInvocation:::CLASS
===========================================================================
org.easymock.internal.ExpectedInvocation:::OBJECT
size(this.invocation.arguments[]) == size(this.matchers[])
this.invocation.arguments.getClass().getName() == java.lang.Object[].class
this.invocation.arguments[] elements != null
this.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
this.matcher == null
this.matchers[] elements != null
this.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
this.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
this.matchers.getClass().getName() == java.util.ArrayList.class
size(this.invocation.arguments[]) == 1
size(this.matchers[]) == 1
this.invocation.mock.getClass().getName() != this.invocation.arguments.getClass().getName()
this.invocation.mock.getClass().getName() != this.invocation.currentCaptures.getClass().getName()
this.invocation.mock.getClass().getName() != this.matchers.getClass().getName()
this.invocation.arguments.getClass().getName() != this.invocation.currentCaptures.getClass().getName()
this.invocation.arguments.getClass().getName() != this.matchers.getClass().getName()
this.invocation.currentCaptures.getClass().getName() == this.matchers.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
matchers == null
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List):::EXIT
this.invocation == orig(invocation)
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
size(this.matchers[]) == size(invocation.arguments[])
size(this.matchers[]) == orig(size(invocation.arguments[]))
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.matchers.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.matchers.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List, org.easymock.ArgumentsMatcher):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
matchers == null
matcher == null
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ExpectedInvocation.ExpectedInvocation(org.easymock.internal.Invocation, java.util.List, org.easymock.ArgumentsMatcher):::EXIT
this.invocation == orig(invocation)
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
this.matcher == orig(matcher)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
size(this.matchers[]) == size(invocation.arguments[])
size(this.matchers[]) == orig(size(invocation.arguments[]))
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.matchers.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.matchers.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.createMissingMatchers(org.easymock.internal.Invocation, java.util.List):::ENTER
this.invocation == invocation
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
this.matchers == matchers
this.matchers == null
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.invocation.currentCaptures.getClass().getName() == invocation.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.createMissingMatchers(org.easymock.internal.Invocation, java.util.List):::EXIT67
===========================================================================
org.easymock.internal.ExpectedInvocation.createMissingMatchers(org.easymock.internal.Invocation, java.util.List):::EXIT
this.invocation == orig(this.invocation)
this.invocation == orig(invocation)
this.invocation.mock == invocation.mock
this.invocation.method == invocation.method
this.invocation.arguments == invocation.arguments
this.invocation.arguments[] == invocation.arguments[]
this.invocation.currentCaptures == invocation.currentCaptures
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers == orig(matchers)
invocation.mock == orig(this.invocation.mock)
invocation.mock == orig(invocation.mock)
invocation.method == orig(this.invocation.method)
invocation.method == orig(invocation.method)
invocation.arguments == orig(this.invocation.arguments)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(this.invocation.arguments[])
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(this.invocation.currentCaptures)
invocation.currentCaptures == orig(invocation.currentCaptures)
size(this.invocation.arguments[]) == size(return[])
size(invocation.arguments[]) == size(return[])
size(return[]) == orig(size(this.invocation.arguments[]))
size(return[]) == orig(size(invocation.arguments[]))
this.matchers == null
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return[].getClass().getName() == [org.easymock.internal.matchers.Equals]
return[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.invocation.currentCaptures.getClass().getName() == return.getClass().getName()
invocation.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(this.invocation.arguments.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
return.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.getMethod():::ENTER
===========================================================================
org.easymock.internal.ExpectedInvocation.getMethod():::EXIT
this.invocation == orig(this.invocation)
this.invocation.mock == orig(this.invocation.mock)
this.invocation.method == return
this.invocation.arguments == orig(this.invocation.arguments)
this.invocation.arguments[] == orig(this.invocation.arguments[])
this.invocation.currentCaptures == orig(this.invocation.currentCaptures)
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers[] == orig(this.matchers[])
return == orig(this.invocation.method)
size(this.matchers[]) == orig(size(this.invocation.arguments[]))
this.invocation.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
this.invocation.arguments.getClass().getName() == orig(this.invocation.arguments.getClass().getName())
this.matchers.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
this.matchers.getClass().getName() == orig(this.matchers.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::ENTER
this.invocation.arguments[] == arguments[]
size(this.matchers[]) == size(arguments[])
this.invocation.arguments.getClass().getName() == arguments.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT105
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT105;condition="return == true"
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT
this.invocation == orig(this.invocation)
this.invocation.mock == orig(this.invocation.mock)
this.invocation.method == orig(this.invocation.method)
this.invocation.arguments == orig(this.invocation.arguments)
this.invocation.arguments[] == arguments[]
this.invocation.currentCaptures == orig(this.invocation.currentCaptures)
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers[] == orig(this.matchers[])
arguments[] == orig(this.invocation.arguments[])
arguments[] == orig(arguments[])
size(this.matchers[]) == orig(size(this.invocation.arguments[]))
size(this.matchers[]) == orig(size(arguments[]))
return == true
orig(arguments.getClass().getName()) == java.lang.Object[].class
this.invocation.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
this.invocation.arguments.getClass().getName() == orig(arguments.getClass().getName())
this.matchers.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
this.matchers.getClass().getName() == orig(this.matchers.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(java.lang.Object[]):::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(org.easymock.internal.Invocation):::ENTER
this.invocation.mock == actual.mock
this.invocation.method == actual.method
this.invocation.arguments[] == actual.arguments[]
size(this.matchers[]) == size(actual.arguments[])
this.invocation.mock.getClass().getName() == actual.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == actual.arguments.getClass().getName()
this.matchers.getClass().getName() == actual.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(org.easymock.internal.Invocation):::EXIT
this.invocation == orig(this.invocation)
this.invocation.mock == actual.mock
this.invocation.method == actual.method
this.invocation.arguments == orig(this.invocation.arguments)
this.invocation.arguments[] == actual.arguments[]
this.invocation.currentCaptures == orig(this.invocation.currentCaptures)
this.matcher == orig(this.matcher)
this.matchers == orig(this.matchers)
this.matchers[] == orig(this.matchers[])
actual.mock == orig(this.invocation.mock)
actual.mock == orig(actual.mock)
actual.method == orig(this.invocation.method)
actual.method == orig(actual.method)
actual.arguments == orig(actual.arguments)
actual.arguments[] == orig(this.invocation.arguments[])
actual.arguments[] == orig(actual.arguments[])
actual.currentCaptures == orig(actual.currentCaptures)
size(this.matchers[]) == size(actual.arguments[])
size(this.matchers[]) == orig(size(this.invocation.arguments[]))
size(this.matchers[]) == orig(size(actual.arguments[]))
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return == true
this.invocation.mock.getClass().getName() == actual.mock.getClass().getName()
this.invocation.arguments.getClass().getName() == actual.arguments.getClass().getName()
this.matchers.getClass().getName() == actual.currentCaptures.getClass().getName()
this.matchers.getClass().getName() == orig(this.invocation.currentCaptures.getClass().getName())
this.matchers.getClass().getName() == orig(this.matchers.getClass().getName())
this.matchers.getClass().getName() == orig(actual.currentCaptures.getClass().getName())
actual.mock.getClass().getName() == orig(this.invocation.mock.getClass().getName())
actual.mock.getClass().getName() == orig(actual.mock.getClass().getName())
actual.arguments.getClass().getName() == orig(this.invocation.arguments.getClass().getName())
actual.arguments.getClass().getName() == orig(actual.arguments.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocation.matches(org.easymock.internal.Invocation):::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults:::CLASS
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults:::OBJECT
size(this.expectedInvocation.invocation.arguments[]) == size(this.expectedInvocation.matchers[])
size(this.expectedInvocation.matchers[]) == size(this.results.ranges[])
size(this.expectedInvocation.matchers[]) == size(this.results.results[])
this.expectedInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
this.expectedInvocation.invocation.arguments[] elements != null
this.expectedInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.expectedInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.expectedInvocation.matcher == null
this.expectedInvocation.matchers[] elements != null
this.expectedInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
this.expectedInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
this.expectedInvocation.matchers.getClass().getName() == java.util.ArrayList.class
this.results.callCount one of { 0, 1 }
this.results.ranges[] contains no nulls and has only one value, of length 1
this.results.ranges[] elements has only one value
this.results.ranges[] elements != null
this.results.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
this.results.results[] elements != null
this.results.results[].getClass().getName() == [org.easymock.internal.Result]
this.results.results[].getClass().getName() elements == org.easymock.internal.Result.class
size(this.expectedInvocation.matchers[]) == 1
org.easymock.internal.ExpectedInvocationAndResults.serialVersionUID > this.results.callCount
org.easymock.internal.ExpectedInvocation.serialVersionUID < this.results.callCount
org.easymock.internal.Invocation.serialVersionUID > this.results.callCount
this.expectedInvocation.invocation.mock.getClass().getName() != this.expectedInvocation.invocation.arguments.getClass().getName()
this.expectedInvocation.invocation.mock.getClass().getName() != this.expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.invocation.arguments.getClass().getName() != this.expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == this.expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == this.results.results.getClass().getName()
org.easymock.internal.Results.serialVersionUID < this.results.callCount
this.results.callCount <= size(this.expectedInvocation.matchers[])
this.results.callCount >= size(this.expectedInvocation.matchers[])-1
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Results):::ENTER
results.callCount == size(expectedInvocation.matchers[])-1
size(expectedInvocation.invocation.arguments[]) == size(expectedInvocation.matchers[])
size(expectedInvocation.matchers[]) == size(results.ranges[])
size(expectedInvocation.matchers[]) == size(results.results[])
expectedInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
expectedInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expectedInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expectedInvocation.matcher == null
expectedInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expectedInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
expectedInvocation.matchers.getClass().getName() == java.util.ArrayList.class
results.callCount == 0
results.ranges[] contains no nulls and has only one value, of length 1
results.ranges[] elements has only one value
results.ranges[].getClass().getName() == [org.easymock.internal.Range]
results.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
results.results[].getClass().getName() == [org.easymock.internal.Result]
results.results[].getClass().getName() elements == org.easymock.internal.Result.class
size(expectedInvocation.matchers[]) == 1
expectedInvocation.invocation.arguments[] elements == expectedInvocation.invocation.arguments[results.callCount]
expectedInvocation.invocation.currentCaptures.getClass().getName() == expectedInvocation.matchers.getClass().getName()
expectedInvocation.matchers[] elements == expectedInvocation.matchers[results.callCount]
expectedInvocation.matchers.getClass().getName() == results.results.getClass().getName()
results.ranges[] elements == results.ranges[results.callCount]
results.results[] elements == results.results[results.callCount]
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.ExpectedInvocationAndResults(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Results):::EXIT
this.expectedInvocation == orig(expectedInvocation)
this.expectedInvocation.invocation == expectedInvocation.invocation
this.expectedInvocation.invocation.mock == expectedInvocation.invocation.mock
this.expectedInvocation.invocation.method == expectedInvocation.invocation.method
this.expectedInvocation.invocation.arguments == expectedInvocation.invocation.arguments
this.expectedInvocation.invocation.arguments[] == expectedInvocation.invocation.arguments[]
this.expectedInvocation.invocation.currentCaptures == expectedInvocation.invocation.currentCaptures
this.expectedInvocation.matcher == expectedInvocation.matcher
this.expectedInvocation.matchers == expectedInvocation.matchers
this.expectedInvocation.matchers[] == expectedInvocation.matchers[]
this.results == orig(results)
this.results.callCount == results.callCount
this.results.ranges == results.ranges
this.results.ranges[] == results.ranges[]
this.results.results == results.results
this.results.results[] == results.results[]
expectedInvocation.invocation == orig(expectedInvocation.invocation)
expectedInvocation.invocation.mock == orig(expectedInvocation.invocation.mock)
expectedInvocation.invocation.method == orig(expectedInvocation.invocation.method)
expectedInvocation.invocation.arguments == orig(expectedInvocation.invocation.arguments)
expectedInvocation.invocation.arguments[] == orig(expectedInvocation.invocation.arguments[])
expectedInvocation.invocation.currentCaptures == orig(expectedInvocation.invocation.currentCaptures)
expectedInvocation.matcher == orig(expectedInvocation.matcher)
expectedInvocation.matchers == orig(expectedInvocation.matchers)
expectedInvocation.matchers[] == orig(expectedInvocation.matchers[])
results.callCount == orig(results.callCount)
results.callCount == size(expectedInvocation.matchers[])-1
results.ranges == orig(results.ranges)
results.ranges[] == orig(results.ranges[])
results.results == orig(results.results)
results.results[] == orig(results.results[])
size(this.expectedInvocation.invocation.arguments[]) == size(expectedInvocation.matchers[])
size(this.results.ranges[]) == size(expectedInvocation.matchers[])
size(this.results.results[]) == size(expectedInvocation.matchers[])
size(expectedInvocation.invocation.arguments[]) == size(expectedInvocation.matchers[])
size(expectedInvocation.matchers[]) == size(results.ranges[])
size(expectedInvocation.matchers[]) == size(results.results[])
size(expectedInvocation.matchers[]) == orig(size(expectedInvocation.invocation.arguments[]))
size(expectedInvocation.matchers[]) == orig(size(results.ranges[]))
size(expectedInvocation.matchers[]) == orig(size(results.results[]))
expectedInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
expectedInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expectedInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expectedInvocation.matcher == null
expectedInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expectedInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
expectedInvocation.matchers.getClass().getName() == java.util.ArrayList.class
results.callCount == 0
results.ranges[] contains no nulls and has only one value, of length 1
results.ranges[] elements has only one value
results.ranges[].getClass().getName() == [org.easymock.internal.Range]
results.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
results.results[].getClass().getName() == [org.easymock.internal.Result]
results.results[].getClass().getName() elements == org.easymock.internal.Result.class
size(expectedInvocation.matchers[]) == 1
this.expectedInvocation.invocation.mock.getClass().getName() == expectedInvocation.invocation.mock.getClass().getName()
this.expectedInvocation.invocation.arguments.getClass().getName() == expectedInvocation.invocation.arguments.getClass().getName()
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == expectedInvocation.matchers.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == expectedInvocation.matchers.getClass().getName()
this.results.results.getClass().getName() == expectedInvocation.matchers.getClass().getName()
expectedInvocation.invocation.mock.getClass().getName() == orig(expectedInvocation.invocation.mock.getClass().getName())
expectedInvocation.invocation.arguments.getClass().getName() == orig(expectedInvocation.invocation.arguments.getClass().getName())
expectedInvocation.invocation.arguments[] elements == expectedInvocation.invocation.arguments[results.callCount]
expectedInvocation.invocation.currentCaptures.getClass().getName() == expectedInvocation.matchers.getClass().getName()
expectedInvocation.matchers[] elements == expectedInvocation.matchers[results.callCount]
expectedInvocation.matchers.getClass().getName() == results.results.getClass().getName()
expectedInvocation.matchers.getClass().getName() == orig(expectedInvocation.invocation.currentCaptures.getClass().getName())
expectedInvocation.matchers.getClass().getName() == orig(expectedInvocation.matchers.getClass().getName())
expectedInvocation.matchers.getClass().getName() == orig(results.results.getClass().getName())
results.ranges[] elements == results.ranges[results.callCount]
results.results[] elements == results.results[results.callCount]
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation():::ENTER
this.results.callCount == size(this.expectedInvocation.matchers[])-1
this.results.callCount == 0
this.expectedInvocation.invocation.arguments[] elements == this.expectedInvocation.invocation.arguments[this.results.callCount]
this.expectedInvocation.matchers[] elements == this.expectedInvocation.matchers[this.results.callCount]
this.results.ranges[] elements == this.results.ranges[this.results.callCount]
this.results.results[] elements == this.results.results[this.results.callCount]
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getExpectedInvocation():::EXIT
this.expectedInvocation == return
this.expectedInvocation.invocation == return.invocation
this.expectedInvocation.invocation.mock == return.invocation.mock
this.expectedInvocation.invocation.method == return.invocation.method
this.expectedInvocation.invocation.arguments == return.invocation.arguments
this.expectedInvocation.invocation.arguments[] == return.invocation.arguments[]
this.expectedInvocation.invocation.currentCaptures == return.invocation.currentCaptures
this.expectedInvocation.matcher == return.matcher
this.expectedInvocation.matchers == return.matchers
this.expectedInvocation.matchers[] == return.matchers[]
this.results == orig(this.results)
this.results.callCount == orig(this.results.callCount)
this.results.callCount == size(return.matchers[])-1
this.results.ranges == orig(this.results.ranges)
this.results.ranges[] == orig(this.results.ranges[])
this.results.results == orig(this.results.results)
this.results.results[] == orig(this.results.results[])
return == orig(this.expectedInvocation)
return.invocation == orig(this.expectedInvocation.invocation)
return.invocation.mock == orig(this.expectedInvocation.invocation.mock)
return.invocation.method == orig(this.expectedInvocation.invocation.method)
return.invocation.arguments == orig(this.expectedInvocation.invocation.arguments)
return.invocation.arguments[] == orig(this.expectedInvocation.invocation.arguments[])
return.invocation.currentCaptures == orig(this.expectedInvocation.invocation.currentCaptures)
return.matcher == orig(this.expectedInvocation.matcher)
return.matchers == orig(this.expectedInvocation.matchers)
return.matchers[] == orig(this.expectedInvocation.matchers[])
size(this.expectedInvocation.invocation.arguments[]) == size(return.matchers[])
size(this.results.ranges[]) == size(return.matchers[])
size(this.results.results[]) == size(return.matchers[])
size(return.invocation.arguments[]) == size(return.matchers[])
size(return.matchers[]) == orig(size(this.expectedInvocation.invocation.arguments[]))
size(return.matchers[]) == orig(size(this.results.ranges[]))
size(return.matchers[]) == orig(size(this.results.results[]))
this.results.callCount == 0
return.invocation.arguments.getClass().getName() == java.lang.Object[].class
return.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
return.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return.matcher == null
return.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
return.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
return.matchers.getClass().getName() == java.util.ArrayList.class
size(return.matchers[]) == 1
this.expectedInvocation.invocation.mock.getClass().getName() == return.invocation.mock.getClass().getName()
this.expectedInvocation.invocation.arguments.getClass().getName() == return.invocation.arguments.getClass().getName()
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == return.matchers.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == return.matchers.getClass().getName()
this.results.ranges[] elements == this.results.ranges[this.results.callCount]
this.results.results[] elements == this.results.results[this.results.callCount]
this.results.results.getClass().getName() == return.matchers.getClass().getName()
return.invocation.mock.getClass().getName() == orig(this.expectedInvocation.invocation.mock.getClass().getName())
return.invocation.arguments.getClass().getName() == orig(this.expectedInvocation.invocation.arguments.getClass().getName())
return.invocation.arguments[] elements == return.invocation.arguments[this.results.callCount]
return.invocation.currentCaptures.getClass().getName() == return.matchers.getClass().getName()
return.matchers[] elements == return.matchers[this.results.callCount]
return.matchers.getClass().getName() == orig(this.expectedInvocation.invocation.currentCaptures.getClass().getName())
return.matchers.getClass().getName() == orig(this.expectedInvocation.matchers.getClass().getName())
return.matchers.getClass().getName() == orig(this.results.results.getClass().getName())
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getResults():::ENTER
===========================================================================
org.easymock.internal.ExpectedInvocationAndResults.getResults():::EXIT
this.expectedInvocation == orig(this.expectedInvocation)
this.expectedInvocation.invocation == orig(this.expectedInvocation.invocation)
this.expectedInvocation.invocation.mock == orig(this.expectedInvocation.invocation.mock)
this.expectedInvocation.invocation.method == orig(this.expectedInvocation.invocation.method)
this.expectedInvocation.invocation.arguments == orig(this.expectedInvocation.invocation.arguments)
this.expectedInvocation.invocation.arguments[] == orig(this.expectedInvocation.invocation.arguments[])
this.expectedInvocation.invocation.currentCaptures == orig(this.expectedInvocation.invocation.currentCaptures)
this.expectedInvocation.matcher == orig(this.expectedInvocation.matcher)
this.expectedInvocation.matchers == orig(this.expectedInvocation.matchers)
this.expectedInvocation.matchers[] == orig(this.expectedInvocation.matchers[])
this.results == return
this.results.callCount == return.callCount
this.results.ranges == return.ranges
this.results.ranges[] == return.ranges[]
this.results.results == return.results
this.results.results[] == return.results[]
return == orig(this.results)
return.callCount == orig(this.results.callCount)
return.ranges == orig(this.results.ranges)
return.ranges[] == orig(this.results.ranges[])
return.results == orig(this.results.results)
return.results[] == orig(this.results.results[])
size(this.expectedInvocation.invocation.arguments[]) == size(return.ranges[])
size(this.expectedInvocation.matchers[]) == size(return.ranges[])
size(this.results.results[]) == size(return.ranges[])
size(return.ranges[]) == size(return.results[])
size(return.ranges[]) == orig(size(this.expectedInvocation.invocation.arguments[]))
size(return.ranges[]) == orig(size(this.expectedInvocation.matchers[]))
size(return.ranges[]) == orig(size(this.results.results[]))
return.callCount one of { 0, 1 }
return.ranges[] contains no nulls and has only one value, of length 1
return.ranges[] elements has only one value
return.ranges[].getClass().getName() == [org.easymock.internal.Range]
return.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
return.results[].getClass().getName() == [org.easymock.internal.Result]
return.results[].getClass().getName() elements == org.easymock.internal.Result.class
return.results.getClass().getName() == java.util.ArrayList.class
size(return.ranges[]) == 1
this.expectedInvocation.invocation.mock.getClass().getName() == orig(this.expectedInvocation.invocation.mock.getClass().getName())
this.expectedInvocation.invocation.arguments.getClass().getName() == orig(this.expectedInvocation.invocation.arguments.getClass().getName())
this.expectedInvocation.invocation.currentCaptures.getClass().getName() == return.results.getClass().getName()
this.expectedInvocation.matchers.getClass().getName() == return.results.getClass().getName()
this.results.results.getClass().getName() == return.results.getClass().getName()
return.results.getClass().getName() == orig(this.expectedInvocation.invocation.currentCaptures.getClass().getName())
return.results.getClass().getName() == orig(this.expectedInvocation.matchers.getClass().getName())
return.results.getClass().getName() == orig(this.results.results.getClass().getName())
===========================================================================
org.easymock.internal.Invocation:::CLASS
===========================================================================
org.easymock.internal.Invocation:::OBJECT
this.arguments.getClass().getName() == java.lang.Object[].class
this.arguments[] elements != null
this.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(this.arguments[]) == 1
this.mock.getClass().getName() != this.arguments.getClass().getName()
this.mock.getClass().getName() != this.currentCaptures.getClass().getName()
this.arguments.getClass().getName() != this.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.Invocation.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
===========================================================================
org.easymock.internal.Invocation.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
this.mock == orig(mock)
this.method == orig(method)
this.arguments == orig(args)
this.arguments[] == args[]
args[] == orig(args[])
this.mock.getClass().getName() == orig(mock.getClass().getName())
this.arguments.getClass().getName() == orig(args.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.clearCaptures():::ENTER
===========================================================================
org.easymock.internal.Invocation.clearCaptures():::EXIT
this.mock == orig(this.mock)
this.method == orig(this.method)
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.expandVarArgs(boolean, java.lang.Object[]):::ENTER
isVarArgs == false
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
===========================================================================
org.easymock.internal.Invocation.expandVarArgs(boolean, java.lang.Object[]):::EXIT51
===========================================================================
org.easymock.internal.Invocation.expandVarArgs(boolean, java.lang.Object[]):::EXIT
args[] == return[]
args[] == orig(args[])
return == orig(args)
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 1
return.getClass().getName() == orig(args.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.getArguments():::ENTER
===========================================================================
org.easymock.internal.Invocation.getArguments():::EXIT
this.mock == orig(this.mock)
this.method == orig(this.method)
this.arguments == return
this.arguments[] == return[]
this.currentCaptures == orig(this.currentCaptures)
return == orig(this.arguments)
return[] == orig(this.arguments[])
return.getClass().getName() == java.lang.Object[].class
size(return[]) == 1
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == return.getClass().getName()
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
return.getClass().getName() == orig(this.arguments.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.getMethod():::ENTER
===========================================================================
org.easymock.internal.Invocation.getMethod():::EXIT
this.mock == orig(this.mock)
this.method == return
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
return == orig(this.method)
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.getMock():::ENTER
===========================================================================
org.easymock.internal.Invocation.getMock():::EXIT
this.mock == return
this.method == orig(this.method)
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
return == orig(this.mock)
this.mock.getClass().getName() == return.getClass().getName()
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
return.getClass().getName() == orig(this.mock.getClass().getName())
===========================================================================
org.easymock.internal.Invocation.validateCaptures():::ENTER
===========================================================================
org.easymock.internal.Invocation.validateCaptures():::EXIT
this.mock == orig(this.mock)
this.method == orig(this.method)
this.arguments == orig(this.arguments)
this.arguments[] == orig(this.arguments[])
this.currentCaptures == orig(this.currentCaptures)
this.mock.getClass().getName() == orig(this.mock.getClass().getName())
this.arguments.getClass().getName() == orig(this.arguments.getClass().getName())
this.currentCaptures.getClass().getName() == orig(this.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.JavaProxyFactory:::OBJECT
===========================================================================
org.easymock.internal.JavaProxyFactory.JavaProxyFactory():::EXIT
===========================================================================
org.easymock.internal.JavaProxyFactory.createProxy(java.lang.Class, java.lang.reflect.InvocationHandler):::ENTER
toMock has only one value
handler.getClass().getName() == org.easymock.internal.ObjectMethodsFilter.class
===========================================================================
org.easymock.internal.JavaProxyFactory.createProxy(java.lang.Class, java.lang.reflect.InvocationHandler):::EXIT
return.getClass().getName() == com.sun.proxy.$Proxy3.class
===========================================================================
org.easymock.internal.LastControl:::CLASS
org.easymock.internal.LastControl.threadToControl has only one value
org.easymock.internal.LastControl.threadToCurrentInvocation has only one value
org.easymock.internal.LastControl.threadToArgumentMatcherStack has only one value
===========================================================================
org.easymock.internal.LastControl.popCurrentInvocation():::ENTER
===========================================================================
org.easymock.internal.LastControl.popCurrentInvocation():::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
===========================================================================
org.easymock.internal.LastControl.pullMatchers():::ENTER
===========================================================================
org.easymock.internal.LastControl.pullMatchers():::EXIT59
===========================================================================
org.easymock.internal.LastControl.pullMatchers():::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
return == null
===========================================================================
org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.LastControl.pushCurrentInvocation(org.easymock.internal.Invocation):::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl):::ENTER
control.type == org.easymock.internal.MocksControl$MockType.NICE
control.type == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
control.type has only one value
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
control.type in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.LastControl.reportLastControl(org.easymock.internal.MocksControl):::EXIT
org.easymock.internal.LastControl.threadToControl == orig(org.easymock.internal.LastControl.threadToControl)
org.easymock.internal.LastControl.threadToCurrentInvocation == orig(org.easymock.internal.LastControl.threadToCurrentInvocation)
org.easymock.internal.LastControl.threadToArgumentMatcherStack == orig(org.easymock.internal.LastControl.threadToArgumentMatcherStack)
control.state == orig(control.state)
control.behavior == orig(control.behavior)
control.type == org.easymock.internal.MocksControl$MockType.NICE
control.type == orig(control.type)
control.type == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
control.type has only one value
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
control.state.getClass().getName() == orig(control.state.getClass().getName())
control.behavior.getClass().getName() == orig(control.behavior.getClass().getName())
control.type in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MethodSerializationWrapper:::CLASS
org.easymock.internal.MethodSerializationWrapper.primitiveTypes has only one value
org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName() == java.util.HashMap.class
===========================================================================
org.easymock.internal.MethodSerializationWrapper:::OBJECT
this.className.toString == "java.lang.Object"
this.methodName.toString one of { "equals", "hashCode", "toString" }
this.parameterTypeNames.getClass().getName() == java.lang.String[].class
this.parameterTypeNames[] elements != null
this.parameterTypeNames[].getClass().getName() elements == java.lang.String.class
this.parameterTypeNames[].getClass().getName() one of { [], [java.lang.String] }
this.parameterTypeNames[].toString elements == "java.lang.Object"
this.parameterTypeNames[].toString one of { [], [java.lang.Object] }
size(this.parameterTypeNames[]) one of { 0, 1 }
org.easymock.internal.MethodSerializationWrapper.serialVersionUID > size(this.parameterTypeNames[])
org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName() != this.parameterTypeNames.getClass().getName()
this.parameterTypeNames[] elements == this.className
this.className.toString != this.methodName.toString
===========================================================================
org.easymock.internal.MethodSerializationWrapper.MethodSerializationWrapper(java.lang.reflect.Method):::ENTER
===========================================================================
org.easymock.internal.MethodSerializationWrapper.MethodSerializationWrapper(java.lang.reflect.Method):::EXIT
this.className has only one value
this.parameterTypeNames[] elements has only one value
===========================================================================
org.easymock.internal.MethodSerializationWrapper.getMethod():::ENTER
this.className has only one value
this.parameterTypeNames[] elements has only one value
===========================================================================
org.easymock.internal.MethodSerializationWrapper.getMethod():::EXIT
org.easymock.internal.MethodSerializationWrapper.primitiveTypes == orig(org.easymock.internal.MethodSerializationWrapper.primitiveTypes)
this.className == orig(this.className)
this.methodName == orig(this.methodName)
this.parameterTypeNames == orig(this.parameterTypeNames)
this.parameterTypeNames[] == orig(this.parameterTypeNames[])
this.className has only one value
this.parameterTypeNames[] elements has only one value
org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName() == orig(org.easymock.internal.MethodSerializationWrapper.primitiveTypes.getClass().getName())
this.className.toString == orig(this.className.toString)
this.methodName.toString == orig(this.methodName.toString)
this.parameterTypeNames.getClass().getName() == orig(this.parameterTypeNames.getClass().getName())
===========================================================================
org.easymock.internal.MockInvocationHandler:::CLASS
===========================================================================
org.easymock.internal.MockInvocationHandler:::OBJECT
this.control.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
this.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[] elements != null
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
this.control.state.getClass().getName() != this.control.behavior.getClass().getName()
this.control.state.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
this.control.behavior.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MockInvocationHandler.MockInvocationHandler(org.easymock.internal.MocksControl):::ENTER
control.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MockInvocationHandler.MockInvocationHandler(org.easymock.internal.MocksControl):::EXIT
this.control == orig(control)
this.control.state == control.state
this.control.behavior == control.behavior
org.easymock.internal.MocksControl$MockType.NICE == control.type
org.easymock.internal.MocksControl$MockType.NICE == orig(control.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
control.state == orig(control.state)
control.behavior == orig(control.behavior)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
control.state.getClass().getName() == org.easymock.internal.RecordState.class
control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
this.control.state.getClass().getName() == control.state.getClass().getName()
this.control.behavior.getClass().getName() == control.behavior.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
control.state.getClass().getName() == orig(control.state.getClass().getName())
control.behavior.getClass().getName() == orig(control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.MockInvocationHandler.getControl():::ENTER
===========================================================================
org.easymock.internal.MockInvocationHandler.getControl():::EXIT
this.control == return
this.control.state == return.state
this.control.behavior == return.behavior
org.easymock.internal.MocksControl$MockType.NICE == return.type
org.easymock.internal.MocksControl$MockType.NICE == orig(this.control.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
return == orig(this.control)
return.state == orig(this.control.state)
return.behavior == orig(this.control.behavior)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
return.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
this.control.state.getClass().getName() == return.state.getClass().getName()
this.control.behavior.getClass().getName() == return.behavior.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
return.state.getClass().getName() == orig(this.control.state.getClass().getName())
return.behavior.getClass().getName() == orig(this.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
org.easymock.internal.MocksControl.ONCE.minimum == size(args[])
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == size(args[])-1
args[org.easymock.internal.MocksControl.ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.ONCE.maximum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
args[] elements == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
===========================================================================
org.easymock.internal.MockInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
this.control == orig(this.control)
this.control.state == orig(this.control.state)
this.control.behavior == orig(this.control.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.control.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(size(args[]))
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == size(args[])-1
args[] == orig(args[])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
args[org.easymock.internal.MocksControl.ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
orig(args[post(org.easymock.internal.MocksControl.ONCE.minimum)-1]) == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.ONCE.maximum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
orig(args[post(org.easymock.internal.MocksControl.ONCE.maximum)-1]) == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
orig(args[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]) == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == args[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == args[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == args[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(args[org.easymock.internal.MocksControl.ONCE.minimum-1])
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(args[org.easymock.internal.MocksControl.ONCE.maximum-1])
args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(args[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
return == null
this.control.state.getClass().getName() == orig(this.control.state.getClass().getName())
this.control.behavior.getClass().getName() == orig(this.control.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
args[] elements == args[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
===========================================================================
org.easymock.internal.MocksBehavior:::CLASS
===========================================================================
org.easymock.internal.MocksBehavior:::OBJECT
this.nice == this.isThreadSafe
this.checkOrder == this.shouldBeUsedInOneThread
this.position == size(this.stubResults[])
this.behaviorLists[] elements != null
this.behaviorLists[].getClass().getName() elements == org.easymock.internal.UnorderedBehavior.class
this.behaviorLists[].getClass().getName() one of { [], [org.easymock.internal.UnorderedBehavior] }
this.behaviorLists.getClass().getName() == java.util.ArrayList.class
this.stubResults[] == []
this.stubResults[].getClass().getName() == []
this.nice == true
this.checkOrder == false
this.position == 0
this.lastThread == null
this.legacyMatcherProvider == null
size(this.behaviorLists[]) one of { 0, 1 }
org.easymock.internal.MocksBehavior.serialVersionUID > size(this.behaviorLists[])
this.behaviorLists.getClass().getName() == this.stubResults.getClass().getName()
this.position <= size(this.behaviorLists[])
this.position >= size(this.behaviorLists[])-1
org.easymock.internal.LegacyMatcherProvider.serialVersionUID < size(this.behaviorLists[])-1
size(this.behaviorLists[]) >= size(this.stubResults[])
size(this.behaviorLists[])-1 <= size(this.stubResults[])
size(this.behaviorLists[])-1 >= size(this.stubResults[])-1
===========================================================================
org.easymock.internal.MocksBehavior.MocksBehavior(boolean):::ENTER
nice == true
===========================================================================
org.easymock.internal.MocksBehavior.MocksBehavior(boolean):::EXIT
this.behaviorLists[] == this.stubResults[]
this.nice == orig(nice)
this.position == size(this.behaviorLists[])
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
===========================================================================
org.easymock.internal.MocksBehavior.addActual(org.easymock.internal.Invocation):::ENTER
size(this.behaviorLists[]) == size(actual.arguments[])
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(actual.arguments[])-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == actual.currentCaptures.getClass().getName()
actual.arguments[] elements == actual.arguments[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addActual(org.easymock.internal.Invocation):::EXIT98
===========================================================================
org.easymock.internal.MocksBehavior.addActual(org.easymock.internal.Invocation):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == return.shouldFillInStackTrace
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
actual.mock == orig(actual.mock)
actual.method == orig(actual.method)
actual.arguments == orig(actual.arguments)
actual.arguments[] == orig(actual.arguments[])
actual.currentCaptures == orig(actual.currentCaptures)
size(this.behaviorLists[]) == size(actual.arguments[])
size(this.behaviorLists[]) == orig(size(actual.arguments[]))
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(actual.arguments[])-1
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
size(this.stubResults[]) == orig(size(actual.arguments[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == actual.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
this.behaviorLists.getClass().getName() == orig(actual.currentCaptures.getClass().getName())
actual.mock.getClass().getName() == orig(actual.mock.getClass().getName())
actual.arguments.getClass().getName() == orig(actual.arguments.getClass().getName())
actual.arguments[] elements == actual.arguments[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation):::ENTER
this.behaviorLists[] == this.stubResults[]
this.position == size(this.behaviorLists[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])-1
size(this.behaviorLists[]) == size(expected.matchers[])-1
size(expected.invocation.arguments[]) == size(expected.matchers[])
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
size(expected.matchers[]) == 1
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addBehaviorListIfNecessary(org.easymock.internal.ExpectedInvocation):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.behaviorLists[])
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
expected.invocation == orig(expected.invocation)
expected.invocation.mock == orig(expected.invocation.mock)
expected.invocation.method == orig(expected.invocation.method)
expected.invocation.arguments == orig(expected.invocation.arguments)
expected.invocation.arguments[] == orig(expected.invocation.arguments[])
expected.invocation.currentCaptures == orig(expected.invocation.currentCaptures)
expected.matcher == orig(expected.matcher)
expected.matchers == orig(expected.matchers)
expected.matchers[] == orig(expected.matchers[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])
size(this.behaviorLists[]) == size(expected.matchers[])
size(this.behaviorLists[]) == orig(size(expected.invocation.arguments[]))
size(this.behaviorLists[]) == orig(size(expected.matchers[]))
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(expected.invocation.arguments[])-1
size(this.stubResults[]) == size(expected.matchers[])-1
size(this.stubResults[]) == orig(size(expected.invocation.arguments[]))-1
size(this.stubResults[]) == orig(size(expected.matchers[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.invocation.currentCaptures.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.matchers.getClass().getName())
expected.invocation.mock.getClass().getName() == orig(expected.invocation.mock.getClass().getName())
expected.invocation.arguments.getClass().getName() == orig(expected.invocation.arguments.getClass().getName())
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::ENTER
this.behaviorLists[] == this.stubResults[]
this.nice == result.shouldFillInStackTrace
this.position == size(this.behaviorLists[])
count.minimum == count.maximum
count.minimum == size(expected.matchers[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])-1
size(this.behaviorLists[]) == size(expected.matchers[])-1
size(expected.invocation.arguments[]) == size(expected.matchers[])
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.minimum-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.maximum-1]
expected.matchers[this.position] == expected.matchers[count.minimum-1]
expected.matchers[this.position] == expected.matchers[count.maximum-1]
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
count has only one value
count.minimum == 1
size(expected.matchers[]) == 1
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.behaviorLists[])
this.stubResults[] == orig(this.stubResults[])
this.nice == result.shouldFillInStackTrace
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.nice == orig(result.shouldFillInStackTrace)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
expected.invocation == orig(expected.invocation)
expected.invocation.mock == orig(expected.invocation.mock)
expected.invocation.method == orig(expected.invocation.method)
expected.invocation.arguments == orig(expected.invocation.arguments)
expected.invocation.arguments[] == orig(expected.invocation.arguments[])
expected.invocation.currentCaptures == orig(expected.invocation.currentCaptures)
expected.matcher == orig(expected.matcher)
expected.matchers == orig(expected.matchers)
expected.matchers[] == orig(expected.matchers[])
result.value == orig(result.value)
count.minimum == count.maximum
count.minimum == orig(count.minimum)
count.minimum == orig(count.maximum)
count.minimum == size(this.behaviorLists[])
size(this.behaviorLists[]) == size(expected.invocation.arguments[])
size(this.behaviorLists[]) == size(expected.matchers[])
size(this.behaviorLists[]) == orig(size(expected.invocation.arguments[]))
size(this.behaviorLists[]) == orig(size(expected.matchers[]))
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == size(expected.invocation.arguments[])-1
size(this.stubResults[]) == size(expected.matchers[])-1
size(this.stubResults[]) == orig(size(expected.invocation.arguments[]))-1
size(this.stubResults[]) == orig(size(expected.matchers[]))-1
this.behaviorLists[this.position] == this.behaviorLists[count.minimum-1]
this.behaviorLists[this.position] == this.behaviorLists[count.maximum-1]
this.behaviorLists[this.position] == this.behaviorLists[orig(count.minimum)-1]
this.behaviorLists[this.position] == this.behaviorLists[orig(count.maximum)-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.minimum-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[count.maximum-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[orig(count.minimum)-1]
expected.invocation.arguments[this.position] == expected.invocation.arguments[orig(count.maximum)-1]
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[post(count.minimum)-1])
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[post(count.maximum)-1])
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[count.minimum-1])
expected.invocation.arguments[this.position] == orig(expected.invocation.arguments[count.maximum-1])
expected.matchers[this.position] == expected.matchers[count.minimum-1]
expected.matchers[this.position] == expected.matchers[count.maximum-1]
expected.matchers[this.position] == expected.matchers[orig(count.minimum)-1]
expected.matchers[this.position] == expected.matchers[orig(count.maximum)-1]
expected.matchers[this.position] == orig(expected.matchers[post(count.minimum)-1])
expected.matchers[this.position] == orig(expected.matchers[post(count.maximum)-1])
expected.matchers[this.position] == orig(expected.matchers[count.minimum-1])
expected.matchers[this.position] == orig(expected.matchers[count.maximum-1])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
count.minimum == 1
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.behaviorLists.getClass().getName() == expected.matchers.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.invocation.currentCaptures.getClass().getName())
this.behaviorLists.getClass().getName() == orig(expected.matchers.getClass().getName())
expected.invocation.mock.getClass().getName() == orig(expected.invocation.mock.getClass().getName())
expected.invocation.arguments.getClass().getName() == orig(expected.invocation.arguments.getClass().getName())
expected.invocation.arguments[] elements == expected.invocation.arguments[this.position]
expected.matchers[] elements == expected.matchers[this.position]
result.value.getClass().getName() == orig(result.value.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.checkOrder(boolean):::ENTER
this.behaviorLists[] == this.stubResults[]
this.checkOrder == value
this.position == size(this.behaviorLists[])
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
===========================================================================
org.easymock.internal.MocksBehavior.checkOrder(boolean):::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == this.stubResults[]
this.behaviorLists[] == orig(this.behaviorLists[])
this.behaviorLists[] == orig(this.stubResults[])
this.stubResults == orig(this.stubResults)
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.checkOrder == orig(value)
this.position == orig(this.position)
this.position == size(this.behaviorLists[])
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
this.behaviorLists[] == []
this.behaviorLists[].getClass().getName() == []
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.checkThreadSafety():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.checkThreadSafety():::EXIT211
===========================================================================
org.easymock.internal.MocksBehavior.checkThreadSafety():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.isThreadSafe():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.isThreadSafe():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == return
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.isThreadSafe == return
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
return == orig(this.nice)
return == orig(this.isThreadSafe)
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
return == true
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.isThreadSafe():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.MocksBehavior.lastBehaviorList():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.lastBehaviorList():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == return.results[]
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == return.checkOrder
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
return == this.behaviorLists[this.position]
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
return in this.behaviorLists[]
this.behaviorLists[] elements == return
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == return.results.getClass().getName()
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksBehavior.verify():::ENTER
size(this.behaviorLists[])-1 == size(this.stubResults[])
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
===========================================================================
org.easymock.internal.MocksBehavior.verify():::EXIT
this.behaviorLists == orig(this.behaviorLists)
this.behaviorLists[] == orig(this.behaviorLists[])
this.stubResults == orig(this.stubResults)
this.stubResults[] == orig(this.stubResults[])
this.nice == orig(this.nice)
this.nice == orig(this.isThreadSafe)
this.checkOrder == orig(this.checkOrder)
this.checkOrder == orig(this.shouldBeUsedInOneThread)
this.position == orig(this.position)
this.lastThread == orig(this.lastThread)
this.legacyMatcherProvider == orig(this.legacyMatcherProvider)
size(this.behaviorLists[])-1 == size(this.stubResults[])
size(this.stubResults[]) == orig(size(this.behaviorLists[]))-1
this.behaviorLists[].getClass().getName() == [org.easymock.internal.UnorderedBehavior]
size(this.behaviorLists[]) == 1
this.behaviorLists[] elements == this.behaviorLists[this.position]
this.behaviorLists.getClass().getName() == orig(this.behaviorLists.getClass().getName())
this.behaviorLists.getClass().getName() == orig(this.stubResults.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl$MockType:::CLASS
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MocksControl$MockType:::OBJECT
===========================================================================
org.easymock.internal.MocksControl$MockType.MockType(java.lang.String, int):::ENTER
$hidden$1.toString one of { "DEFAULT", "NICE", "STRICT" }
$hidden$2 one of { 0, 1, 2 }
===========================================================================
org.easymock.internal.MocksControl$MockType.MockType(java.lang.String, int):::EXIT
$hidden$1.toString one of { "DEFAULT", "NICE", "STRICT" }
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.easymock.internal.MocksControl$MockType.values():::ENTER
===========================================================================
org.easymock.internal.MocksControl$MockType.values():::EXIT
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == return[]
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
return has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == return.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl:::CLASS
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.ONCE.maximum
org.easymock.internal.MocksControl.ONCE.minimum == org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.ONCE.minimum == 1
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == 2147483647
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == 0
===========================================================================
org.easymock.internal.MocksControl:::OBJECT
this.type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.DEFAULT == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1] == org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum]
this.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[] elements != null
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum] has only one value
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] has only one value
this.state.getClass().getName() != this.behavior.getClass().getName()
this.state.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
this.behavior.getClass().getName() != org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName()
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MocksControl.MocksControl(org.easymock.internal.MocksControl$MockType):::ENTER
type == org.easymock.internal.MocksControl$MockType.NICE
org.easymock.internal.MocksControl$MockType.NICE has only one value
org.easymock.internal.MocksControl$MockType.DEFAULT has only one value
org.easymock.internal.MocksControl$MockType.STRICT has only one value
org.easymock.internal.MocksControl$MockType.$VALUES has only one value
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == org.easymock.internal.MocksControl$MockType[].class
org.easymock.internal.MocksControl$MockType.$VALUES[] contains no nulls and has only one value, of length 3
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() == [org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType, org.easymock.internal.MocksControl.MockType]
org.easymock.internal.MocksControl$MockType.$VALUES[].getClass().getName() elements == org.easymock.internal.MocksControl.MockType.class
size(org.easymock.internal.MocksControl$MockType.$VALUES[]) == 3
org.easymock.internal.MocksControl$MockType.NICE in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.DEFAULT in org.easymock.internal.MocksControl$MockType.$VALUES[]
org.easymock.internal.MocksControl$MockType.STRICT in org.easymock.internal.MocksControl$MockType.$VALUES[]
===========================================================================
org.easymock.internal.MocksControl.MocksControl(org.easymock.internal.MocksControl$MockType):::EXIT
org.easymock.internal.MocksControl$MockType.NICE == orig(type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.createMock(java.lang.Class):::ENTER
this.state.getClass().getName() == org.easymock.internal.RecordState.class
toMock has only one value
===========================================================================
org.easymock.internal.MocksControl.createMock(java.lang.Class):::EXIT
this.state == orig(this.state)
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
return.getClass().getName() == com.sun.proxy.$Proxy3.class
this.state.getClass().getName() == orig(this.state.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.createProxyFactory(java.lang.Class):::ENTER
this.state.getClass().getName() == org.easymock.internal.RecordState.class
toMock has only one value
===========================================================================
org.easymock.internal.MocksControl.createProxyFactory(java.lang.Class):::EXIT
this.state == orig(this.state)
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
return.getClass().getName() == org.easymock.internal.JavaProxyFactory.class
this.state.getClass().getName() == orig(this.state.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.getState():::ENTER
===========================================================================
org.easymock.internal.MocksControl.getState():::EXIT
this.state == return
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
return == orig(this.state)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == return.getClass().getName()
this.behavior.getClass().getName() != return.getClass().getName()
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() != return.getClass().getName()
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
return.getClass().getName() == orig(this.state.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.replay():::ENTER
this.state.getClass().getName() == org.easymock.internal.RecordState.class
===========================================================================
org.easymock.internal.MocksControl.replay():::EXIT
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.ReplayState.class
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.reset():::ENTER
this.state == null
this.behavior == null
===========================================================================
org.easymock.internal.MocksControl.reset():::EXIT
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.RecordState.class
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.MocksControl.verify():::ENTER
this.state.getClass().getName() == org.easymock.internal.ReplayState.class
===========================================================================
org.easymock.internal.MocksControl.verify():::EXIT
this.state == orig(this.state)
this.behavior == orig(this.behavior)
org.easymock.internal.MocksControl$MockType.NICE == orig(this.type)
org.easymock.internal.MocksControl$MockType.NICE == orig(org.easymock.internal.MocksControl$MockType.NICE)
org.easymock.internal.MocksControl$MockType.DEFAULT == orig(org.easymock.internal.MocksControl$MockType.DEFAULT)
org.easymock.internal.MocksControl$MockType.STRICT == orig(org.easymock.internal.MocksControl$MockType.STRICT)
org.easymock.internal.MocksControl$MockType.$VALUES == orig(org.easymock.internal.MocksControl$MockType.$VALUES)
org.easymock.internal.MocksControl$MockType.$VALUES[] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[])
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.minimum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.ONCE.maximum)
org.easymock.internal.MocksControl.ONCE.minimum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum)
org.easymock.internal.MocksControl.AT_LEAST_ONCE.maximum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.maximum)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum)
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.ONCE.maximum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == org.easymock.internal.MocksControl$MockType.$VALUES[orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1]
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.ONCE.maximum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[post(org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum)-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.minimum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ONCE.maximum-1])
org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.ZERO_OR_MORE.minimum] == orig(org.easymock.internal.MocksControl$MockType.$VALUES[org.easymock.internal.MocksControl.AT_LEAST_ONCE.minimum-1])
this.state.getClass().getName() == org.easymock.internal.ReplayState.class
this.state.getClass().getName() == orig(this.state.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName() == orig(org.easymock.internal.MocksControl$MockType.$VALUES.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter:::CLASS
===========================================================================
org.easymock.internal.ObjectMethodsFilter:::OBJECT
this.delegate.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
this.delegate.control.type has only one value
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
this.name == null
this.delegate.control.state.getClass().getName() != this.delegate.control.behavior.getClass().getName()
===========================================================================
org.easymock.internal.ObjectMethodsFilter.ObjectMethodsFilter(java.lang.Class, org.easymock.internal.MockInvocationHandler, java.lang.String):::ENTER
toMock has only one value
delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
delegate.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
delegate.control.type has only one value
org.easymock.internal.MocksControl.ONCE has only one value
org.easymock.internal.MocksControl.AT_LEAST_ONCE has only one value
org.easymock.internal.MocksControl.ZERO_OR_MORE has only one value
name == null
===========================================================================
org.easymock.internal.ObjectMethodsFilter.ObjectMethodsFilter(java.lang.Class, org.easymock.internal.MockInvocationHandler, java.lang.String):::EXIT
this.delegate == orig(delegate)
this.delegate.control == delegate.control
this.delegate.control.state == delegate.control.state
this.delegate.control.behavior == delegate.control.behavior
this.delegate.control.type == delegate.control.type
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(name)
delegate.control == orig(delegate.control)
delegate.control.state == orig(delegate.control.state)
delegate.control.behavior == orig(delegate.control.behavior)
delegate.control.type == orig(delegate.control.type)
delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
delegate.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
delegate.control.type has only one value
this.delegate.control.state.getClass().getName() == delegate.control.state.getClass().getName()
this.delegate.control.behavior.getClass().getName() == delegate.control.behavior.getClass().getName()
delegate.control.state.getClass().getName() == orig(delegate.control.state.getClass().getName())
delegate.control.behavior.getClass().getName() == orig(delegate.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter.getDelegate():::ENTER
===========================================================================
org.easymock.internal.ObjectMethodsFilter.getDelegate():::EXIT
this.equalsMethod == orig(this.equalsMethod)
this.hashCodeMethod == orig(this.hashCodeMethod)
this.toStringMethod == orig(this.toStringMethod)
this.delegate == return
this.delegate.control == return.control
this.delegate.control.state == return.control.state
this.delegate.control.behavior == return.control.behavior
this.delegate.control.type == return.control.type
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
return == orig(this.delegate)
return.control == orig(this.delegate.control)
return.control.state == orig(this.delegate.control.state)
return.control.behavior == orig(this.delegate.control.behavior)
return.control.type == orig(this.delegate.control.type)
return.control.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
return.control.type has only one value
this.delegate.control.state.getClass().getName() == return.control.state.getClass().getName()
this.delegate.control.behavior.getClass().getName() == return.control.behavior.getClass().getName()
return.control.state.getClass().getName() == orig(this.delegate.control.state.getClass().getName())
return.control.behavior.getClass().getName() == orig(this.delegate.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::ENTER
args.getClass().getName() == java.lang.Object[].class
size(args[]) == 1
this.delegate.control.state.getClass().getName() != proxy.getClass().getName()
this.delegate.control.state.getClass().getName() != args.getClass().getName()
this.delegate.control.behavior.getClass().getName() != proxy.getClass().getName()
this.delegate.control.behavior.getClass().getName() != args.getClass().getName()
proxy.getClass().getName() != args.getClass().getName()
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT64
return has only one value
args[] elements == orig(proxy)
orig(proxy) in args[]
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT72
this.name == return
return == null
===========================================================================
org.easymock.internal.ObjectMethodsFilter.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]):::EXIT
this.equalsMethod == orig(this.equalsMethod)
this.hashCodeMethod == orig(this.hashCodeMethod)
this.toStringMethod == orig(this.toStringMethod)
this.delegate == orig(this.delegate)
this.delegate.control == orig(this.delegate.control)
this.delegate.control.state == orig(this.delegate.control.state)
this.delegate.control.behavior == orig(this.delegate.control.behavior)
this.delegate.control.type == orig(this.delegate.control.type)
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
args[] == orig(args[])
return.getClass().getName() == java.lang.Boolean.class
this.delegate.control.state.getClass().getName() == orig(this.delegate.control.state.getClass().getName())
this.delegate.control.state.getClass().getName() != orig(proxy.getClass().getName())
this.delegate.control.state.getClass().getName() != orig(args.getClass().getName())
this.delegate.control.behavior.getClass().getName() == orig(this.delegate.control.behavior.getClass().getName())
this.delegate.control.behavior.getClass().getName() != orig(proxy.getClass().getName())
this.delegate.control.behavior.getClass().getName() != orig(args.getClass().getName())
===========================================================================
org.easymock.internal.ObjectMethodsFilter.readObject(java.io.ObjectInputStream):::ENTER
this.equalsMethod == this.hashCodeMethod
this.equalsMethod == this.toStringMethod
this has only one value
this.equalsMethod == null
this.delegate == null
stream has only one value
===========================================================================
org.easymock.internal.ObjectMethodsFilter.readObject(java.io.ObjectInputStream):::EXIT
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
this.equalsMethod has only one value
this.hashCodeMethod has only one value
this.toStringMethod has only one value
this.delegate has only one value
this.delegate.control has only one value
this.delegate.control.state has only one value
this.delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
this.delegate.control.behavior has only one value
===========================================================================
org.easymock.internal.ObjectMethodsFilter.writeObject(java.io.ObjectOutputStream):::ENTER
this has only one value
this.equalsMethod has only one value
this.hashCodeMethod has only one value
this.toStringMethod has only one value
this.delegate has only one value
this.delegate.control has only one value
this.delegate.control.state has only one value
this.delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
this.delegate.control.behavior has only one value
===========================================================================
org.easymock.internal.ObjectMethodsFilter.writeObject(java.io.ObjectOutputStream):::EXIT
this.equalsMethod == orig(this.equalsMethod)
this.hashCodeMethod == orig(this.hashCodeMethod)
this.toStringMethod == orig(this.toStringMethod)
this.delegate == orig(this.delegate)
this.delegate.control == orig(this.delegate.control)
this.delegate.control.state == orig(this.delegate.control.state)
this.delegate.control.behavior == orig(this.delegate.control.behavior)
this.delegate.control.type == orig(this.delegate.control.type)
org.easymock.internal.MocksControl.ONCE == orig(org.easymock.internal.MocksControl.ONCE)
org.easymock.internal.MocksControl.AT_LEAST_ONCE == orig(org.easymock.internal.MocksControl.AT_LEAST_ONCE)
org.easymock.internal.MocksControl.ZERO_OR_MORE == orig(org.easymock.internal.MocksControl.ZERO_OR_MORE)
this.name == orig(this.name)
this.equalsMethod has only one value
this.hashCodeMethod has only one value
this.toStringMethod has only one value
this.delegate has only one value
this.delegate.control has only one value
this.delegate.control.state has only one value
this.delegate.control.state.getClass().getName() == org.easymock.internal.RecordState.class
this.delegate.control.behavior has only one value
this.delegate.control.state.getClass().getName() == orig(this.delegate.control.state.getClass().getName())
this.delegate.control.behavior.getClass().getName() == orig(this.delegate.control.behavior.getClass().getName())
===========================================================================
org.easymock.internal.Range:::CLASS
===========================================================================
org.easymock.internal.Range:::OBJECT
this.minimum one of { 0, 1 }
this.maximum one of { 1, 2147483647 }
org.easymock.internal.Range.serialVersionUID < this.minimum
org.easymock.internal.Range.serialVersionUID < this.maximum
this.minimum <= this.maximum
===========================================================================
org.easymock.internal.Range.Range(int):::ENTER
count == 1
===========================================================================
org.easymock.internal.Range.Range(int):::EXIT
this.minimum == this.maximum
this.minimum == orig(count)
this.minimum == 1
===========================================================================
org.easymock.internal.Range.Range(int, int):::ENTER
minimum one of { 0, 1 }
maximum one of { 1, 2147483647 }
===========================================================================
org.easymock.internal.Range.Range(int, int):::EXIT
this.minimum == orig(minimum)
this.maximum == orig(maximum)
===========================================================================
org.easymock.internal.Range.contains(int):::ENTER
this.minimum == this.maximum
this.minimum == count
this.minimum == 1
===========================================================================
org.easymock.internal.Range.contains(int):::EXIT
this.minimum == this.maximum
this.minimum == orig(this.minimum)
this.minimum == orig(this.maximum)
this.minimum == orig(count)
this.minimum == 1
return == true
===========================================================================
org.easymock.internal.Range.contains(int):::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.Range.getMaximum():::ENTER
this.minimum == this.maximum
this has only one value
this.minimum == 1
===========================================================================
org.easymock.internal.Range.getMaximum():::EXIT
this.minimum == return
this.maximum == return
return == orig(this.minimum)
return == orig(this.maximum)
return == 1
===========================================================================
org.easymock.internal.Range.getMinimum():::ENTER
this.minimum == this.maximum
this has only one value
this.minimum == 1
===========================================================================
org.easymock.internal.Range.getMinimum():::EXIT
this.minimum == return
this.maximum == return
return == orig(this.minimum)
return == orig(this.maximum)
return == 1
===========================================================================
org.easymock.internal.Range.hasOpenCount():::ENTER
this.minimum == this.maximum
this has only one value
this.minimum == 1
===========================================================================
org.easymock.internal.Range.hasOpenCount():::EXIT
this.minimum == this.maximum
this.minimum == orig(this.minimum)
this.minimum == orig(this.maximum)
this.minimum == 1
return == false
===========================================================================
org.easymock.internal.Range.hasOpenCount():::EXIT;condition="not(return == true)"
===========================================================================
org.easymock.internal.RecordState:::CLASS
org.easymock.internal.RecordState.emptyReturnValues has only one value
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == java.util.HashMap.class
org.easymock.internal.RecordState.primitiveToWrapperType has only one value
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName()
===========================================================================
org.easymock.internal.RecordState:::OBJECT
size(this.lastInvocation.invocation.arguments[]) == size(this.lastInvocation.matchers[])
this.lastInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class
this.lastInvocation.invocation.arguments[] elements != null
this.lastInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
this.lastInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
this.lastInvocation.matcher == null
this.lastInvocation.matchers[] elements != null
this.lastInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
this.lastInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
this.lastInvocation.matchers.getClass().getName() == java.util.ArrayList.class
this.lastResult == null
this.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
size(this.lastInvocation.matchers[]) == 1
this.lastInvocation.invocation.mock.getClass().getName() != this.lastInvocation.invocation.arguments.getClass().getName()
this.lastInvocation.invocation.mock.getClass().getName() != this.lastInvocation.matchers.getClass().getName()
this.lastInvocation.invocation.mock.getClass().getName() != this.behavior.getClass().getName()
this.lastInvocation.invocation.mock.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() != this.lastInvocation.matchers.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() != this.behavior.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
this.lastInvocation.invocation.currentCaptures.getClass().getName() == this.lastInvocation.matchers.getClass().getName()
this.lastInvocation.matchers.getClass().getName() != this.behavior.getClass().getName()
this.lastInvocation.matchers.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
this.behavior.getClass().getName() != org.easymock.internal.RecordState.emptyReturnValues.getClass().getName()
===========================================================================
org.easymock.internal.RecordState.RecordState(org.easymock.internal.IMocksBehavior):::ENTER
behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
===========================================================================
org.easymock.internal.RecordState.RecordState(org.easymock.internal.IMocksBehavior):::EXIT
this.behavior == orig(behavior)
this.lastInvocation == null
this.lastInvocationUsed == true
this.behavior.getClass().getName() == orig(behavior.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.assertRecordState():::ENTER
this.lastInvocation == null
this.lastInvocationUsed == true
===========================================================================
org.easymock.internal.RecordState.assertRecordState():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
this.lastInvocation == null
this.lastInvocationUsed == true
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.closeMethod():::ENTER
===========================================================================
org.easymock.internal.RecordState.closeMethod():::EXIT258
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastInvocation == null
===========================================================================
org.easymock.internal.RecordState.closeMethod():::EXIT266
orig(this.lastInvocationUsed) == false
===========================================================================
org.easymock.internal.RecordState.closeMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.invocation.arguments.getClass().getName() == java.lang.Object[].class)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent])
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matcher == null)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matchers.getClass().getName() == java.util.ArrayList.class)
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals])
(orig(this.lastInvocationUsed) == false)  ==>  (this.lastInvocation.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class)
(orig(this.lastInvocationUsed) == true)  ==>  (this.lastInvocation == null)
(orig(this.lastInvocationUsed) == true)  ==>  (this.lastInvocationUsed == orig(this.lastInvocationUsed))
this.lastInvocationUsed == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class):::ENTER
type has only one value
===========================================================================
org.easymock.internal.RecordState.emptyReturnValueFor(java.lang.Class):::EXIT
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
return == null
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.invoke(org.easymock.internal.Invocation):::ENTER
this.lastInvocation == null
this.lastInvocationUsed == true
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.RecordState.invoke(org.easymock.internal.Invocation):::EXIT
this.lastInvocation.invocation == orig(invocation)
this.lastInvocation.invocation.mock == invocation.mock
this.lastInvocation.invocation.method == invocation.method
this.lastInvocation.invocation.arguments == invocation.arguments
this.lastInvocation.invocation.arguments[] == invocation.arguments[]
this.lastInvocation.invocation.currentCaptures == invocation.currentCaptures
this.lastInvocation.matcher == return
this.lastResult == return
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
return == orig(this.lastInvocation)
size(this.lastInvocation.matchers[]) == size(invocation.arguments[])
this.lastInvocationUsed == false
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
return == null
size(invocation.arguments[]) == 1
this.lastInvocation.invocation.mock.getClass().getName() == invocation.mock.getClass().getName()
this.lastInvocation.invocation.arguments.getClass().getName() == invocation.arguments.getClass().getName()
this.lastInvocation.invocation.currentCaptures.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.lastInvocation.matchers.getClass().getName() == invocation.currentCaptures.getClass().getName()
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.isLastResultOrVoidMethod():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.isLastResultOrVoidMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
return == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.isLastResultOrVoidMethod():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.RecordState.lastMethodIsVoidMethod():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.lastMethodIsVoidMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
return == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.lastMethodIsVoidMethod():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.RecordState.replay():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.replay():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == true
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.requireLastResultOrVoidMethod():::ENTER
this.lastInvocationUsed == false
===========================================================================
org.easymock.internal.RecordState.requireLastResultOrVoidMethod():::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.RecordState.requireMethodCall(java.lang.String):::ENTER
this.lastInvocationUsed == false
failMessage has only one value
failMessage.toString == "times"
===========================================================================
org.easymock.internal.RecordState.requireMethodCall(java.lang.String):::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastInvocationUsed == orig(this.lastInvocationUsed)
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == false
failMessage.toString == "times"
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
failMessage.toString == orig(failMessage.toString)
===========================================================================
org.easymock.internal.RecordState.times(org.easymock.internal.Range):::ENTER
range.minimum == range.maximum
range.minimum == size(this.lastInvocation.matchers[])
this.lastInvocationUsed == false
range has only one value
range.minimum == 1
this.lastInvocation.invocation.arguments[] elements == this.lastInvocation.invocation.arguments[range.minimum-1]
this.lastInvocation.matchers[] elements == this.lastInvocation.matchers[range.minimum-1]
===========================================================================
org.easymock.internal.RecordState.times(org.easymock.internal.Range):::EXIT
this.lastInvocation == orig(this.lastInvocation)
this.lastInvocation.invocation == orig(this.lastInvocation.invocation)
this.lastInvocation.invocation.mock == orig(this.lastInvocation.invocation.mock)
this.lastInvocation.invocation.method == orig(this.lastInvocation.invocation.method)
this.lastInvocation.invocation.arguments == orig(this.lastInvocation.invocation.arguments)
this.lastInvocation.invocation.arguments[] == orig(this.lastInvocation.invocation.arguments[])
this.lastInvocation.invocation.currentCaptures == orig(this.lastInvocation.invocation.currentCaptures)
this.lastInvocation.matcher == orig(this.lastInvocation.matcher)
this.lastInvocation.matchers == orig(this.lastInvocation.matchers)
this.lastInvocation.matchers[] == orig(this.lastInvocation.matchers[])
this.lastResult == orig(this.lastResult)
this.behavior == orig(this.behavior)
org.easymock.internal.RecordState.emptyReturnValues == orig(org.easymock.internal.RecordState.emptyReturnValues)
org.easymock.internal.RecordState.primitiveToWrapperType == orig(org.easymock.internal.RecordState.primitiveToWrapperType)
range.minimum == range.maximum
range.minimum == orig(range.minimum)
range.minimum == orig(range.maximum)
range.minimum == size(this.lastInvocation.matchers[])
size(this.lastInvocation.matchers[]) == orig(size(this.lastInvocation.invocation.arguments[]))
this.lastInvocationUsed == true
range.minimum == 1
this.lastInvocation.invocation.mock.getClass().getName() == orig(this.lastInvocation.invocation.mock.getClass().getName())
this.lastInvocation.invocation.arguments.getClass().getName() == orig(this.lastInvocation.invocation.arguments.getClass().getName())
this.lastInvocation.invocation.arguments[] elements == this.lastInvocation.invocation.arguments[range.minimum-1]
this.lastInvocation.matchers[] elements == this.lastInvocation.matchers[range.minimum-1]
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.invocation.currentCaptures.getClass().getName())
this.lastInvocation.matchers.getClass().getName() == orig(this.lastInvocation.matchers.getClass().getName())
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.emptyReturnValues.getClass().getName())
org.easymock.internal.RecordState.emptyReturnValues.getClass().getName() == orig(org.easymock.internal.RecordState.primitiveToWrapperType.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState:::CLASS
===========================================================================
org.easymock.internal.ReplayState:::OBJECT
this.behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
===========================================================================
org.easymock.internal.ReplayState.ReplayState(org.easymock.internal.IMocksBehavior):::ENTER
behavior.getClass().getName() == org.easymock.internal.MocksBehavior.class
===========================================================================
org.easymock.internal.ReplayState.ReplayState(org.easymock.internal.IMocksBehavior):::EXIT
this.behavior == orig(behavior)
this.behavior.getClass().getName() == orig(behavior.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState.invoke(org.easymock.internal.Invocation):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ReplayState.invoke(org.easymock.internal.Invocation):::EXIT47
===========================================================================
org.easymock.internal.ReplayState.invoke(org.easymock.internal.Invocation):::EXIT
this.behavior == orig(this.behavior)
this.lock == orig(this.lock)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
return == null
size(invocation.arguments[]) == 1
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation):::ENTER
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
size(invocation.arguments[]) == 1
===========================================================================
org.easymock.internal.ReplayState.invokeInner(org.easymock.internal.Invocation):::EXIT
this.behavior == orig(this.behavior)
this.lock == orig(this.lock)
invocation.mock == orig(invocation.mock)
invocation.method == orig(invocation.method)
invocation.arguments == orig(invocation.arguments)
invocation.arguments[] == orig(invocation.arguments[])
invocation.currentCaptures == orig(invocation.currentCaptures)
invocation.arguments.getClass().getName() == java.lang.Object[].class
invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
invocation.currentCaptures.getClass().getName() == java.util.ArrayList.class
return == null
size(invocation.arguments[]) == 1
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
invocation.mock.getClass().getName() == orig(invocation.mock.getClass().getName())
invocation.arguments.getClass().getName() == orig(invocation.arguments.getClass().getName())
invocation.currentCaptures.getClass().getName() == orig(invocation.currentCaptures.getClass().getName())
===========================================================================
org.easymock.internal.ReplayState.verify():::ENTER
===========================================================================
org.easymock.internal.ReplayState.verify():::EXIT
this.behavior == orig(this.behavior)
this.lock == orig(this.lock)
this.behavior.getClass().getName() == orig(this.behavior.getClass().getName())
===========================================================================
org.easymock.internal.Result$1ReturningAnswer:::CLASS
===========================================================================
org.easymock.internal.Result$1ReturningAnswer:::OBJECT
this.val$value == null
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.ReturningAnswer(java.lang.Object):::ENTER
$hidden$1 == null
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.ReturningAnswer(java.lang.Object):::EXIT
this.val$value == orig($hidden$1)
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.answer():::ENTER
===========================================================================
org.easymock.internal.Result$1ReturningAnswer.answer():::EXIT
this.val$value == return
return == orig(this.val$value)
return == null
===========================================================================
org.easymock.internal.Result:::CLASS
===========================================================================
org.easymock.internal.Result:::OBJECT
this.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
this.shouldFillInStackTrace == true
===========================================================================
org.easymock.internal.Result.Result(org.easymock.IAnswer, boolean):::ENTER
value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
shouldFillInStackTrace == true
===========================================================================
org.easymock.internal.Result.Result(org.easymock.IAnswer, boolean):::EXIT
this.value == orig(value)
this.shouldFillInStackTrace == orig(shouldFillInStackTrace)
this.value.getClass().getName() == orig(value.getClass().getName())
===========================================================================
org.easymock.internal.Result.answer():::ENTER
===========================================================================
org.easymock.internal.Result.answer():::EXIT
this.value == orig(this.value)
this.shouldFillInStackTrace == orig(this.shouldFillInStackTrace)
return == null
this.value.getClass().getName() == orig(this.value.getClass().getName())
===========================================================================
org.easymock.internal.Result.createReturnResult(java.lang.Object):::ENTER
value == null
===========================================================================
org.easymock.internal.Result.createReturnResult(java.lang.Object):::EXIT
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
return.shouldFillInStackTrace == true
===========================================================================
org.easymock.internal.Results:::CLASS
===========================================================================
org.easymock.internal.Results:::OBJECT
size(this.ranges[]) == size(this.results[])
this.callCount one of { 0, 1 }
this.ranges[] elements has only one value
this.ranges[] elements != null
this.ranges[].getClass().getName() elements == org.easymock.internal.Range.class
this.ranges[].getClass().getName() one of { [], [org.easymock.internal.Range] }
this.results[] elements != null
this.results[].getClass().getName() elements == org.easymock.internal.Result.class
this.results[].getClass().getName() one of { [], [org.easymock.internal.Result] }
this.results.getClass().getName() == java.util.ArrayList.class
size(this.ranges[]) one of { 0, 1 }
org.easymock.internal.Results.serialVersionUID < this.callCount
org.easymock.internal.Results.serialVersionUID < size(this.ranges[])-1
this.callCount <= size(this.ranges[])
this.callCount >= size(this.ranges[])-1
===========================================================================
org.easymock.internal.Results.Results():::EXIT
this.callCount == size(this.ranges[])
this.callCount == 0
this.ranges[] == []
this.ranges[].getClass().getName() == []
this.results[] == []
===========================================================================
org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range):::ENTER
this.callCount == size(this.ranges[])
range.minimum == range.maximum
this.callCount == 0
this.ranges[] == []
this.ranges[].getClass().getName() == []
this.results[] == []
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
range has only one value
range.minimum == 1
===========================================================================
org.easymock.internal.Results.add(org.easymock.internal.Result, org.easymock.internal.Range):::EXIT
this.callCount == orig(this.callCount)
this.callCount == size(this.ranges[])-1
this.ranges == orig(this.ranges)
this.results == orig(this.results)
result.value == orig(result.value)
result.shouldFillInStackTrace == orig(result.shouldFillInStackTrace)
range.minimum == range.maximum
range.minimum == orig(range.minimum)
range.minimum == orig(range.maximum)
range.minimum == size(this.ranges[])
orig(result) == this.results[this.callCount]
orig(range) == this.ranges[this.callCount]
size(this.ranges[])-1 == orig(size(this.ranges[]))
size(this.ranges[])-1 == orig(size(this.results[]))
this.ranges[this.callCount] == this.ranges[range.minimum-1]
this.ranges[this.callCount] == this.ranges[range.maximum-1]
this.ranges[this.callCount] == this.ranges[orig(range.minimum)-1]
this.ranges[this.callCount] == this.ranges[orig(range.maximum)-1]
this.results[this.callCount] == this.results[range.minimum-1]
this.results[this.callCount] == this.results[range.maximum-1]
this.results[this.callCount] == this.results[orig(range.minimum)-1]
this.results[this.callCount] == this.results[orig(range.maximum)-1]
this.callCount == 0
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
range.minimum == 1
size(this.ranges[]) == 1
orig(range) in this.ranges[]
this.ranges[] elements == orig(range)
this.ranges[] elements == this.ranges[this.callCount]
orig(result) in this.results[]
this.results[] elements == orig(result)
this.results[] elements == this.results[this.callCount]
this.results.getClass().getName() == orig(this.results.getClass().getName())
result.value.getClass().getName() == orig(result.value.getClass().getName())
===========================================================================
org.easymock.internal.Results.getCallCount():::ENTER
this.callCount == size(this.ranges[])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
===========================================================================
org.easymock.internal.Results.getCallCount():::EXIT
this.callCount == return
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
return == orig(this.callCount)
return == size(this.ranges[])
size(this.ranges[]) == orig(size(this.results[]))
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
return == 1
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[return-1]
this.results[] elements == this.results[return-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.Results.getMainInterval():::ENTER
this.callCount == size(this.ranges[])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
===========================================================================
org.easymock.internal.Results.getMainInterval():::EXIT
this.callCount == return.minimum
this.callCount == return.maximum
this.callCount == orig(this.callCount)
this.callCount == size(this.ranges[])
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
size(this.ranges[]) == orig(size(this.results[]))
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.Results.hasValidCallCount():::ENTER
this.callCount == size(this.ranges[])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
===========================================================================
org.easymock.internal.Results.hasValidCallCount():::EXIT
this.callCount == orig(this.callCount)
this.callCount == size(this.ranges[])
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
size(this.ranges[]) == orig(size(this.results[]))
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
return == true
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
this.results[] elements == this.results[this.callCount-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.Results.hasValidCallCount():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.Results.next():::ENTER
this.callCount == size(this.ranges[])-1
this.callCount == 0
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount]
this.results[] elements == this.results[this.callCount]
===========================================================================
org.easymock.internal.Results.next():::EXIT56
===========================================================================
org.easymock.internal.Results.next():::EXIT
this.callCount == size(this.ranges[])
this.ranges == orig(this.ranges)
this.ranges[] == orig(this.ranges[])
this.results == orig(this.results)
this.results[] == orig(this.results[])
return == this.results[this.callCount-1]
orig(this.callCount) == size(this.ranges[])-1
size(this.ranges[]) == orig(size(this.results[]))
this.ranges[this.callCount-1] == this.ranges[orig(this.callCount)]
this.ranges[this.callCount-1] == orig(this.ranges[this.callCount])
this.results[this.callCount-1] == this.results[orig(this.callCount)]
this.results[this.callCount-1] == orig(this.results[this.callCount])
this.callCount == 1
this.ranges[] contains no nulls and has only one value, of length 1
this.ranges[].getClass().getName() == [org.easymock.internal.Range]
this.results[].getClass().getName() == [org.easymock.internal.Result]
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
return.shouldFillInStackTrace == true
size(this.ranges[]) == 1
this.ranges[] elements == this.ranges[this.callCount-1]
return in this.results[]
this.results[] elements == return
this.results[] elements == this.results[this.callCount-1]
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior:::CLASS
===========================================================================
org.easymock.internal.UnorderedBehavior:::OBJECT
this.results[] elements != null
this.results[].getClass().getName() elements == org.easymock.internal.ExpectedInvocationAndResults.class
this.results[].getClass().getName() one of { [], [org.easymock.internal.ExpectedInvocationAndResults] }
this.results.getClass().getName() == java.util.ArrayList.class
this.checkOrder == false
size(this.results[]) one of { 0, 1 }
org.easymock.internal.UnorderedBehavior.serialVersionUID > size(this.results[])
===========================================================================
org.easymock.internal.UnorderedBehavior.UnorderedBehavior(boolean):::ENTER
checkOrder == false
===========================================================================
org.easymock.internal.UnorderedBehavior.UnorderedBehavior(boolean):::EXIT
this.checkOrder == orig(checkOrder)
this.results[] == []
this.results[].getClass().getName() == []
===========================================================================
org.easymock.internal.UnorderedBehavior.addActual(org.easymock.internal.Invocation):::ENTER
size(this.results[]) == size(actual.arguments[])
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
size(this.results[]) == 1
this.results.getClass().getName() == actual.currentCaptures.getClass().getName()
===========================================================================
org.easymock.internal.UnorderedBehavior.addActual(org.easymock.internal.Invocation):::EXIT63
===========================================================================
org.easymock.internal.UnorderedBehavior.addActual(org.easymock.internal.Invocation):::EXIT
this.results == orig(this.results)
this.results[] == orig(this.results[])
this.checkOrder == orig(this.checkOrder)
actual.mock == orig(actual.mock)
actual.method == orig(actual.method)
actual.arguments == orig(actual.arguments)
actual.arguments[] == orig(actual.arguments[])
actual.currentCaptures == orig(actual.currentCaptures)
size(this.results[]) == size(actual.arguments[])
size(this.results[]) == orig(size(actual.arguments[]))
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
actual.arguments.getClass().getName() == java.lang.Object[].class
actual.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
actual.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
return.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
return.shouldFillInStackTrace == true
size(this.results[]) == 1
this.results.getClass().getName() == actual.currentCaptures.getClass().getName()
this.results.getClass().getName() == orig(this.results.getClass().getName())
this.results.getClass().getName() == orig(actual.currentCaptures.getClass().getName())
actual.mock.getClass().getName() == orig(actual.mock.getClass().getName())
actual.arguments.getClass().getName() == orig(actual.arguments.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::ENTER
count.minimum == count.maximum
count.minimum == size(expected.matchers[])
size(this.results[]) == size(expected.invocation.arguments[])-1
size(this.results[]) == size(expected.matchers[])-1
size(expected.invocation.arguments[]) == size(expected.matchers[])
this.results[] == []
this.results[].getClass().getName() == []
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
count has only one value
count.minimum == 1
size(expected.matchers[]) == 1
this.results.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.results.getClass().getName() == expected.matchers.getClass().getName()
expected.invocation.arguments[] elements == expected.invocation.arguments[count.minimum-1]
expected.matchers[] elements == expected.matchers[count.minimum-1]
===========================================================================
org.easymock.internal.UnorderedBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::EXIT45
===========================================================================
org.easymock.internal.UnorderedBehavior.addExpected(org.easymock.internal.ExpectedInvocation, org.easymock.internal.Result, org.easymock.internal.Range):::EXIT
this.results == orig(this.results)
this.checkOrder == orig(this.checkOrder)
expected.invocation == orig(expected.invocation)
expected.invocation.mock == orig(expected.invocation.mock)
expected.invocation.method == orig(expected.invocation.method)
expected.invocation.arguments == orig(expected.invocation.arguments)
expected.invocation.arguments[] == orig(expected.invocation.arguments[])
expected.invocation.currentCaptures == orig(expected.invocation.currentCaptures)
expected.matcher == orig(expected.matcher)
expected.matchers == orig(expected.matchers)
expected.matchers[] == orig(expected.matchers[])
result.value == orig(result.value)
result.shouldFillInStackTrace == orig(result.shouldFillInStackTrace)
count.minimum == count.maximum
count.minimum == orig(count.minimum)
count.minimum == orig(count.maximum)
count.minimum == size(this.results[])
size(this.results[]) == size(expected.invocation.arguments[])
size(this.results[]) == size(expected.matchers[])
size(this.results[]) == orig(size(expected.invocation.arguments[]))
size(this.results[]) == orig(size(expected.matchers[]))
size(this.results[])-1 == orig(size(this.results[]))
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
expected.invocation.arguments.getClass().getName() == java.lang.Object[].class
expected.invocation.arguments[].getClass().getName() == [java.beans.PropertyChangeEvent]
expected.invocation.arguments[].getClass().getName() elements == java.beans.PropertyChangeEvent.class
expected.matcher == null
expected.matchers[].getClass().getName() == [org.easymock.internal.matchers.Equals]
expected.matchers[].getClass().getName() elements == org.easymock.internal.matchers.Equals.class
result.value.getClass().getName() == org.easymock.internal.Result$1ReturningAnswer.class
result.shouldFillInStackTrace == true
count.minimum == 1
size(this.results[]) == 1
this.results[] elements == this.results[count.minimum-1]
this.results.getClass().getName() == expected.invocation.currentCaptures.getClass().getName()
this.results.getClass().getName() == expected.matchers.getClass().getName()
this.results.getClass().getName() == orig(this.results.getClass().getName())
this.results.getClass().getName() == orig(expected.invocation.currentCaptures.getClass().getName())
this.results.getClass().getName() == orig(expected.matchers.getClass().getName())
expected.invocation.mock.getClass().getName() == orig(expected.invocation.mock.getClass().getName())
expected.invocation.arguments.getClass().getName() == orig(expected.invocation.arguments.getClass().getName())
expected.invocation.arguments[] elements == expected.invocation.arguments[count.minimum-1]
expected.matchers[] elements == expected.matchers[count.minimum-1]
result.value.getClass().getName() == orig(result.value.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::ENTER
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
size(this.results[]) == 1
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT75
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT75;condition="return == true"
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT
this.results == orig(this.results)
this.results[] == orig(this.results[])
this.checkOrder == orig(this.checkOrder)
this.results[].getClass().getName() == [org.easymock.internal.ExpectedInvocationAndResults]
return == true
size(this.results[]) == 1
this.results.getClass().getName() == orig(this.results.getClass().getName())
===========================================================================
org.easymock.internal.UnorderedBehavior.verify():::EXIT;condition="return == true"
===========================================================================
org.easymock.internal.matchers.Equals:::CLASS
===========================================================================
org.easymock.internal.matchers.Equals:::OBJECT
this.expected.getClass().getName() == java.beans.PropertyChangeEvent.class
===========================================================================
org.easymock.internal.matchers.Equals.Equals(java.lang.Object):::ENTER
expected.getClass().getName() == java.beans.PropertyChangeEvent.class
===========================================================================
org.easymock.internal.matchers.Equals.Equals(java.lang.Object):::EXIT
this.expected == orig(expected)
this.expected.getClass().getName() == orig(expected.getClass().getName())
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::ENTER
this.expected == actual
this.expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT37
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT37;condition="return == true"
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT
this.expected == orig(this.expected)
this.expected == orig(actual)
return == true
this.expected.getClass().getName() == orig(this.expected.getClass().getName())
this.expected.getClass().getName() == orig(actual.getClass().getName())
===========================================================================
org.easymock.internal.matchers.Equals.matches(java.lang.Object):::EXIT;condition="return == true"
