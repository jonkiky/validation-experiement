===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(double, double, double):::ENTER
expected == actual
delta == 1.0E-4
expected != delta
===========================================================================
junit.framework.Assert.assertEquals(double, double, double):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(float, float, float):::ENTER
expected == actual
delta == 1.0E-4
expected != delta
===========================================================================
junit.framework.Assert.assertEquals(float, float, float):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected one of { -10, 1, 10 }
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, byte, byte):::ENTER
expected == actual
message.toString one of { "maximum(byte,byte,byte) 1 failed", "minimum(byte,byte,byte) 1 failed" }
expected one of { 123, 125 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, byte, byte):::EXIT
message.toString one of { "maximum(byte,byte,byte) 1 failed", "minimum(byte,byte,byte) 1 failed" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::ENTER
expected == actual
delta one of { 0.0, 1.0E-4 }
expected != delta
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::EXIT96
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, double, double, double):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, float, float, float):::ENTER
expected == actual
delta one of { 0.0, 1.0E-4 }
expected != delta
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, float, float, float):::EXIT114
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, float, float, float):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT61
orig(expected) == orig(actual)
orig(expected) == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
orig(expected) != null
orig(actual) != null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, long, long):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, short, short):::ENTER
expected == actual
message.toString one of { "maximum(short,short,short) 1 failed", "minimum(short,short,short) 1 failed" }
expected one of { 1234, 1236 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, short, short):::EXIT
message.toString one of { "maximum(short,short,short) 1 failed", "minimum(short,short,short) 1 failed" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(long, long):::ENTER
expected == actual
expected one of { -10, 10 }
===========================================================================
junit.framework.Assert.assertEquals(long, long):::EXIT
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message.toString one of { "createNumber(String) succeeded", "isNumber(String) LANG-664 failed" }
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString one of { "createNumber(String) succeeded", "isNumber(String) LANG-664 failed" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.math.NumberUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this != null
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures != null
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fErrors != null
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners != null
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2 != null
$hidden$2.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
$hidden$2.fName != null
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test != null
this.val$test.fName != null
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 51
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 51
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.math.NumberUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 51
this.fTests[].getClass().getName() == [org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
size(this.fTests[]) == 51
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.math.NumberUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 51 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(this.fTests[]) one of { 1, 51 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 51 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest, org.apache.commons.lang3.math.NumberUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 51 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 52 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 51 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 10
runTime == 1904
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 10
return has only one value
return.toString == "1.904"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 10
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
runTime == 1904
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 10
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 10
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 10
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 10
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 10
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 10
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 10
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 10
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fRunTests == orig(result.fRunTests)
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 10
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 51
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 10
runTime == 1904
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 10
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test != null
test.getClass().getName() == org.apache.commons.lang3.math.NumberUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn != orig(this.fColumn)
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 10 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
this.fPrinter.fColumn == 10
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 51
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
this.fPrinter.fColumn == 10
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 51
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 10
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 10
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 51
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.JavaVersion:::CLASS
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion:::OBJECT
this == org.apache.commons.lang3.JavaVersion.JAVA_1_8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == this.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == this.name
this in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
this.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
this.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
this.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == this.name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::ENTER
$hidden$1.toString > name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
this.value == orig(value)
this.name == orig(name)
this.name.toString == name.toString
$hidden$1.toString > name.toString
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == requiredVersion
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == requiredVersion.name.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT72
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT72;condition="return == true"
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(requiredVersion)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(this)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(requiredVersion.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(requiredVersion.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(this.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(this.name)
return == true
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == requiredVersion.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(requiredVersion.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(this.name.toString)
===========================================================================
org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::ENTER
nom has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT116
===========================================================================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == return
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == return.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == return.name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
nom.toString == "1.8"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
nom.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == nom.toString
nom.toString == return.name.toString
nom.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
nom.toString == orig(nom.toString)
===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.sunPattern == org.apache.commons.lang3.StringUtils.java6Pattern
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK has only one value
org.apache.commons.lang3.StringUtils.sunAvailable == false
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == null
org.apache.commons.lang3.StringUtils.sunPattern has only one value
org.apache.commons.lang3.StringUtils.java6Available == true
org.apache.commons.lang3.StringUtils.java6NormalizeMethod has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD has only one value
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == java.text.Normalizer$Form.class
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != cs.getClass().getName()
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT224
org.apache.commons.lang3.StringUtils.java6Available == return
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT224;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT228
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT228;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT231
org.apache.commons.lang3.StringUtils.java6Available == return
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT231;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
(return == false)  ==>  (org.apache.commons.lang3.StringUtils.sunAvailable == return)
(return == true)  ==>  (org.apache.commons.lang3.StringUtils.java6Available == return)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != orig(cs.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT;condition="return == true"
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT;condition="not(return == true)"
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != cs.getClass().getName()
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT183;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT184
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT184;condition="return == true"
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK == orig(org.apache.commons.lang3.StringUtils.WHITESPACE_BLOCK)
org.apache.commons.lang3.StringUtils.sunAvailable == orig(org.apache.commons.lang3.StringUtils.sunAvailable)
org.apache.commons.lang3.StringUtils.sunDecomposeMethod == orig(org.apache.commons.lang3.StringUtils.sunDecomposeMethod)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.sunPattern)
org.apache.commons.lang3.StringUtils.sunPattern == orig(org.apache.commons.lang3.StringUtils.java6Pattern)
org.apache.commons.lang3.StringUtils.java6Available == orig(org.apache.commons.lang3.StringUtils.java6Available)
org.apache.commons.lang3.StringUtils.java6NormalizeMethod == orig(org.apache.commons.lang3.StringUtils.java6NormalizeMethod)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD)
(return == false)  ==>  (org.apache.commons.lang3.StringUtils.sunAvailable == return)
(return == true)  ==>  (org.apache.commons.lang3.StringUtils.java6Available == return)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() == orig(org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName())
org.apache.commons.lang3.StringUtils.java6NormalizerFormNFD.getClass().getName() != orig(cs.getClass().getName())
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="return == true"
org.apache.commons.lang3.StringUtils.java6Available == return
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
org.apache.commons.lang3.StringUtils.sunAvailable == return
===========================================================================
org.apache.commons.lang3.SystemUtils:::CLASS
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == org.apache.commons.lang3.SystemUtils.JAVA_COMPILER
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == org.apache.commons.lang3.JavaVersion.JAVA_1_8
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == org.apache.commons.lang3.JavaVersion.JAVA_1_5.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_AIX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_IRIX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_LINUX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_MAC
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_OS2
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_UNIX
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX has only one value
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == "Windows"
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY has only one value
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString == "user.home"
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY has only one value
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString == "user.dir"
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY has only one value
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == "java.io.tmpdir"
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY has only one value
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString == "java.home"
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT has only one value
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString == "sun.awt.windows.WToolkit"
org.apache.commons.lang3.SystemUtils.FILE_ENCODING has only one value
org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString == "GBK"
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString == "\\"
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == null
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV has only one value
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == "sun.awt.Win32GraphicsEnvironment"
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB has only one value
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString == "sun.awt.windows.WPrinterJob"
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH has only one value
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString == "C:\\Users\\jonkiky\\.m2\\repository\\org\\easymock\\easymock\\2.5.2\\easymock-2.5.2.jar;C:\\Users\\jonkiky\\.m2\\repository\\junit\\junit\\4.7\\junit-4.7.jar;F:\\Regression2\\commons-lang3-3.0-src\\target\\classes;F:\\Regression2\\commons-lang3-3.0-src\\target\\test-classes;F:/experiment20170325Regression/commons-lang-2.1.a/lib/daikon.jar;;F:\\experiment20170325Regression\\commons-lang-2.1.a\\lib\\daikon.jar"
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString == "52.0"
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS has only one value
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString == "C:\\Program Files\\Java\\jre1.8.0_101\\lib\\endorsed"
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS has only one value
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString == "C:\\Program Files\\Java\\jre1.8.0_101\\lib\\ext;C:\\WINDOWS\\Sun\\Java\\lib\\ext"
org.apache.commons.lang3.SystemUtils.JAVA_HOME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString == "C:\\Program Files\\Java\\jre1.8.0_101"
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString == "C:\\Users\\jonkiky\\AppData\\Local\\Temp\\"
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH has only one value
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString == "C:\\ProgramData\\Oracle\\Java\\javapath;C:\\WINDOWS\\Sun\\Java\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Python27\\Lib\\site-packages\\PyQt4;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python27;C:\\Python27\\DLLs;C:\\Python27\\Scripts;C:\\Python27\\Lib\\site-packages\\vtk;C:\\Python27\\gnuplot\\binary;C:\\Python27\\Lib\\site-packages\\osgeo;C:\\Program Files (x86)\\pythonxy\\SciTE-3.5.1-4;C:\\Program Files (x86)\\pythonxy\\console;C:\\Program Files (x86)\\pythonxy\\swig;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Java\\jdk1.7.0_79\\bin;E:\\Software\\gradle-3.2.1-all\\gradle-3.2.1\\bin;C:\\Program Files (x86)\\PuTTY\\;E:\\Software\\apache-maven-3.3.9-bin\\apache-maven-3.3.9\\bin;E:\\Software\\geckodriver-v0.16.0-win64\\;C:\\program files (x86)\\skype\\Phone\\;C:\\Users\\jonkiky\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\jonkiky\\AppData\\Roaming\\npm;."
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString == "Java(TM) SE Runtime Environment"
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString == "1.8.0_101-b13"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString == "Java Platform API Specification"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == "Oracle Corporation"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8 has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == 1.5
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == "0.9"
org.apache.commons.lang3.JavaVersion.ENUM$VALUES has only one value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == org.apache.commons.lang3.JavaVersion[].class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() == [org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion, org.apache.commons.lang3.JavaVersion]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].getClass().getName() elements == org.apache.commons.lang3.JavaVersion.class
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == [1.5, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name contains no nulls and has only one value, of length 9
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name elements != null
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString == [0.9, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8]
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == 1.1
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == "1.1"
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == 1.2
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == "1.2"
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == 1.3
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == "1.3"
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == 1.4
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == "1.4"
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == "1.5"
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == 1.6
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == "1.6"
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == 1.7
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == "1.7"
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == 1.8
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name has only one value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == "1.8"
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value == 1.8
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString == "http://java.oracle.com/"
org.apache.commons.lang3.SystemUtils.JAVA_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString == "1.8.0_101"
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString == "mixed mode"
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString == "Java HotSpot(TM) 64-Bit Server VM"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == "Java Virtual Machine Specification"
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION has only one value
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString == "25.101-b13"
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString == "\r\n"
org.apache.commons.lang3.SystemUtils.OS_ARCH has only one value
org.apache.commons.lang3.SystemUtils.OS_ARCH.toString == "amd64"
org.apache.commons.lang3.SystemUtils.OS_NAME has only one value
org.apache.commons.lang3.SystemUtils.OS_NAME.toString == "Windows 10"
org.apache.commons.lang3.SystemUtils.OS_VERSION has only one value
org.apache.commons.lang3.SystemUtils.OS_VERSION.toString == "10.0"
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR has only one value
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString == ";"
org.apache.commons.lang3.SystemUtils.USER_COUNTRY has only one value
org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString == "US"
org.apache.commons.lang3.SystemUtils.USER_DIR has only one value
org.apache.commons.lang3.SystemUtils.USER_DIR.toString == "F:\\Regression2\\Daikon\\Alg"
org.apache.commons.lang3.SystemUtils.USER_HOME has only one value
org.apache.commons.lang3.SystemUtils.USER_HOME.toString == "C:\\Users\\jonkiky"
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE has only one value
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString == "en"
org.apache.commons.lang3.SystemUtils.USER_NAME has only one value
org.apache.commons.lang3.SystemUtils.USER_NAME.toString == "jonkiky"
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE has only one value
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString == "America/New_York"
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == false
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == true
size(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]) == 9
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_1 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_2 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_3 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_4 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_5 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_6 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_7 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_1_8 in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[]
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements >= org.apache.commons.lang3.JavaVersion.JAVA_1_1.value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value elements <= org.apache.commons.lang3.JavaVersion.JAVA_1_8.value
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::ENTER
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT1244
===========================================================================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
property.toString != return.toString
property.toString == orig(property.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == requiredVersion
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == requiredVersion.name.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::EXIT
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX == orig(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX)
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY == orig(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY)
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY == orig(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY)
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY)
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT == orig(org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT)
org.apache.commons.lang3.SystemUtils.FILE_ENCODING == orig(org.apache.commons.lang3.SystemUtils.FILE_ENCODING)
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_COMPILER)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_FONTS == orig(org.apache.commons.lang3.SystemUtils.JAVA_UTIL_PREFS_PREFERENCES_FACTORY)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS == orig(org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS)
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS == orig(org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS)
org.apache.commons.lang3.SystemUtils.JAVA_HOME == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR)
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH == orig(org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(requiredVersion)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == requiredVersion.value
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(requiredVersion.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == requiredVersion.name
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(requiredVersion.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL)
org.apache.commons.lang3.SystemUtils.JAVA_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO)
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION)
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR)
org.apache.commons.lang3.SystemUtils.OS_ARCH == orig(org.apache.commons.lang3.SystemUtils.OS_ARCH)
org.apache.commons.lang3.SystemUtils.OS_NAME == orig(org.apache.commons.lang3.SystemUtils.OS_NAME)
org.apache.commons.lang3.SystemUtils.OS_VERSION == orig(org.apache.commons.lang3.SystemUtils.OS_VERSION)
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR == orig(org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR)
org.apache.commons.lang3.SystemUtils.USER_COUNTRY == orig(org.apache.commons.lang3.SystemUtils.USER_COUNTRY)
org.apache.commons.lang3.SystemUtils.USER_DIR == orig(org.apache.commons.lang3.SystemUtils.USER_DIR)
org.apache.commons.lang3.SystemUtils.USER_HOME == orig(org.apache.commons.lang3.SystemUtils.USER_HOME)
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE == orig(org.apache.commons.lang3.SystemUtils.USER_LANGUAGE)
org.apache.commons.lang3.SystemUtils.USER_NAME == orig(org.apache.commons.lang3.SystemUtils.USER_NAME)
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE == orig(org.apache.commons.lang3.SystemUtils.USER_TIMEZONE)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_2)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_3)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_4)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_5)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_6)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_JAVA_1_7)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_AIX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_MAC)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_OS2)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_UNIX)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_2000)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_95)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_98)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_ME)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_NT)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_XP)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_VISTA)
org.apache.commons.lang3.SystemUtils.IS_JAVA_1_1 == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_7)
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == return
org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS == orig(org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS)
org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString == orig(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX.toString)
org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY.toString)
org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY.toString)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY.toString)
org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY.toString)
org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString == orig(org.apache.commons.lang3.SystemUtils.AWT_TOOLKIT.toString)
org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString == orig(org.apache.commons.lang3.SystemUtils.FILE_ENCODING.toString)
org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.FILE_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_GRAPHICSENV.toString)
org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_AWT_PRINTERJOB.toString)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_PATH.toString)
org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_CLASS_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_ENDORSED_DIRS.toString)
org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_EXT_DIRS.toString)
org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_HOME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_LIBRARY_PATH.toString)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_RUNTIME_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VENDOR.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VENDOR.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_VERSION.toString)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == requiredVersion.name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(requiredVersion.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VENDOR_URL.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VERSION.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_INFO.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_SPECIFICATION_NAME.toString)
org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.JAVA_VM_VERSION.toString)
org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.OS_ARCH.toString == orig(org.apache.commons.lang3.SystemUtils.OS_ARCH.toString)
org.apache.commons.lang3.SystemUtils.OS_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.OS_NAME.toString)
org.apache.commons.lang3.SystemUtils.OS_VERSION.toString == orig(org.apache.commons.lang3.SystemUtils.OS_VERSION.toString)
org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString == orig(org.apache.commons.lang3.SystemUtils.PATH_SEPARATOR.toString)
org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString == orig(org.apache.commons.lang3.SystemUtils.USER_COUNTRY.toString)
org.apache.commons.lang3.SystemUtils.USER_DIR.toString == orig(org.apache.commons.lang3.SystemUtils.USER_DIR.toString)
org.apache.commons.lang3.SystemUtils.USER_HOME.toString == orig(org.apache.commons.lang3.SystemUtils.USER_HOME.toString)
org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString == orig(org.apache.commons.lang3.SystemUtils.USER_LANGUAGE.toString)
org.apache.commons.lang3.SystemUtils.USER_NAME.toString == orig(org.apache.commons.lang3.SystemUtils.USER_NAME.toString)
org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString == orig(org.apache.commons.lang3.SystemUtils.USER_TIMEZONE.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::ENTER
version has only one value
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
versionPrefix in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString > versionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT1330;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
version.toString == "1.8"
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name
version.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < version.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == version.toString
version.toString > versionPrefix.toString
version.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
version.toString == orig(version.toString)
versionPrefix.toString == orig(versionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
osVersion has only one value
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT1350;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
osName.toString == "Windows 10"
osVersion.toString == "10.0"
osNamePrefix.toString one of { "Windows", "Windows 9" }
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString > osVersion.toString
osName.toString != osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osName.toString == orig(osName.toString)
osVersion.toString < osNamePrefix.toString
osVersion.toString < osVersionPrefix.toString
osVersion.toString == orig(osVersion.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
osName.toString != osNamePrefix.toString
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="return == true"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT1366;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[])
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].value)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Windows")
osName.toString == "Windows 10"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.ENUM$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
osName.toString != osNamePrefix.toString
osName.toString == orig(osName.toString)
osNamePrefix.toString == orig(osNamePrefix.toString)
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="return == true"
osNamePrefix.toString == "Windows"
return == true
orig(osNamePrefix) has only one value
===========================================================================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.daikon.NumberUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.NumberUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.math.NumberUtils:::CLASS
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO has only one value
org.apache.commons.lang3.math.NumberUtils.LONG_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO has only one value
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO has only one value
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO has only one value
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO has only one value
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO has only one value
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE has only one value
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.NumberUtils():::EXIT
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigDecimal(java.lang.String):::ENTER
str.toString one of { "1.1E-700", "1234.5" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigDecimal(java.lang.String):::EXIT710
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigDecimal(java.lang.String):::EXIT716
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigDecimal(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString one of { "1.1E-700", "1234.5" }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigInteger(java.lang.String):::ENTER
str.toString one of { "109223372036854775807", "12345", "12345678901234567890" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigInteger(java.lang.String):::EXIT694
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigInteger(java.lang.String):::EXIT696
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createBigInteger(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString one of { "109223372036854775807", "12345", "12345678901234567890" }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String):::EXIT644
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String):::EXIT646
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createDouble(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createFloat(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createFloat(java.lang.String):::EXIT628
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createFloat(java.lang.String):::EXIT630
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createFloat(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createInteger(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createInteger(java.lang.String):::EXIT661
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createInteger(java.lang.String):::EXIT664
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createInteger(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createLong(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createLong(java.lang.String):::EXIT678
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createLong(java.lang.String):::EXIT680
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createLong(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT446
return == null
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT456
str.toString == "--2.3"
return == null
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT459
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT506
return.getClass().getName() == java.lang.Long.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT510
str.toString == "12345678901234567890L"
return has only one value
return.getClass().getName() == java.math.BigInteger.class
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT521
str.toString one of { "-221.23F", "1234.5F", "1234.5f" }
return.getClass().getName() == java.lang.Float.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT533
str.toString one of { "123.4E21D", "1234.5D", "1234.5d" }
return.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT539
str.toString == "1.1E-700F"
return has only one value
return.getClass().getName() == java.math.BigDecimal.class
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT559
return.getClass().getName() == java.lang.Integer.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT564
str.toString one of { "102147483647", "2147483648" }
return.getClass().getName() == java.lang.Long.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT568
str.toString == "109223372036854775807"
return has only one value
return.getClass().getName() == java.math.BigInteger.class
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT576
return.getClass().getName() == java.lang.Float.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT584
return.getClass().getName() == java.lang.Double.class
===========================================================================
org.apache.commons.lang3.math.NumberUtils.createNumber(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::EXIT610
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::EXIT610;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::EXIT614
str.toString == ""
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::EXIT614;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == false
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isAllZeros(java.lang.String):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT1288
str.toString == ""
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT1288;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT1292
str.toString one of { "1234.5", "1ab", "abc" }
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT1292;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT1295
return == true
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT1295;condition="return == true"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1313
str.toString == ""
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1313;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1334
str.toString one of { "0xFAE-1", "0xGF" }
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1334;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1337
str.toString one of { "0x0", "0xABC123" }
return == true
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1337;condition="return == true"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1353
str.toString one of { "-123E2.12", ".12.3" }
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1353;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1369
str.toString one of { "--2.3", "-123E+-212" }
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1369;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1374
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1374;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1381
return == true
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1381;condition="return == true"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1385
str.toString == "-123E"
return == false
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1385;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1393
(str.toString == ".")  <==>  (return == false)
(str.toString == "2.")  <==>  (return == true)
str.toString one of { ".", "2." }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1393;condition="return == true"
str.toString == "2."
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1393;condition="not(return == true)"
str.toString == "."
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1400
(str.toString == "123.4E-D")  <==>  (return == false)
(str.toString == "123.4E-D")  ==>  (orig(str) has only one value)
(str.toString one of { "-221.23F", "123.4E21D" })  <==>  (return == true)
str.toString one of { "-221.23F", "123.4E-D", "123.4E21D" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1400;condition="return == true"
str.toString one of { "-221.23F", "123.4E21D" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1400;condition="not(return == true)"
str.toString == "123.4E-D"
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1405
str.toString == "22338L"
return == true
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1405;condition="return == true"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1406
str.toString one of { "1.1L", "1234E5l" }
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1406;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1408
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT1408;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.math.NumberUtils.isNumber(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(byte, byte, byte):::ENTER
a one of { 123, 124, 125 }
b one of { 123, 124, 125 }
c one of { 123, 125 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(byte, byte, byte):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 125
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(byte[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(byte[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { 5, 9, 10 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(double, double, double):::ENTER
c one of { 12.3, 14.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(double, double, double):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 13.3, 14.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(double[]):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(double[]):::EXIT1022
array[] one of { [1.2, NaN, 3.7, 27.0, 42.0, NaN], [NaN, 1.2, NaN, 3.7, 27.0, 42.0, NaN] }
return == Double.NaN
orig(size(array[])) one of { 6, 7 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(double[]):::EXIT1029
orig(size(array[])) one of { 1, 2, 5 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(double[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
(orig(size(array[])) one of { 1, 2, 5 })  ==>  (return in array[])
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(float, float, float):::ENTER
c one of { 12.3, 14.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(float, float, float):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 13.3, 14.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(float[]):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(float[]):::EXIT1053
array[] one of { [1.2, NaN, 3.7, 27.0, 42.0, NaN], [NaN, 1.2, NaN, 3.7, 27.0, 42.0, NaN] }
return == Double.NaN
orig(size(array[])) one of { 6, 7 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(float[]):::EXIT1060
orig(size(array[])) one of { 1, 2, 5 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(float[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
(orig(size(array[])) one of { 1, 2, 5 })  ==>  (return in array[])
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(int, int, int):::ENTER
a one of { 12344, 12345 }
b one of { 12343, 12344, 12345 }
c one of { 12343, 12345 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(int, int, int):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 12345
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(int[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(int[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { 5, 9, 10 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(long, long, long):::ENTER
a one of { 12344, 12345 }
b one of { 12343, 12344, 12345 }
c one of { 12343, 12345 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(long, long, long):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 12345
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(long[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(long[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { 5, 9, 10 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(short, short, short):::ENTER
a one of { 1234, 1235, 1236 }
b one of { 1234, 1235, 1236 }
c one of { 1234, 1236 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(short, short, short):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 1236
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(short[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.max(short[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { 5, 9, 10 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(byte, byte, byte):::ENTER
a one of { 123, 124 }
b one of { 123, 124, 125 }
c one of { 123, 125 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(byte, byte, byte):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 123
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(byte[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(byte[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { -10, 5, 6 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(double, double, double):::ENTER
c one of { 12.3, 14.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(double, double, double):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 12.3, 13.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(double[]):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(double[]):::EXIT850
array[] one of { [1.2, NaN, 3.7, 27.0, 42.0, NaN], [NaN, 1.2, NaN, 3.7, 27.0, 42.0, NaN] }
return == Double.NaN
orig(size(array[])) one of { 6, 7 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(double[]):::EXIT857
orig(size(array[])) one of { 1, 2, 5 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(double[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
(orig(size(array[])) one of { 1, 2, 5 })  ==>  (return in array[])
(orig(size(array[])) one of { 6, 7 })  ==>  (array[] one of { [1.2, NaN, 3.7, 27.0, 42.0, NaN], [NaN, 1.2, NaN, 3.7, 27.0, 42.0, NaN] })
(orig(size(array[])) one of { 6, 7 })  ==>  (return == Double.NaN)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(float, float, float):::ENTER
c one of { 12.3, 14.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(float, float, float):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 12.3, 13.3, Double.NaN }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(float[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(float[]):::EXIT888
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(float[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(int, int, int):::ENTER
a one of { 12345, 12346 }
b one of { 12345, 12346, 12347 }
c one of { 12345, 12347 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(int, int, int):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 12345
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(int[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(int[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { -10, 5, 6 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(long, long, long):::ENTER
a one of { 12345, 12346 }
b one of { 12345, 12346, 12347 }
c one of { 12345, 12347 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(long, long, long):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 12345
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(long[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(long[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { -10, 5, 6 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(short, short, short):::ENTER
a one of { 1234, 1235 }
b one of { 1234, 1235, 1236 }
c one of { 1234, 1236 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(short, short, short):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return == 1234
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(short[]):::ENTER
size(array[]) one of { 1, 2, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.min(short[]):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
array[] == orig(array[])
return one of { -10, 5, 6 }
return in array[]
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String):::ENTER
str.toString one of { "", "123", "abc" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString one of { "", "123", "abc" }
return one of { 0, 123 }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String, byte):::ENTER
defaultValue one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String, byte):::EXIT324
return == orig(defaultValue)
return == 0
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String, byte):::EXIT327
str.toString == "123"
return == 123
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String, byte):::EXIT329
return == orig(defaultValue)
str.toString one of { "", "12.3", "abc" }
return one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toByte(java.lang.String, byte):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 0, 5, 123 }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String, double):::ENTER
defaultValue one of { 0.0, 5.0, 5.1 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String, double):::EXIT274
return == orig(defaultValue)
return == 0.0
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String, double):::EXIT277
orig(defaultValue) one of { 0.0, 5.1 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String, double):::EXIT279
return == orig(defaultValue)
str.toString one of { "", "a", "abc" }
return one of { 0.0, 5.0 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toDouble(java.lang.String, double):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String, float):::ENTER
defaultValue one of { 0.0, 5.0, 5.1 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String, float):::EXIT222
return == orig(defaultValue)
return == 0.0
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String, float):::EXIT225
orig(defaultValue) one of { 0.0, 5.1 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String, float):::EXIT227
return == orig(defaultValue)
str.toString one of { "", "a", "abc" }
return one of { 0.0, 5.0 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toFloat(java.lang.String, float):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String):::ENTER
str.toString one of { "", "12345", "abc" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString one of { "", "12345", "abc" }
return one of { 0, 12345 }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String, int):::ENTER
defaultValue one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String, int):::EXIT121
return == orig(defaultValue)
return == 0
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String, int):::EXIT124
str.toString == "12345"
return == 12345
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String, int):::EXIT126
return == orig(defaultValue)
str.toString one of { "", "1234.5", "abc" }
return one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toInt(java.lang.String, int):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 0, 5, 12345 }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String, long):::ENTER
defaultValue one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String, long):::EXIT170
return == orig(defaultValue)
return == 0
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String, long):::EXIT173
str.toString one of { "-9223372036854775808", "12345", "9223372036854775807" }
return one of { -9223372036854775808L, 12345, 9223372036854775807L }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String, long):::EXIT175
return == orig(defaultValue)
return one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toLong(java.lang.String, long):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String):::ENTER
str.toString one of { "", "12345", "abc" }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
str.toString one of { "", "12345", "abc" }
return one of { 0, 12345 }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String, short):::ENTER
defaultValue one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String, short):::EXIT373
return == orig(defaultValue)
return == 0
orig(str) == null
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String, short):::EXIT376
str.toString == "12345"
return == 12345
orig(str) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String, short):::EXIT378
return == orig(defaultValue)
str.toString one of { "", "1234.5", "abc" }
return one of { 0, 5 }
===========================================================================
org.apache.commons.lang3.math.NumberUtils.toShort(java.lang.String, short):::EXIT
org.apache.commons.lang3.math.NumberUtils.LONG_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ZERO)
org.apache.commons.lang3.math.NumberUtils.LONG_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_ONE)
org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.LONG_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ZERO)
org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_ONE)
org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.INTEGER_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ZERO)
org.apache.commons.lang3.math.NumberUtils.SHORT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_ONE)
org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.SHORT_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ZERO)
org.apache.commons.lang3.math.NumberUtils.BYTE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_ONE)
org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.BYTE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ZERO)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_ONE)
org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.DOUBLE_MINUS_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ZERO)
org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_ONE)
org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE == orig(org.apache.commons.lang3.math.NumberUtils.FLOAT_MINUS_ONE)
return one of { 0, 5, 12345 }
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.NumberUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.NumberUtilsTest(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::ENTER
this.fName.toString one of { "testCreateNumber", "testIsNumber" }
this.fName.toString > val.toString
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT1151
this.fName has only one value
this.fName.toString == "testIsNumber"
val.toString == "--2.3"
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT1151;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT1153
this.fName has only one value
this.fName.toString == "testIsNumber"
return == true
orig(this) has only one value
orig(val) != null
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT1153;condition="return == true"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT1155
return == false
orig(val) != null
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT1155;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT
this.fName == orig(this.fName)
(return == false)  ==>  (this.fName.toString one of { "testCreateNumber", "testIsNumber" })
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (orig(val) != null)
(return == true)  ==>  (this.fName has only one value)
(return == true)  ==>  (this.fName.toString == "testIsNumber")
this.fName.toString one of { "testCreateNumber", "testIsNumber" }
this.fName.toString > val.toString
this.fName.toString == orig(this.fName.toString)
val.toString == orig(val.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT;condition="return == true"
this.fName has only one value
this.fName.toString == "testIsNumber"
return == true
orig(this) has only one value
orig(val) != null
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.checkCreateNumber(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCompareDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCompareDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCompareDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCompareDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCompareFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCompareFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCompareFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCompareFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testConstants():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testConstants"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testConstants():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testConstants"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testConstructor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testConstructor():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testConstructor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimal():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateBigDecimal"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimal():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateBigDecimal"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateBigDecimal"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigDecimalFailure(java.lang.String):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateBigDecimal"
this.fName.toString == orig(this.fName.toString)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateBigInteger"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigInteger():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateBigInteger"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateBigInteger"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateBigIntegerFailure(java.lang.String):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateBigInteger"
this.fName.toString == orig(this.fName.toString)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateDoubleFailure(java.lang.String):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateDouble"
this.fName.toString == orig(this.fName.toString)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateFloatFailure(java.lang.String):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateFloat"
this.fName.toString == orig(this.fName.toString)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateInteger():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateInteger"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateInteger():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateInteger"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateInteger"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateIntegerFailure(java.lang.String):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateInteger"
this.fName.toString == orig(this.fName.toString)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateLong"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateLong():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateLong"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongFailure(java.lang.String):::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateLong"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongFailure(java.lang.String):::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateLong"
this.fName.toString == orig(this.fName.toString)
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testCreateNumber"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumber():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testCreateNumber"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsDigits"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsDigits"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsNumber"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testIsNumber():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsNumber"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testLang300():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLang300"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testLang300():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLang300"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testLang381():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testLang381"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testLang381():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testLang381"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxByte"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxByte():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxByte"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxInt"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxLong"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxLong():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxLong"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaxShort"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaxShort():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaxShort"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumByte():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaximumByte"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumByte():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaximumByte"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaximumDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaximumDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaximumFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaximumFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumInt():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaximumInt"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumInt():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaximumInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaximumLong"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumLong():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaximumLong"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMaximumShort"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMaximumShort():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMaximumShort"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinByte():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinByte"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinByte():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinByte"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinInt():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinInt"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinInt():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinLong():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinLong"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinLong():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinLong"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinShort():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinShort"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinShort():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinShort"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumByte():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinimumByte"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumByte():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinimumByte"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumDouble():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinimumDouble"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumDouble():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinimumDouble"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumFloat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinimumFloat"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumFloat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinimumFloat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumInt():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinimumInt"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumInt():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinimumInt"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumLong():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinimumLong"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumLong():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinimumLong"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testMinimumShort"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testMinimumShort():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testMinimumShort"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStringToDoubleString"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStringToDoubleString"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStringToDoubleStringD"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testStringToDoubleStringD():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStringToDoubleStringD"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToByteString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToByteString"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToByteString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToByteString"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToByteStringI():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToByteStringI"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToByteStringI():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToByteStringI"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToFloatString"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToFloatString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToFloatString"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToFloatStringF"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToFloatStringF():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToFloatStringF"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToIntString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToIntString"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToIntString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToIntString"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToIntStringI():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToIntStringI"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToIntStringI():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToIntStringI"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToLongString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToLongString"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToLongString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToLongString"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToLongStringL():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToLongStringL"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToLongStringL():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToLongStringL"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToShortString():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToShortString"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToShortString():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToShortString"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToShortStringI():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testToShortStringI"
===========================================================================
org.apache.commons.lang3.math.NumberUtilsTest.testToShortStringI():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testToShortStringI"
this.fName.toString == orig(this.fName.toString)
