===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message != null
message.toString one of { "Wrong number of invocations", "Wrong result" }
expected == 1
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
message.toString one of { "Wrong number of invocations", "Wrong result" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message != null
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::ENTER
message != null
message.toString one of { "Already started", "Could start again", "Executor was shutdown" }
condition == false
===========================================================================
junit.framework.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString one of { "Already started", "Could start again", "Executor was shutdown" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message != null
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::ENTER
message has only one value
message.toString == "Got an executor"
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "Got an executor"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message.toString one of { "Wrong active executor", "Wrong executor" }
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString one of { "Wrong active executor", "Wrong executor" }
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message != null
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
===========================================================================
junit.framework.TestCase.TestCase():::EXIT
this.fName == null
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
this.fName != null
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fName != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fName != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::ENTER
this.fName == null
name != null
===========================================================================
junit.framework.TestCase.setName(java.lang.String):::EXIT
this.fName == orig(name)
this.fName != null
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
this.fName != null
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName != null
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == $hidden$2.fName
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 15
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 15
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.concurrent.BackgroundInitializerTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 15
this.fTests[].getClass().getName() == [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
size(this.fTests[]) == 15
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
names[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 14, 15 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT87
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 14, 15 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
return == false
size(this.fTests[]) one of { 14, 15 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 14, 15 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
return == false
size(this.fTests[]) one of { 14, 15 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 15 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 15
result.fStop == false
size(this.fTests[]) one of { 1, 15 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 15 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest, org.apache.commons.lang3.concurrent.BackgroundInitializerTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 15 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 16 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 15 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 15
runTime == 178
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 15
return has only one value
return.toString == "0.178"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 15
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 178
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 15
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 15
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 15
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 15
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 15
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 15
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 15
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 15
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 15
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 15
runTime == 178
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 15
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 15 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 15
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 15
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 15
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 15
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 15
return.fStop == false
size(return.fListeners[]) == 1
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask:::OBJECT
this.execFinally.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.class
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName() == java.util.concurrent.FutureTask.class
this.execFinally.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName()
this.execFinally.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName()
this.execFinally.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask.InitializationTask(org.apache.commons.lang3.concurrent.BackgroundInitializer, java.util.concurrent.ExecutorService):::ENTER
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.class
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future == null
exec.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() != org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() != exec.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName() == exec.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask.InitializationTask(org.apache.commons.lang3.concurrent.BackgroundInitializer, java.util.concurrent.ExecutorService):::EXIT
this.execFinally == orig(exec)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future == null
this.execFinally.getClass().getName() == orig(exec.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask.call():::ENTER
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask.call():::EXIT
this.execFinally == orig(this.execFinally)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor)
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future)
return has only one value
return.getClass().getName() == java.lang.Integer.class
this.execFinally.getClass().getName() != return.getClass().getName()
this.execFinally.getClass().getName() == orig(this.execFinally.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.externalExecutor.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.executor.getClass().getName())
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName() == orig(org.apache.commons.lang3.concurrent.BackgroundInitializer.this.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.class
this.future.getClass().getName() == java.util.concurrent.FutureTask.class
this.getClass().getName() != this.externalExecutor.getClass().getName()
this.getClass().getName() != this.executor.getClass().getName()
this.getClass().getName() != this.future.getClass().getName()
this.executor.getClass().getName() != this.future.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.BackgroundInitializer():::EXIT
this.externalExecutor == this.executor
this.externalExecutor == null
this.future == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.BackgroundInitializer(java.util.concurrent.ExecutorService):::ENTER
exec.getClass().getName() == java.util.concurrent.Executors$FinalizableDelegatedExecutorService.class
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.BackgroundInitializer(java.util.concurrent.ExecutorService):::EXIT
this.externalExecutor == orig(exec)
this.externalExecutor.getClass().getName() == java.util.concurrent.Executors$FinalizableDelegatedExecutorService.class
this.executor == null
this.future == null
this.externalExecutor.getClass().getName() == orig(exec.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.createExecutor():::ENTER
this.externalExecutor == this.executor
this.externalExecutor == null
this.future == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.createExecutor():::EXIT
this.externalExecutor == this.executor
this.externalExecutor == orig(this.externalExecutor)
this.externalExecutor == orig(this.executor)
this.future == orig(this.future)
this.externalExecutor == null
this.future == null
return.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.createTask(java.util.concurrent.ExecutorService):::ENTER
this.future == null
execDestroy.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
this.getClass().getName() != execDestroy.getClass().getName()
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
this.executor.getClass().getName() == execDestroy.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.createTask(java.util.concurrent.ExecutorService):::EXIT
this.externalExecutor == orig(this.externalExecutor)
this.executor == orig(this.executor)
this.future == orig(this.future)
this.future == null
return.getClass().getName() == org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask.class
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() != return.getClass().getName()
this.executor.getClass().getName() != orig(this.getClass().getName())
this.executor.getClass().getName() == orig(this.executor.getClass().getName())
this.executor.getClass().getName() == orig(execDestroy.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
return.getClass().getName() != orig(execDestroy.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.get():::ENTER
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.get():::EXIT211
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.get():::EXIT
this.externalExecutor == orig(this.externalExecutor)
this.executor == orig(this.executor)
this.future == orig(this.future)
return has only one value
return.getClass().getName() == java.lang.Integer.class
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() != return.getClass().getName()
this.executor.getClass().getName() != orig(this.getClass().getName())
this.executor.getClass().getName() == orig(this.executor.getClass().getName())
this.future.getClass().getName() != return.getClass().getName()
this.future.getClass().getName() != orig(this.getClass().getName())
this.future.getClass().getName() == orig(this.future.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getActiveExecutor():::ENTER
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getActiveExecutor():::EXIT
this.externalExecutor == orig(this.externalExecutor)
this.executor == return
this.future == orig(this.future)
return == orig(this.executor)
this.externalExecutor.getClass().getName() == return.getClass().getName()
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() == return.getClass().getName()
this.future.getClass().getName() == orig(this.future.getClass().getName())
return.getClass().getName() == orig(this.executor.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getExternalExecutor():::ENTER
this.executor == null
this.future == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getExternalExecutor():::EXIT
this.externalExecutor == return
this.executor == orig(this.executor)
this.future == orig(this.future)
return == orig(this.externalExecutor)
this.executor == null
this.future == null
this.externalExecutor.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.externalExecutor.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getFuture():::ENTER
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getFuture():::EXIT
this.externalExecutor == orig(this.externalExecutor)
this.executor == orig(this.executor)
this.future == return
return == orig(this.future)
return.getClass().getName() == java.util.concurrent.FutureTask.class
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() != return.getClass().getName()
this.executor.getClass().getName() != orig(this.getClass().getName())
this.executor.getClass().getName() == orig(this.executor.getClass().getName())
this.future.getClass().getName() == return.getClass().getName()
return.getClass().getName() != orig(this.getClass().getName())
return.getClass().getName() == orig(this.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getTaskCount():::ENTER
this.externalExecutor == this.executor
this.externalExecutor == null
this.future == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.getTaskCount():::EXIT
this.externalExecutor == this.executor
this.externalExecutor == orig(this.externalExecutor)
this.externalExecutor == orig(this.executor)
this.future == orig(this.future)
this.externalExecutor == null
this.future == null
return == 1
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::ENTER
this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT136
this.externalExecutor == null
return == true
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT136;condition="return == true"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT137
this.executor == null
this.future == null
return == false
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT137;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT
this.externalExecutor == orig(this.externalExecutor)
this.executor == orig(this.executor)
this.future == orig(this.future)
(return == false)  ==>  (this.executor == null)
(return == false)  ==>  (this.future == null)
(return == true)  ==>  (this.executor.getClass().getName() != orig(this.getClass().getName()))
(return == true)  ==>  (this.executor.getClass().getName() != this.future.getClass().getName())
(return == true)  ==>  (this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class)
(return == true)  ==>  (this.externalExecutor == null)
(return == true)  ==>  (this.future.getClass().getName() != orig(this.getClass().getName()))
(return == true)  ==>  (this.future.getClass().getName() == java.util.concurrent.FutureTask.class)
this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() != orig(this.getClass().getName())
this.executor.getClass().getName() == orig(this.executor.getClass().getName())
this.future.getClass().getName() != orig(this.getClass().getName())
this.future.getClass().getName() == orig(this.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT;condition="return == true"
this.externalExecutor == null
return == true
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.isStarted():::EXIT;condition="not(return == true)"
this.executor == null
this.future == null
return == false
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.setExternalExecutor(java.util.concurrent.ExecutorService):::ENTER
this.externalExecutor == this.executor
this.externalExecutor == null
this.future == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.setExternalExecutor(java.util.concurrent.ExecutorService):::EXIT
this.externalExecutor == orig(externalExecutor)
this.executor == orig(this.externalExecutor)
this.executor == orig(this.executor)
this.future == orig(this.future)
this.executor == null
this.future == null
this.externalExecutor.getClass().getName() == orig(externalExecutor.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::ENTER
this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT189
return == true
orig(this.executor) == null
orig(this.future) == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT189;condition="return == true"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT192
this.executor == orig(this.executor)
this.future == orig(this.future)
this.externalExecutor == null
this.executor has only one value
this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
this.future has only one value
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT192;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT
this.externalExecutor == orig(this.externalExecutor)
(return == false)  <==>  (orig(this.executor) has only one value)
(return == false)  <==>  (orig(this.future) has only one value)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(this.executor.getClass().getName()) != orig(this.future.getClass().getName()))
(return == false)  ==>  (orig(this.executor.getClass().getName()) == java.util.concurrent.ThreadPoolExecutor.class)
(return == false)  ==>  (orig(this.future.getClass().getName()) == java.util.concurrent.FutureTask.class)
(return == false)  ==>  (orig(this.getClass().getName()) != orig(this.executor.getClass().getName()))
(return == false)  ==>  (orig(this.getClass().getName()) != orig(this.future.getClass().getName()))
(return == false)  ==>  (this.executor == orig(this.executor))
(return == false)  ==>  (this.executor has only one value)
(return == false)  ==>  (this.executor.getClass().getName() != orig(this.future.getClass().getName()))
(return == false)  ==>  (this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class)
(return == false)  ==>  (this.executor.getClass().getName() == orig(this.executor.getClass().getName()))
(return == false)  ==>  (this.externalExecutor == null)
(return == false)  ==>  (this.future == orig(this.future))
(return == false)  ==>  (this.future has only one value)
(return == false)  ==>  (this.future.getClass().getName() != orig(this.executor.getClass().getName()))
(return == false)  ==>  (this.future.getClass().getName() == orig(this.future.getClass().getName()))
(return == true)  <==>  (orig(this.executor) == null)
(return == true)  <==>  (orig(this.future) == null)
(return == true)  ==>  (this.externalExecutor.getClass().getName() == this.executor.getClass().getName())
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() != orig(this.getClass().getName())
this.executor.getClass().getName() == orig(this.executor.getClass().getName())
this.executor.getClass().getName() != orig(this.future.getClass().getName())
this.future.getClass().getName() != orig(this.getClass().getName())
this.future.getClass().getName() != orig(this.executor.getClass().getName())
this.future.getClass().getName() == orig(this.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT;condition="return == true"
return == true
orig(this.executor) == null
orig(this.future) == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializer.start():::EXIT;condition="not(return == true)"
this.executor == orig(this.executor)
this.future == orig(this.future)
this.externalExecutor == null
this.executor has only one value
this.executor.getClass().getName() == java.util.concurrent.ThreadPoolExecutor.class
this.future has only one value
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$1:::OBJECT
this.val$init.externalExecutor == this.val$init.executor
this has only one value
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this has only one value
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName has only one value
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName.toString == "testGetInterruptedException"
this.val$latch1 has only one value
this.val$init has only one value
this.val$init.ex == null
this.val$init.shouldSleep == true
this.val$init.initializeCalls == 0
this.val$init.externalExecutor has only one value
this.val$init.externalExecutor.getClass().getName() == java.util.concurrent.Executors$FinalizableDelegatedExecutorService.class
this.val$init.future has only one value
this.val$init.future.getClass().getName() == java.util.concurrent.FutureTask.class
this.val$iex has only one value
this.val$init.externalExecutor.getClass().getName() == this.val$init.executor.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$1.(org.apache.commons.lang3.concurrent.BackgroundInitializerTest, java.util.concurrent.CountDownLatch, org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl, java.util.concurrent.atomic.AtomicReference):::ENTER
$hidden$3.externalExecutor == $hidden$3.executor
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this has only one value
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName has only one value
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName.toString == "testGetInterruptedException"
$hidden$2 has only one value
$hidden$3 has only one value
$hidden$3.ex == null
$hidden$3.shouldSleep == true
$hidden$3.initializeCalls == 0
$hidden$3.externalExecutor has only one value
$hidden$3.externalExecutor.getClass().getName() == java.util.concurrent.Executors$FinalizableDelegatedExecutorService.class
$hidden$3.future has only one value
$hidden$3.future.getClass().getName() == java.util.concurrent.FutureTask.class
$hidden$4 has only one value
$hidden$3.externalExecutor.getClass().getName() == $hidden$3.executor.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$1.(org.apache.commons.lang3.concurrent.BackgroundInitializerTest, java.util.concurrent.CountDownLatch, org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl, java.util.concurrent.atomic.AtomicReference):::EXIT
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this == orig(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this)
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName == orig(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName)
this.val$latch1 == orig($hidden$2)
this.val$init == orig($hidden$3)
this.val$init.ex == orig($hidden$3.ex)
this.val$init.shouldSleep == orig($hidden$3.shouldSleep)
this.val$init.initializeCalls == orig($hidden$3.initializeCalls)
this.val$init.externalExecutor == orig($hidden$3.externalExecutor)
this.val$init.future == orig($hidden$3.future)
this.val$iex == orig($hidden$4)
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName.toString == orig(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName.toString)
this.val$init.externalExecutor.getClass().getName() == orig($hidden$3.externalExecutor.getClass().getName())
this.val$init.externalExecutor.getClass().getName() == orig($hidden$3.executor.getClass().getName())
this.val$init.future.getClass().getName() == orig($hidden$3.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$1.run():::ENTER
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$1.run():::EXIT
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this == orig(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this)
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName == orig(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName)
this.val$latch1 == orig(this.val$latch1)
this.val$init == orig(this.val$init)
this.val$init.ex == orig(this.val$init.ex)
this.val$init.shouldSleep == orig(this.val$init.shouldSleep)
this.val$init.initializeCalls == orig(this.val$init.initializeCalls)
this.val$init.externalExecutor == orig(this.val$init.externalExecutor)
this.val$init.externalExecutor == orig(this.val$init.executor)
this.val$init.future == orig(this.val$init.future)
this.val$iex == orig(this.val$iex)
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName.toString == orig(org.apache.commons.lang3.concurrent.BackgroundInitializerTest.this.fName.toString)
this.val$init.externalExecutor.getClass().getName() == orig(this.val$init.externalExecutor.getClass().getName())
this.val$init.externalExecutor.getClass().getName() == orig(this.val$init.executor.getClass().getName())
this.val$init.future.getClass().getName() == orig(this.val$init.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl:::OBJECT
this.ex == null
this.shouldSleep == false
this.initializeCalls one of { 0, 1 }
this.future.getClass().getName() == java.util.concurrent.FutureTask.class
this.externalExecutor.getClass().getName() == this.executor.getClass().getName()
this.executor.getClass().getName() != this.future.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.BackgroundInitializerTestImpl():::EXIT
this.externalExecutor == this.executor
this.initializeCalls == 0
this.externalExecutor == null
this.future == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.BackgroundInitializerTestImpl(java.util.concurrent.ExecutorService):::ENTER
exec.getClass().getName() == java.util.concurrent.Executors$FinalizableDelegatedExecutorService.class
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.BackgroundInitializerTestImpl(java.util.concurrent.ExecutorService):::EXIT
this.externalExecutor == orig(exec)
this.initializeCalls == 0
this.externalExecutor.getClass().getName() == java.util.concurrent.Executors$FinalizableDelegatedExecutorService.class
this.executor == null
this.future == null
this.externalExecutor.getClass().getName() == orig(exec.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.initialize():::ENTER
this.initializeCalls == 0
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl.initialize():::EXIT
this.ex == orig(this.ex)
this.shouldSleep == orig(this.shouldSleep)
this.externalExecutor == orig(this.externalExecutor)
this.executor == orig(this.executor)
this.future == orig(this.future)
this.initializeCalls == 1
return has only one value
this.externalExecutor.getClass().getName() == orig(this.externalExecutor.getClass().getName())
this.executor.getClass().getName() == orig(this.executor.getClass().getName())
this.future.getClass().getName() == orig(this.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest:::OBJECT
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.BackgroundInitializerTest():::EXIT
this.fName == null
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.checkInitialize(org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl):::ENTER
init.ex == null
init.shouldSleep == false
init.initializeCalls one of { 0, 1 }
init.future.getClass().getName() == java.util.concurrent.FutureTask.class
init.externalExecutor.getClass().getName() == init.executor.getClass().getName()
init.executor.getClass().getName() != init.future.getClass().getName()
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.checkInitialize(org.apache.commons.lang3.concurrent.BackgroundInitializerTest$BackgroundInitializerTestImpl):::EXIT
this.fName == orig(this.fName)
init.ex == orig(init.ex)
init.shouldSleep == orig(init.shouldSleep)
init.externalExecutor == orig(init.externalExecutor)
init.executor == orig(init.executor)
init.future == orig(init.future)
init.ex == null
init.shouldSleep == false
init.initializeCalls == 1
init.future.getClass().getName() == java.util.concurrent.FutureTask.class
this.fName.toString == orig(this.fName.toString)
init.initializeCalls >= orig(init.initializeCalls)
init.externalExecutor.getClass().getName() == init.executor.getClass().getName()
init.externalExecutor.getClass().getName() == orig(init.externalExecutor.getClass().getName())
init.executor.getClass().getName() != init.future.getClass().getName()
init.executor.getClass().getName() == orig(init.executor.getClass().getName())
init.future.getClass().getName() == orig(init.future.getClass().getName())
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorBeforeStart():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetActiveExecutorBeforeStart"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorBeforeStart():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetActiveExecutorBeforeStart"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorExternal():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetActiveExecutorExternal"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorExternal():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetActiveExecutorExternal"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorTemp():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetActiveExecutorTemp"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetActiveExecutorTemp():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetActiveExecutorTemp"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetBeforeStart():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetBeforeStart"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetBeforeStart():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetBeforeStart"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetCheckedException():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetCheckedException"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetCheckedException():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetCheckedException"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetInterruptedException():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetInterruptedException"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetInterruptedException():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetInterruptedException"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetRuntimeException():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testGetRuntimeException"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testGetRuntimeException():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testGetRuntimeException"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testInitialize():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testInitialize"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testInitialize():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testInitialize"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testInitializeTempExecutor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testInitializeTempExecutor"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testInitializeTempExecutor():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testInitializeTempExecutor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedAfterGet():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsStartedAfterGet"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedAfterGet():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsStartedAfterGet"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedFalse():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsStartedFalse"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedFalse():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsStartedFalse"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedTrue():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testIsStartedTrue"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testIsStartedTrue():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testIsStartedTrue"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSetExternalExecutor"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutor():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSetExternalExecutor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutorAfterStart():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSetExternalExecutorAfterStart"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testSetExternalExecutorAfterStart():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSetExternalExecutorAfterStart"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testStartMultipleTimes():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testStartMultipleTimes"
===========================================================================
org.apache.commons.lang3.concurrent.BackgroundInitializerTest.testStartMultipleTimes():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testStartMultipleTimes"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentException:::CLASS
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentException:::OBJECT
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentException.ConcurrentException(java.lang.String, java.lang.Throwable):::ENTER
msg has only one value
msg.toString == "java.lang.Exception"
cause has only one value
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentException.ConcurrentException(java.lang.String, java.lang.Throwable):::EXIT
msg.toString == "java.lang.Exception"
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentException.ConcurrentException(java.lang.Throwable):::ENTER
cause has only one value
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentException.ConcurrentException(java.lang.Throwable):::EXIT
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.checkedException(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.checkedException(java.lang.Throwable):::EXIT
return == orig(ex)
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.extractCause(java.util.concurrent.ExecutionException):::ENTER
ex has only one value
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.extractCause(java.util.concurrent.ExecutionException):::EXIT66
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.extractCause(java.util.concurrent.ExecutionException):::EXIT
return has only one value
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.throwCause(java.util.concurrent.ExecutionException):::ENTER
ex has only one value
===========================================================================
org.apache.commons.lang3.concurrent.ConcurrentUtils.throwCause(java.util.concurrent.ExecutionException):::EXIT
===========================================================================
org.apache.commons.lang3.daikon.BackgroundInitializerTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.BackgroundInitializerTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
