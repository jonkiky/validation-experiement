===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected == 1
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected == 1
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected != null
actual != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected != null
actual != null
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
object has only one value
object.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.class
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == orig($hidden$2.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == orig($hidden$2.fName.toString)
junit.framework.TestResult.this.fFailures[] is the reverse of orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[]) (elementwise)
junit.framework.TestResult.this.fListeners[] is the reverse of orig(junit.framework.TestResult.this.fListeners[])
orig(junit.framework.TestResult.this.fRunTests) >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 9
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 9
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.time.DateFormatUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 9
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
size(this.fTests[]) == 9
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[] contains no nulls and has only one value, of length 9
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest]
names[] contains no nulls and has only one value, of length 9
names[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String]
size(this.fTests[]) == 9
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 9)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 9)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 9
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest]
return == false
size(this.fTests[]) == 9
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  <==>  (size(this.fTests[]) == 9)
(return == false)  ==>  (this.fTests[] contains no nulls and has only one value, of length 9)
(return == false)  ==>  (this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest])
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.time.DateFormatUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[] contains no nulls and has only one value, of length 9
this.fTests[].getClass().getName() == [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest]
return == false
size(this.fTests[]) == 9
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 9
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest, org.apache.commons.lang3.time.DateFormatUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 9 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 10 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 9 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 9
runTime == 2512
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
return has only one value
return.toString == "2.512"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
return != null
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 2512
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 9
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 9
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 9
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 9
runTime == 2512
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 9
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME != null
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fPreferences != null
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 9 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 9
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 9
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fErrors[])
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fListeners[])-1
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 9
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.Validate:::CLASS
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified exclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == "The value %s is not in the specified inclusive range of %s to %s"
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX has only one value
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == "The string %s does not match the pattern %s"
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == "The validated object is null"
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == "The validated expression is false"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == "The validated array contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == "The validated collection contains null element at index: %d"
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == "The validated character sequence is blank"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == "The validated array is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == "The validated collection is empty"
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == "The validated map is empty"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == "The validated array index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == "The validated character sequence index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == "The validated collection index is invalid: %d"
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == "The validated state is false"
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == "The validated class can not be converted to the %s class"
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE has only one value
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == "The validated object is not an instance of %s"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString < org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::ENTER
expression == true
message has only one value
message.toString == "Negative values should not be possible"
value one of { 2002, 2003, 2005 }
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
===========================================================================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, long):::EXIT
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE)
message.toString == "Negative values should not be possible"
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_MATCHES_PATTERN_EX.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_NULL_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_TRUE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_BLANK_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_VALID_STATE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_ASSIGNABLE_EX_MESSAGE.toString)
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString > message.toString
org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString == orig(org.apache.commons.lang3.Validate.DEFAULT_IS_INSTANCE_OF_EX_MESSAGE.toString)
message.toString == orig(message.toString)
===========================================================================
org.apache.commons.lang3.daikon.DateFormatUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.DateFormatUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils:::CLASS
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])-1
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == size(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == size(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE has only one value
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == sun.util.calendar.ZoneInfo.class
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT has only one value
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] contains no nulls and has only one value, of length 11
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == 19
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == "yyyy-MM-dd'T'HH:mm:ssZZ"
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] contains no nulls and has only one value, of length 12
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == 24
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == "yyyy-MM-dd"
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] contains no nulls and has only one value, of length 5
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == 10
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == "yyyy-MM-ddZZ"
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] contains no nulls and has only one value, of length 6
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitMonthField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == 15
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == "'T'HH:mm:ss"
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] contains no nulls and has only one value, of length 6
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == 9
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == "'T'HH:mm:ssZZ"
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] contains no nulls and has only one value, of length 7
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == 14
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == "HH:mm:ss"
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] contains no nulls and has only one value, of length 5
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == 8
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == "HH:mm:ssZZ"
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] contains no nulls and has only one value, of length 6
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == 13
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] contains no nulls and has only one value, of length 15
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] elements != null
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == 31
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]) == 12
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]) == 7
size(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[]) == 15
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate-1] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate-1] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate-1] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] has only one value
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate-1] has only one value
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() != org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString < org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString > org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.DateFormatUtils():::EXIT
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Calendar, java.lang.String):::ENTER
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
pattern has only one value
pattern.toString == "yyyyMdH"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Calendar, java.lang.String):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return has only one value
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.Locale):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == locale
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
pattern has only one value
pattern.toString == "yyyyMdH"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(locale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return has only one value
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
calendar has only one value
calendar.getClass().getName() == java.util.GregorianCalendar.class
pattern has only one value
pattern.toString == "yyyyMdH"
timeZone == null
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String):::ENTER
pattern has only one value
pattern.toString == "yyyyMdH"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.Locale):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == locale
pattern has only one value
pattern.toString == "yyyyMdH"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(locale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == timeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString >= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString <= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != pattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString >= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString <= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString < return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString != return.toString
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == timeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != timeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != timeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() != timeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString <= pattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() != orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString <= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString < return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString != return.toString
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String):::ENTER
millis == 1104598800526L
pattern has only one value
pattern.toString == "yyyyMdH"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return has only one value
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String, java.util.Locale):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == locale
millis == 1104598800526L
pattern has only one value
pattern.toString == "yyyyMdH"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(locale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyyMdH"
return has only one value
return.toString == "20051112"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == timeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < millis
org.apache.commons.lang3.time.FastDateFormat.FULL < millis
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < millis
org.apache.commons.lang3.time.FastDateFormat.SHORT < millis
org.apache.commons.lang3.time.FormatCache.NONE < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString >= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString <= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate < millis
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate < millis
millis > size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
millis > size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
millis > size(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString >= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString > return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString <= pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString < return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString < return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate < orig(millis)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString != return.toString
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate < orig(millis)
pattern.toString != return.toString
pattern.toString == orig(pattern.toString)
orig(millis) > size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
orig(millis) > size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
orig(millis) > size(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == locale
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == pattern
millis == 1055077872861L
timeZone has only one value
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == timeZone.getClass().getName()
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == pattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(locale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(pattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
return has only one value
return.toString == "Sun, 08 Jun 2003 10:11:12 -0300"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == pattern.toString
pattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == pattern
date has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == pattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(pattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
return has only one value
return.toString == "2005-01-01T12:00:00"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String, java.util.Locale):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == pattern
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == locale
date has only one value
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == pattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(pattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(locale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
return has only one value
return.toString == "2005-01-01T12:00:00"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(long, java.lang.String):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == pattern
millis == 1104580800822L
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == pattern.toString
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(long, java.lang.String):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(pattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString == "yyyy-MM-dd'T'HH:mm:ss"
return has only one value
return.toString == "2005-01-01T12:00:00"
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == pattern.toString
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(long, java.lang.String, java.util.Locale):::ENTER
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == locale
millis one of { 1055077872861L, 1104580800822L }
pattern.toString one of { "EEE, dd MMM yyyy HH:mm:ss Z", "yyyy-MM-dd'T'HH:mm:ss" }
===========================================================================
org.apache.commons.lang3.time.DateFormatUtils.formatUTC(long, java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT)
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mLocale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mLocale == orig(locale)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mMaxLengthEstimate)
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[]))
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[]))-1
size(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[]) == orig(size(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[]))
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1])
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate]
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[post(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]) == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mMaxLengthEstimate-1])
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate)-1]
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mMaxLengthEstimate] == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules[org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mMaxLengthEstimate-1])
pattern.toString one of { "EEE, dd MMM yyyy HH:mm:ss Z", "yyyy-MM-dd'T'HH:mm:ss" }
return.toString one of { "2005-01-01T12:00:00", "Sun, 08 Jun 2003 13:11:12 +0000" }
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.UTC_TIME_ZONE.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mTimeZone.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_FORMAT.mRules.getClass().getName() == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mRules.getClass().getName())
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.mPattern.toString)
org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString == orig(org.apache.commons.lang3.time.DateFormatUtils.SMTP_DATETIME_FORMAT.mPattern.toString)
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest:::OBJECT
this.fName != null
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.DateFormatUtilsTest(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.DateFormatUtilsTest(java.lang.String):::EXIT
this.fName == orig(s)
this.fName.toString == s.toString
s.toString == orig(s.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testConstructor():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testConstructor"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDateISO"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testDateISO():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDateISO"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testDateTimeISO"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testDateTimeISO():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testDateTimeISO"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormat"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testFormat():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormat"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatCalendar"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatCalendar():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatCalendar"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testFormatUTC"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testFormatUTC():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testFormatUTC"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testSMTP"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testSMTP():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testSMTP"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testTimeISO"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeISO():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testTimeISO"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO():::ENTER
this has only one value
this.fName has only one value
this.fName.toString == "testTimeNoTISO"
===========================================================================
org.apache.commons.lang3.time.DateFormatUtilsTest.testTimeNoTISO():::EXIT
this.fName == orig(this.fName)
this.fName has only one value
this.fName.toString == "testTimeNoTISO"
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::CLASS
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1:::OBJECT
this has only one value
this.cInstanceCache has only one value
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
this.cInstanceCache.getClass().getName() != timeZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$1.createInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
return.mPattern == orig(pattern)
return.mTimeZone == orig(timeZone)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
return.mRules[] elements != null
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
this.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
this.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT <= size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.CharacterLiteral(char):::EXIT
this.mValue == orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mValue == orig(this.mValue)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$CharacterLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 1
this.mValue > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField:::OBJECT
this.mField == 1
this.mSize == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::ENTER
field == 1
size == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.PaddedNumberField(int, int):::EXIT
this.mField == orig(field)
this.mSize == orig(size)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
value one of { 2002, 2003, 2005 }
this.mField < value
this.mSize < value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
this.mField < orig(value)
this.mSize < orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
this.mSize == orig(this.mSize)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mSize == return
return == orig(this.mSize)
return == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral:::OBJECT
this.mValue.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::ENTER
value.toString == ", "
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.StringLiteral(java.lang.String):::EXIT
this.mValue == orig(value)
value.toString == ", "
this.mValue.toString == value.toString
value.toString == orig(value.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mValue == orig(this.mValue)
this.mValue.toString == orig(this.mValue.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$StringLiteral.estimateLength():::EXIT
this.mValue == orig(this.mValue)
return == 2
this.mValue.toString == orig(this.mValue.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField:::OBJECT
this.mField one of { 2, 7 }
this.mValues.getClass().getName() == java.lang.String[].class
this.mValues[] elements != null
this.mValues[].getClass().getName() elements == java.lang.String.class
this.mValues[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.mValues[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(this.mValues[]) one of { 8, 13 }
this.mField <= size(this.mValues[])-1
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::ENTER
field one of { 2, 7 }
values.getClass().getName() == java.lang.String[].class
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
size(values[]) one of { 8, 13 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.TextField(int, java.lang.String[]):::EXIT
this.mField == orig(field)
this.mValues == orig(values)
this.mValues[] == values[]
values[] == orig(values[])
values[].toString one of { [, Sun, Mon, Tue, Wed, Thu, Fri, Sat], [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec, ] }
this.mValues.getClass().getName() == orig(values.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
this.mValues.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
this.mValues == orig(this.mValues)
this.mValues[] == orig(this.mValues[])
this.mValues.getClass().getName() == orig(this.mValues.getClass().getName())
this.mValues.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TextField.estimateLength():::EXIT
this.mField == orig(this.mField)
this.mValues == orig(this.mValues)
this.mValues[] == orig(this.mValues[])
return == 3
this.mValues.getClass().getName() == orig(this.mValues.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON has only one value
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == true
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == false
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.TimeZoneNumberRule(boolean):::EXIT
this.mColon == orig(colon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
this.mColon == orig(this.mColon)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_COLON.mColon)
org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon == orig(org.apache.commons.lang3.time.FastDateFormat$TimeZoneNumberRule.INSTANCE_NO_COLON.mColon)
this.mColon == orig(this.mColon)
return == 5
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::CLASS
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField:::OBJECT
this == org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE
this has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.TwoDigitMonthField():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::ENTER
value one of { 1, 2 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$TwoDigitMonthField.INSTANCE)
return == 2
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField:::OBJECT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.TwoDigitNumberField(int):::EXIT
this.mField == orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
value >= 0
this.mField != value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
this.mField != orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
return == 2
this.mField > return
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:::CLASS
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField:::OBJECT
this == org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE
this has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.UnpaddedMonthField():::EXIT
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, int):::ENTER
value == 1
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.estimateLength():::EXIT
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE == orig(this)
org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE == orig(org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField.INSTANCE)
return == 2
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField:::OBJECT
this.mField one of { 5, 11 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.UnpaddedNumberField(int):::ENTER
field one of { 5, 11 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.UnpaddedNumberField(int):::EXIT
this.mField == orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, int):::ENTER
value one of { 1, 12 }
this.mField != value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, int):::EXIT
this.mField == orig(this.mField)
this.mField != orig(value)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar):::EXIT
this.mField == orig(this.mField)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.estimateLength():::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.estimateLength():::EXIT
this.mField == orig(this.mField)
return == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::CLASS
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == org.apache.commons.lang3.time.FastDateFormat.LONG
org.apache.commons.lang3.time.FastDateFormat.cache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache has only one value
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat:::OBJECT
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.mLocale has only one value
this.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
this.mRules[] elements != null
this.mMaxLengthEstimate >= 0
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL <= this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT != this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT <= size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != this.mRules.getClass().getName()
org.apache.commons.lang3.time.FormatCache.NONE < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != this.mRules.getClass().getName()
this.mTimeZone.getClass().getName() != this.mRules.getClass().getName()
this.mMaxLengthEstimate > size(this.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.FastDateFormat(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.mPattern == orig(pattern)
this.mTimeZone == orig(timeZone)
this.mLocale == orig(locale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != calendar.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != calendar.getClass().getName()
this.mTimeZone.getClass().getName() != calendar.getClass().getName()
this.mRules.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.applyRules(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(calendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(calendar.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mTimeZone.getClass().getName() != orig(calendar.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
this.mRules.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != calendar.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != calendar.getClass().getName()
this.mTimeZone.getClass().getName() != calendar.getClass().getName()
this.mRules.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(calendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(calendar.getClass().getName())
this.mPattern.toString != return.toString
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mTimeZone.getClass().getName() != orig(calendar.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
this.mRules.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer):::ENTER
calendar.getClass().getName() == java.util.GregorianCalendar.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != calendar.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != calendar.getClass().getName()
this.mTimeZone.getClass().getName() != calendar.getClass().getName()
this.mRules.getClass().getName() != calendar.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(buf)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(calendar.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(calendar.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mTimeZone.getClass().getName() != orig(calendar.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
this.mRules.getClass().getName() != orig(calendar.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date):::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.format(java.util.Date):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString != return.toString
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::ENTER
pattern has only one value
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
locale has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mLocale == orig(locale)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
pattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
return has only one value
return.mPattern has only one value
return.mTimeZone has only one value
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
return.mRules[] contains no nulls and has only one value, of length 15
return.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
return.mMaxLengthEstimate == 31
size(return.mRules[]) == 15
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != timeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != timeZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
return.mPattern == orig(pattern)
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
return.mTimeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
return.mLocale has only one value
return.mRules.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$Rule[].class
return.mRules[] elements != null
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL % return.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT <= size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != orig(timeZone.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < return.mMaxLengthEstimate
org.apache.commons.lang3.time.FormatCache.NONE < size(return.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mTimeZone.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.mRules.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != orig(timeZone.getClass().getName())
pattern.toString == return.mPattern.toString
pattern.toString == orig(pattern.toString)
return.mTimeZone.getClass().getName() != return.mRules.getClass().getName()
return.mTimeZone.getClass().getName() == orig(timeZone.getClass().getName())
return.mRules.getClass().getName() != orig(timeZone.getClass().getName())
return.mMaxLengthEstimate > size(return.mRules[])
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getLocale():::ENTER
this has only one value
this.mPattern has only one value
this.mPattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 15
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 31
size(this.mRules[]) == 15
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getLocale():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == return
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(this.mLocale)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
this.mPattern has only one value
this.mPattern.toString == "EEE, dd MMM yyyy HH:mm:ss Z"
this.mTimeZone has only one value
this.mRules has only one value
this.mRules[] contains no nulls and has only one value, of length 15
this.mRules[].getClass().getName() == [org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.StringLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TextField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.PaddedNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TwoDigitNumberField, org.apache.commons.lang3.time.FastDateFormat.CharacterLiteral, org.apache.commons.lang3.time.FastDateFormat.TimeZoneNumberRule]
this.mMaxLengthEstimate == 31
return has only one value
size(this.mRules[]) == 15
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] has only one value
this.mRules[org.apache.commons.lang3.time.FastDateFormat.SHORT] has only one value
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getPattern():::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(this.mRules[])-1
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.getPattern():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == return
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules[] == orig(this.mRules[])
this.mMaxLengthEstimate == orig(this.mMaxLengthEstimate)
return == orig(this.mPattern)
this.mRules[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.MEDIUM)-1])
orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.serialVersionUID)-1]) == this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mRules[org.apache.commons.lang3.time.FastDateFormat.FULL] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.LONG)-1])
this.mRules[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == orig(this.mRules[post(org.apache.commons.lang3.time.FastDateFormat.SHORT)-1])
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < size(this.mRules[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == return.toString
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
this.mRules.getClass().getName() == orig(this.mRules.getClass().getName())
return.toString == orig(this.mPattern.toString)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.init():::EXIT
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL % this.mMaxLengthEstimate == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.SHORT < this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parsePattern():::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID] == return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM-1]
return[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == return[org.apache.commons.lang3.time.FastDateFormat.FULL]
return[org.apache.commons.lang3.time.FastDateFormat.FULL] == return[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
return[org.apache.commons.lang3.time.FastDateFormat.MEDIUM] == return[org.apache.commons.lang3.time.FastDateFormat.SHORT-1]
this.mRules == null
return[] elements != null
return.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.FULL < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.SHORT <= size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FormatCache.NONE < size(return[])-1
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::ENTER
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == size(indexRef[])
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
this.mPattern == pattern
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef[] elements >= 0
size(indexRef[]) == 1
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
this.mPattern.toString == pattern.toString
indexRef[] elements >= size(indexRef[])-1
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[]) != indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[])-1 <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.parseToken(java.lang.String, int[]):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.FULL == size(indexRef[])-1
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mPattern == orig(pattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
indexRef[org.apache.commons.lang3.time.FastDateFormat.serialVersionUID-1] == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL] == indexRef[org.apache.commons.lang3.time.FastDateFormat.LONG-1]
this.mRules == null
indexRef[] elements >= 1
indexRef[] elements >= org.apache.commons.lang3.time.FastDateFormat.serialVersionUID
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements > org.apache.commons.lang3.time.FastDateFormat.FULL
org.apache.commons.lang3.time.FastDateFormat.FULL < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
indexRef[] elements > org.apache.commons.lang3.time.FormatCache.NONE
org.apache.commons.lang3.time.FormatCache.NONE < indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == pattern.toString
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
pattern.toString != return.toString
pattern.toString == orig(this.mPattern.toString)
pattern.toString == orig(pattern.toString)
indexRef[] >= orig(indexRef[]) (elementwise)
indexRef[] elements >= orig(size(indexRef[]))
indexRef[] elements == indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
indexRef[] elements >= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(indexRef[]) elements >= size(indexRef[])-1
orig(indexRef[]) elements <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
size(indexRef[])-1 <= orig(indexRef[post(org.apache.commons.lang3.time.FastDateFormat.FULL)])
orig(size(indexRef[])) <= indexRef[org.apache.commons.lang3.time.FastDateFormat.FULL]
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::ENTER
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
this.mRules == null
padding one of { 1, 2, 4 }
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= field
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID <= padding
org.apache.commons.lang3.time.FastDateFormat.FULL % field == 0
org.apache.commons.lang3.time.FastDateFormat.FULL < field
org.apache.commons.lang3.time.FastDateFormat.FULL < padding
org.apache.commons.lang3.time.FastDateFormat.MEDIUM != field
org.apache.commons.lang3.time.FastDateFormat.SHORT != field
org.apache.commons.lang3.time.FastDateFormat.SHORT != padding
org.apache.commons.lang3.time.FormatCache.NONE < field
org.apache.commons.lang3.time.FormatCache.NONE < padding
field != padding
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT655
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == orig(padding)
this.mPattern has only one value
this.mPattern.toString == "yyyyMdH"
this.mTimeZone has only one value
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField.class
orig(this) has only one value
orig(field) one of { 5, 11 }
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT657
org.apache.commons.lang3.time.FastDateFormat.MEDIUM == orig(padding)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField.class
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID < orig(field)
org.apache.commons.lang3.time.FastDateFormat.MEDIUM < orig(field)
org.apache.commons.lang3.time.FastDateFormat.SHORT < orig(field)
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT659
org.apache.commons.lang3.time.FastDateFormat.serialVersionUID == orig(field)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$PaddedNumberField.class
orig(padding) == 4
===========================================================================
org.apache.commons.lang3.time.FastDateFormat.selectNumberRule(int, int):::EXIT
org.apache.commons.lang3.time.FastDateFormat.FULL == this.mMaxLengthEstimate
org.apache.commons.lang3.time.FastDateFormat.cache == orig(org.apache.commons.lang3.time.FastDateFormat.cache)
org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache)
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache)
this.mPattern == orig(this.mPattern)
this.mTimeZone == orig(this.mTimeZone)
this.mLocale == orig(this.mLocale)
this.mRules == orig(this.mRules)
this.mRules == null
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cache.cDateTimeInstanceCache.getClass().getName())
org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName() == orig(org.apache.commons.lang3.time.FastDateFormat.cTimeZoneDisplayCache.getClass().getName())
this.mPattern.toString == orig(this.mPattern.toString)
this.mTimeZone.getClass().getName() != return.getClass().getName()
this.mTimeZone.getClass().getName() == orig(this.mTimeZone.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey:::OBJECT
this.keys.getClass().getName() == java.lang.Object[].class
this.keys[] elements != null
this.keys[].getClass().getName() == [java.lang.String, sun.util.calendar.ZoneInfo, java.util.Locale]
size(this.keys[]) == 3
this.hashCode != size(this.keys[])
this.hashCode != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::ENTER
keys.getClass().getName() == java.lang.Object[].class
keys[] elements != null
size(keys[]) == 3
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.MultipartKey(java.lang.Object[]):::EXIT
this.keys == orig(keys)
this.keys[] == keys[]
keys[] == orig(keys[])
this.hashCode == 0
keys[] elements != null
this.keys.getClass().getName() == orig(keys.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.equals(java.lang.Object):::ENTER
obj.getClass().getName() == org.apache.commons.lang3.time.FormatCache$MultipartKey.class
this.keys.getClass().getName() != obj.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.equals(java.lang.Object):::EXIT181
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.equals(java.lang.Object):::EXIT181;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.equals(java.lang.Object):::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.hashCode == orig(this.hashCode)
return == true
this.keys.getClass().getName() == orig(this.keys.getClass().getName())
this.keys.getClass().getName() != orig(obj.getClass().getName())
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.equals(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.time.FormatCache$MultipartKey.hashCode():::EXIT
this.keys == orig(this.keys)
this.keys[] == orig(this.keys[])
this.hashCode == return
this.keys.getClass().getName() == orig(this.keys.getClass().getName())
orig(this.hashCode) % return == 0
return != size(this.keys[])
return != size(this.keys[])-1
orig(this.hashCode) != size(this.keys[])
orig(this.hashCode) != size(this.keys[])-1
===========================================================================
org.apache.commons.lang3.time.FormatCache:::CLASS
===========================================================================
org.apache.commons.lang3.time.FormatCache:::OBJECT
this has only one value
this.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat$1.class
this.cInstanceCache has only one value
this.cInstanceCache.getClass().getName() == java.util.concurrent.ConcurrentHashMap.class
this.cDateTimeInstanceCache has only one value
this.getClass().getName() != this.cInstanceCache.getClass().getName()
this.cInstanceCache.getClass().getName() == this.cDateTimeInstanceCache.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FormatCache.FormatCache():::EXIT
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::ENTER
timeZone.getClass().getName() == sun.util.calendar.ZoneInfo.class
this.getClass().getName() != timeZone.getClass().getName()
this.cInstanceCache.getClass().getName() != timeZone.getClass().getName()
===========================================================================
org.apache.commons.lang3.time.FormatCache.getInstance(java.lang.String, java.util.TimeZone, java.util.Locale):::EXIT
this.cInstanceCache == orig(this.cInstanceCache)
this.cDateTimeInstanceCache == orig(this.cDateTimeInstanceCache)
return.getClass().getName() == org.apache.commons.lang3.time.FastDateFormat.class
this.cInstanceCache.getClass().getName() != return.getClass().getName()
this.cInstanceCache.getClass().getName() != orig(this.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cInstanceCache.getClass().getName())
this.cInstanceCache.getClass().getName() == orig(this.cDateTimeInstanceCache.getClass().getName())
this.cInstanceCache.getClass().getName() != orig(timeZone.getClass().getName())
pattern.toString == orig(pattern.toString)
return.getClass().getName() != orig(this.getClass().getName())
return.getClass().getName() != orig(timeZone.getClass().getName())
