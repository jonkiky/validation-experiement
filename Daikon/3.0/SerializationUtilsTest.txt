===========================================================================
junit.framework.Assert:::OBJECT
===========================================================================
junit.framework.Assert.Assert():::EXIT
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(byte, byte):::ENTER
expected == actual
===========================================================================
junit.framework.Assert.assertEquals(byte, byte):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(int, int):::ENTER
expected == actual
expected one of { 1, 5, 177 }
===========================================================================
junit.framework.Assert.assertEquals(int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, byte, byte):::ENTER
expected == actual
message == null
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, byte, byte):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::ENTER
expected == actual
message == null
expected one of { 1, 5, 177 }
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, int, int):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected != null
actual != null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT63
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::ENTER
expected.toString one of { "java.io.IOException: Anonymous OutputStream I/O exception", "java.lang.ClassNotFoundException: ClassNotFoundSerialization.readObject fake exception", "java.lang.Exception" }
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String):::EXIT
expected.toString one of { "java.io.IOException: Anonymous OutputStream I/O exception", "java.lang.ClassNotFoundException: ClassNotFoundSerialization.readObject fake exception", "java.lang.Exception" }
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::ENTER
message == null
expected.toString one of { "java.io.IOException: Anonymous OutputStream I/O exception", "java.lang.ClassNotFoundException: ClassNotFoundSerialization.readObject fake exception", "java.lang.Exception" }
expected.toString == actual.toString
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT80
===========================================================================
junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String):::EXIT
expected.toString one of { "java.io.IOException: Anonymous OutputStream I/O exception", "java.lang.ClassNotFoundException: ClassNotFoundSerialization.readObject fake exception", "java.lang.Exception" }
expected.toString == actual.toString
expected.toString == orig(expected.toString)
expected.toString == orig(actual.toString)
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::ENTER
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString == "TestCase.fName cannot be null"
object != null
===========================================================================
junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.Assert.assertNull(java.lang.Object):::ENTER
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::ENTER
message == object
message == null
object == null
===========================================================================
junit.framework.Assert.assertNull(java.lang.String, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT235
===========================================================================
junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
junit.framework.Assert.assertTrue(boolean):::EXIT
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "TestCase.fName cannot be null"
condition == true
===========================================================================
junit.framework.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "TestCase.fName cannot be null"
message.toString == orig(message.toString)
===========================================================================
junit.framework.TestCase:::OBJECT
this.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
this.fName != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::ENTER
name != null
===========================================================================
junit.framework.TestCase.TestCase(java.lang.String):::EXIT
this.fName == orig(name)
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestCase.countTestCases():::ENTER
===========================================================================
junit.framework.TestCase.countTestCases():::EXIT
this.fName == orig(this.fName)
return == 1
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(this.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests - orig(result.fRunTests) - 1 == 0
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) >= size(result.fFailures[])
===========================================================================
junit.framework.TestCase.runBare():::ENTER
===========================================================================
junit.framework.TestCase.runBare():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.runTest():::ENTER
===========================================================================
junit.framework.TestCase.runTest():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.setUp():::ENTER
===========================================================================
junit.framework.TestCase.setUp():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestCase.tearDown():::ENTER
===========================================================================
junit.framework.TestCase.tearDown():::EXIT
this.fName == orig(this.fName)
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestResult$1:::OBJECT
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
this.val$test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fRunTests >= 1
junit.framework.TestResult.this.fStop == false
size(junit.framework.TestResult.this.fListeners[]) == 1
this.val$test.getClass().getName() != junit.framework.TestResult.this.fFailures.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::ENTER
junit.framework.TestResult.this.fFailures[] == junit.framework.TestResult.this.fErrors[]
size(junit.framework.TestResult.this.fFailures[]) == size(junit.framework.TestResult.this.fListeners[])-1
junit.framework.TestResult.this has only one value
junit.framework.TestResult.this.fFailures has only one value
junit.framework.TestResult.this.fFailures[] == []
junit.framework.TestResult.this.fFailures[].getClass().getName() == []
junit.framework.TestResult.this.fFailures.getClass().getName() == java.util.ArrayList.class
junit.framework.TestResult.this.fErrors has only one value
junit.framework.TestResult.this.fListeners has only one value
junit.framework.TestResult.this.fListeners[] contains no nulls and has only one value, of length 1
junit.framework.TestResult.this.fListeners[] elements has only one value
junit.framework.TestResult.this.fListeners[] elements != null
junit.framework.TestResult.this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
junit.framework.TestResult.this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
junit.framework.TestResult.this.fStop == false
$hidden$2.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
size(junit.framework.TestResult.this.fListeners[]) == 1
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fErrors.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() == junit.framework.TestResult.this.fListeners.getClass().getName()
junit.framework.TestResult.this.fFailures.getClass().getName() != $hidden$2.getClass().getName()
size(junit.framework.TestResult.this.fFailures[]) % junit.framework.TestResult.this.fRunTests == 0
junit.framework.TestResult.this.fRunTests >= size(junit.framework.TestResult.this.fListeners[])
===========================================================================
junit.framework.TestResult$1.(junit.framework.TestResult, junit.framework.TestCase):::EXIT
this.val$test == orig($hidden$2)
this.val$test.fName == $hidden$2.fName
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
$hidden$2.fName == orig($hidden$2.fName)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$test.fName.toString == $hidden$2.fName.toString
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
$hidden$2.fName.toString == orig($hidden$2.fName.toString)
===========================================================================
junit.framework.TestResult$1.protect():::ENTER
===========================================================================
junit.framework.TestResult$1.protect():::EXIT
this.val$test == orig(this.val$test)
this.val$test.fName == orig(this.val$test.fName)
junit.framework.TestResult.this == orig(junit.framework.TestResult.this)
junit.framework.TestResult.this.fFailures == orig(junit.framework.TestResult.this.fFailures)
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fFailures[])
junit.framework.TestResult.this.fFailures[] == orig(junit.framework.TestResult.this.fErrors[])
junit.framework.TestResult.this.fErrors == orig(junit.framework.TestResult.this.fErrors)
junit.framework.TestResult.this.fListeners == orig(junit.framework.TestResult.this.fListeners)
junit.framework.TestResult.this.fListeners[] == orig(junit.framework.TestResult.this.fListeners[])
junit.framework.TestResult.this.fRunTests == orig(junit.framework.TestResult.this.fRunTests)
junit.framework.TestResult.this.fStop == orig(junit.framework.TestResult.this.fStop)
size(junit.framework.TestResult.this.fFailures[]) == orig(size(junit.framework.TestResult.this.fListeners[]))-1
this.val$test.getClass().getName() == orig(this.val$test.getClass().getName())
this.val$test.fName.toString == orig(this.val$test.fName.toString)
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fFailures.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fErrors.getClass().getName())
junit.framework.TestResult.this.fFailures.getClass().getName() == orig(junit.framework.TestResult.this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult:::OBJECT
this.fFailures[] == this.fErrors[]
this has only one value
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.ArrayList.class
this.fErrors has only one value
this.fErrors != null
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements has only one value
this.fListeners[] elements != null
this.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
this.fListeners[].getClass().getName() one of { [], [junit.textui.ResultPrinter] }
this.fRunTests >= 0
this.fStop == false
size(this.fListeners[]) one of { 0, 1 }
this.fFailures.getClass().getName() == this.fErrors.getClass().getName()
this.fFailures.getClass().getName() == this.fListeners.getClass().getName()
this.fRunTests >= size(this.fFailures[])
this.fRunTests >= size(this.fListeners[])-1
size(this.fFailures[]) <= size(this.fListeners[])
size(this.fFailures[]) >= size(this.fListeners[])-1
size(this.fFailures[])-1 <= size(this.fListeners[])-1
===========================================================================
junit.framework.TestResult.TestResult():::EXIT
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::ENTER
this.fFailures[] == this.fListeners[]
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])
listener has only one value
listener.getClass().getName() == junit.textui.ResultPrinter.class
===========================================================================
junit.framework.TestResult.addListener(junit.framework.TestListener):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fFailures[] == orig(this.fListeners[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fRunTests == orig(this.fRunTests)
this.fRunTests == size(this.fFailures[])
this.fRunTests == size(this.fErrors[])
this.fRunTests == size(this.fListeners[])-1
this.fRunTests == orig(size(this.fFailures[]))
this.fRunTests == orig(size(this.fErrors[]))
this.fRunTests == orig(size(this.fListeners[]))
this.fStop == orig(this.fStop)
orig(listener) == this.fListeners[this.fRunTests]
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners[] elements == this.fListeners[this.fRunTests]
orig(listener.getClass().getName()) in this.fListeners[].getClass().getName()
===========================================================================
junit.framework.TestResult.cloneListeners():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.cloneListeners():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == return[]
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return[] == orig(this.fListeners[])
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == size(return[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
return != null
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[] elements != null
return[].getClass().getName() == [junit.textui.ResultPrinter]
return[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fFailures.getClass().getName() == return.getClass().getName()
this.fErrors.getClass().getName() == return.getClass().getName()
this.fListeners.getClass().getName() == return.getClass().getName()
this.fRunTests >= size(return[])
return.getClass().getName() == orig(this.fFailures.getClass().getName())
return.getClass().getName() == orig(this.fErrors.getClass().getName())
return.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.endTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.errorCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errorCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.errors():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.errors():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.failureCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failureCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
return == size(this.fFailures[])
return == size(this.fErrors[])
return == size(this.fListeners[])-1
return == orig(size(this.fFailures[]))
return == orig(size(this.fErrors[]))
return == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners[] elements == this.fListeners[return]
===========================================================================
junit.framework.TestResult.failures():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.failures():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
return has only one value
return.getClass().getName() == java.util.Collections$3.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.run(junit.framework.TestCase):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
test.fName == orig(test.fName)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test.fName != null
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
test.fName.toString == orig(test.fName.toString)
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.runCount():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.runCount():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == return
this.fStop == orig(this.fStop)
return == orig(this.fRunTests)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == 23
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
p != null
p.getClass().getName() == junit.framework.TestResult$1.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
this.fFailures.getClass().getName() != p.getClass().getName()
this.fRunTests >= size(this.fListeners[])
test.getClass().getName() != p.getClass().getName()
===========================================================================
junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fFailures.getClass().getName() != orig(p.getClass().getName())
this.fRunTests >= size(this.fListeners[])
===========================================================================
junit.framework.TestResult.shouldStop():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == return
return == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return == false
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.shouldStop():::EXIT;condition="not(return == true)"
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
test != null
test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() != test.getClass().getName()
===========================================================================
junit.framework.TestResult.startTest(junit.framework.Test):::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fFailures.getClass().getName() != orig(test.getClass().getName())
this.fRunTests - orig(this.fRunTests) - 1 == 0
this.fRunTests >= size(this.fListeners[])
orig(this.fRunTests) >= size(this.fFailures[])
===========================================================================
junit.framework.TestResult.wasSuccessful():::ENTER
size(this.fFailures[]) == size(this.fListeners[])-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
size(this.fListeners[]) == 1
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fFailures[] == orig(this.fErrors[])
this.fErrors == orig(this.fErrors)
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fRunTests == orig(this.fRunTests)
this.fStop == orig(this.fStop)
size(this.fFailures[]) == size(this.fListeners[])-1
size(this.fFailures[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
this.fRunTests == 23
return == true
size(this.fListeners[]) == 1
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fErrors.getClass().getName())
this.fFailures.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
junit.framework.TestResult.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
junit.framework.TestSuite:::OBJECT
this.fName.toString == "org.apache.commons.lang3.SerializationUtilsTest"
this.fTests != null
this.fTests[] elements != null
===========================================================================
junit.framework.TestSuite.TestSuite():::EXIT
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::ENTER
theClass has only one value
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT151
===========================================================================
junit.framework.TestSuite.TestSuite(java.lang.Class):::EXIT
this.fName has only one value
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 23
this.fTests[].getClass().getName() == [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest]
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
size(this.fTests[]) == 23
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::ENTER
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
test != null
===========================================================================
junit.framework.TestSuite.addTest(junit.framework.Test):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::ENTER
size(this.fTests[]) == size(names[])
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
m != null
names has only one value
names != null
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
names.getClass().getName() == java.util.ArrayList.class
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT280
this.fTests[] == orig(this.fTests[])
names[] == orig(names[])
size(this.fTests[]) == orig(size(names[]))
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
names[].getClass().getName() one of { [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
size(this.fTests[]) one of { 19, 23 }
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT284
size(names[])-1 == orig(size(this.fTests[]))
size(names[])-1 == orig(size(names[]))
===========================================================================
junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
names[] elements != null
names[].getClass().getName() elements == java.lang.String.class
this.fName.toString == orig(this.fName.toString)
size(this.fTests[]) >= orig(size(names[]))
size(names[])-1 <= orig(size(names[]))
size(names[])-1 >= orig(size(names[]))-1
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::ENTER
this has only one value
this.fName == null
this.fTests has only one value
this.fTests[] == []
this.fTests[].getClass().getName() == []
testClass has only one value
===========================================================================
junit.framework.TestSuite.addTestSuite(java.lang.Class):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
size(this.fTests[])-1 == orig(size(this.fTests[]))
this.fName == null
this.fTests has only one value
this.fTests[] contains no nulls and has only one value, of length 1
this.fTests[] elements has only one value
this.fTests[].getClass().getName() == [junit.framework.TestSuite]
this.fTests[].getClass().getName() elements == junit.framework.TestSuite.class
size(this.fTests[]) == 1
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::ENTER
theClass has only one value
theClass != null
name != null
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT74
===========================================================================
junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
name.toString == orig(name.toString)
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::ENTER
theClass has only one value
theClass != null
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT83
===========================================================================
junit.framework.TestSuite.getTestConstructor(java.lang.Class):::EXIT
return != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 19, 23 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
return == false
size(this.fTests[]) one of { 19, 23 }
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::ENTER
this has only one value
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
m != null
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
(return == false)  ==>  (size(this.fTests[]) one of { 19, 23 })
(return == false)  ==>  (this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] })
this.fName has only one value
this.fName != null
this.fTests has only one value
this.fTests[].getClass().getName() elements == org.apache.commons.lang3.SerializationUtilsTest.class
this.fName.toString == orig(this.fName.toString)
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
this.fTests[].getClass().getName() one of { [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
return == false
size(this.fTests[]) one of { 19, 23 }
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::ENTER
result.fFailures[] == result.fErrors[]
result.fRunTests == size(result.fFailures[])
result.fRunTests == size(result.fErrors[])
result.fRunTests == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fListeners[] elements == result.fListeners[result.fRunTests]
===========================================================================
junit.framework.TestSuite.run(junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(result.fRunTests) == size(result.fFailures[])
orig(result.fRunTests) == size(result.fErrors[])
orig(result.fRunTests) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fRunTests == 23
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fListeners[] elements == result.fListeners[orig(result.fRunTests)]
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::ENTER
test == this.fTests[result.fRunTests]
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
test != null
result has only one value
result != null
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
test in this.fTests[]
test.getClass().getName() in this.fTests[].getClass().getName()
test.getClass().getName() != result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fRunTests <= size(this.fTests[])-1
result.fRunTests >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
===========================================================================
junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult):::EXIT
this.fName == orig(this.fName)
this.fTests == orig(this.fTests)
this.fTests[] == orig(this.fTests[])
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
orig(test) == this.fTests[orig(result.fRunTests)]
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fTests[].getClass().getName() one of { [junit.framework.TestSuite], [org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest, org.apache.commons.lang3.SerializationUtilsTest] }
result.fFailures has only one value
result.fFailures != null
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fErrors != null
result.fListeners has only one value
result.fListeners != null
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[] elements != null
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(this.fTests[]) one of { 1, 23 }
size(result.fListeners[]) == 1
this.fName.toString == orig(this.fName.toString)
orig(test) in this.fTests[]
orig(test.getClass().getName()) in this.fTests[].getClass().getName()
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() != orig(test.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
result.fRunTests > orig(result.fRunTests)
result.fRunTests >= size(result.fListeners[])
orig(result.fRunTests) <= size(this.fTests[])-1
orig(result.fRunTests) >= size(result.fFailures[])
size(this.fTests[]) >= size(result.fListeners[])
size(this.fTests[])-1 >= size(result.fFailures[])
size(this.fTests[])-1 != size(result.fListeners[])
result.fRunTests - orig(result.fRunTests) + size(this.fTests[]) - 24 == 0
result.fRunTests - orig(result.fRunTests) + size(this.fTests[])-1 - 23 == 0
===========================================================================
junit.runner.BaseTestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.runner.BaseTestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.getClass().getName() == junit.textui.TestRunner.class
===========================================================================
junit.runner.BaseTestRunner.BaseTestRunner():::EXIT
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::ENTER
key has only one value
key.toString == "maxmessage"
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String):::EXIT
key.toString == "maxmessage"
return == null
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::ENTER
key has only one value
key.toString == "maxmessage"
dflt == 500
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT248
===========================================================================
junit.runner.BaseTestRunner.getPreference(java.lang.String, int):::EXIT
key.toString == "maxmessage"
return == 500
===========================================================================
junit.runner.BaseTestRunner.getPreferences():::EXIT
return has only one value
===========================================================================
junit.runner.BaseTestRunner.getPreferencesFile():::EXIT
return has only one value
===========================================================================
junit.textui.ResultPrinter:::OBJECT
this has only one value
this.fWriter has only one value
this.fColumn >= 0
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
this.fColumn == 0
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::ENTER
this.fColumn == 23
runTime == 396
===========================================================================
junit.textui.ResultPrinter.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 23
return has only one value
return.toString == "0.396"
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.endTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
===========================================================================
junit.textui.ResultPrinter.getWriter():::ENTER
===========================================================================
junit.textui.ResultPrinter.getWriter():::EXIT
this.fWriter == return
this.fColumn == orig(this.fColumn)
return == orig(this.fWriter)
return has only one value
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
runTime == 396
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.print(junit.framework.TestResult, long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::ENTER
this.fColumn == 23
booBoos.getClass().getName() == java.util.Collections$3.class
count == 0
type.toString one of { "error", "failure" }
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT55
===========================================================================
junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 23
type.toString one of { "error", "failure" }
type.toString == orig(type.toString)
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printErrors(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFailures(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::ENTER
this.fColumn == result.fRunTests
result.fFailures[] == result.fErrors[]
size(result.fFailures[]) == size(result.fListeners[])-1
this.fColumn == 23
result has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fListeners[] elements == this
this in result.fListeners[]
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
===========================================================================
junit.textui.ResultPrinter.printFooter(junit.framework.TestResult):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == result.fRunTests
this.fColumn == orig(this.fColumn)
this.fColumn == orig(result.fRunTests)
result.fFailures == orig(result.fFailures)
result.fFailures[] == result.fErrors[]
result.fFailures[] == orig(result.fFailures[])
result.fFailures[] == orig(result.fErrors[])
result.fErrors == orig(result.fErrors)
result.fListeners == orig(result.fListeners)
result.fListeners[] == orig(result.fListeners[])
result.fStop == orig(result.fStop)
size(result.fFailures[]) == size(result.fListeners[])-1
size(result.fFailures[]) == orig(size(result.fListeners[]))-1
this.fColumn == 23
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.ArrayList.class
result.fErrors has only one value
result.fListeners has only one value
result.fListeners[] contains no nulls and has only one value, of length 1
result.fListeners[] elements has only one value
result.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
result.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
result.fStop == false
size(result.fListeners[]) == 1
result.fFailures.getClass().getName() == result.fErrors.getClass().getName()
result.fFailures.getClass().getName() == result.fListeners.getClass().getName()
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fErrors.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fListeners.getClass().getName())
orig(this) in result.fListeners[]
result.fListeners[] elements == orig(this)
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::ENTER
this.fColumn == 23
runTime == 396
===========================================================================
junit.textui.ResultPrinter.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn == orig(this.fColumn)
this.fColumn == 23
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::ENTER
test.getClass().getName() == org.apache.commons.lang3.SerializationUtilsTest.class
===========================================================================
junit.textui.ResultPrinter.startTest(junit.framework.Test):::EXIT
this.fWriter == orig(this.fWriter)
this.fColumn - orig(this.fColumn) - 1 == 0
===========================================================================
junit.textui.TestRunner:::CLASS
junit.runner.BaseTestRunner.SUITE_METHODNAME has only one value
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == "suite"
junit.runner.BaseTestRunner.fPreferences has only one value
junit.runner.BaseTestRunner.fgMaxMessageLength == 500
junit.runner.BaseTestRunner.fgFilterStack == true
===========================================================================
junit.textui.TestRunner:::OBJECT
junit.runner.BaseTestRunner.fgFilterStack == this.fLoading
this has only one value
this.fPrinter has only one value
this.fPrinter.fWriter has only one value
this.fPrinter.fColumn one of { 0, 23 }
this.fPrinter.fColumn >= junit.textui.TestRunner.SUCCESS_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.FAILURE_EXIT
this.fPrinter.fColumn != junit.textui.TestRunner.EXCEPTION_EXIT
this.fPrinter.fColumn < junit.runner.BaseTestRunner.fgMaxMessageLength
===========================================================================
junit.textui.TestRunner.TestRunner():::EXIT
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
junit.textui.TestRunner.TestRunner(java.io.PrintStream):::EXIT
this.fPrinter.fWriter == orig(writer)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::ENTER
printer has only one value
printer.fWriter has only one value
printer.fColumn == 0
===========================================================================
junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter):::EXIT
this.fPrinter == orig(printer)
this.fPrinter.fWriter == printer.fWriter
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == printer.fColumn
junit.textui.TestRunner.SUCCESS_EXIT == orig(printer.fColumn)
printer.fWriter == orig(printer.fWriter)
printer.fWriter has only one value
===========================================================================
junit.textui.TestRunner.createTestResult():::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
===========================================================================
junit.textui.TestRunner.createTestResult():::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
junit.textui.TestRunner.SUCCESS_EXIT == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fFailures[] == return.fListeners[]
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fStop == false
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 23
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::ENTER
this.fPrinter.fColumn == junit.textui.TestRunner.SUCCESS_EXIT
suite has only one value
suite.getClass().getName() == junit.framework.TestSuite.class
wait == false
===========================================================================
junit.textui.TestRunner.doRun(junit.framework.Test, boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == return.fRunTests
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
return.fFailures[] == return.fErrors[]
return.fStop == orig(wait)
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 23
return.fStop == false
size(return.fListeners[]) == 1
return.fListeners[] elements == this.fPrinter
this.fPrinter in return.fListeners[]
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
junit.textui.TestRunner.pause(boolean):::ENTER
this.fPrinter.fColumn == 23
wait == false
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT126
===========================================================================
junit.textui.TestRunner.pause(boolean):::EXIT
this.fPrinter == orig(this.fPrinter)
this.fPrinter.fWriter == orig(this.fPrinter.fWriter)
this.fPrinter.fColumn == orig(this.fPrinter.fColumn)
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
junit.runner.BaseTestRunner.fgFilterStack == orig(this.fLoading)
this.fPrinter.fColumn == 23
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::ENTER
test has only one value
test.getClass().getName() == junit.framework.TestSuite.class
===========================================================================
junit.textui.TestRunner.run(junit.framework.Test):::EXIT
junit.textui.TestRunner.SUCCESS_EXIT == size(return.fFailures[])
junit.textui.TestRunner.FAILURE_EXIT == size(return.fListeners[])
junit.runner.BaseTestRunner.SUITE_METHODNAME == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME)
junit.runner.BaseTestRunner.fPreferences == orig(junit.runner.BaseTestRunner.fPreferences)
junit.runner.BaseTestRunner.fgMaxMessageLength == orig(junit.runner.BaseTestRunner.fgMaxMessageLength)
junit.runner.BaseTestRunner.fgFilterStack == orig(junit.runner.BaseTestRunner.fgFilterStack)
return.fFailures[] == return.fErrors[]
size(return.fFailures[]) == size(return.fListeners[])-1
return has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.ArrayList.class
return.fErrors has only one value
return.fListeners has only one value
return.fListeners[] contains no nulls and has only one value, of length 1
return.fListeners[] elements has only one value
return.fListeners[].getClass().getName() == [junit.textui.ResultPrinter]
return.fListeners[].getClass().getName() elements == junit.textui.ResultPrinter.class
return.fRunTests == 23
return.fStop == false
size(return.fListeners[]) == 1
junit.runner.BaseTestRunner.SUITE_METHODNAME.toString == orig(junit.runner.BaseTestRunner.SUITE_METHODNAME.toString)
return.fFailures.getClass().getName() == return.fErrors.getClass().getName()
return.fFailures.getClass().getName() == return.fListeners.getClass().getName()
return.fListeners[] elements == return.fListeners[junit.textui.TestRunner.SUCCESS_EXIT]
===========================================================================
org.apache.commons.lang3.ClassNotFoundSerialization:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.ClassNotFoundSerialization.ClassNotFoundSerialization():::EXIT
===========================================================================
org.apache.commons.lang3.SerializationException:::CLASS
===========================================================================
org.apache.commons.lang3.SerializationException:::OBJECT
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException():::EXIT
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException(java.lang.String):::ENTER
msg has only one value
msg.toString == "Message"
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException(java.lang.String):::EXIT
msg.toString == "Message"
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException(java.lang.String, java.lang.Throwable):::ENTER
msg has only one value
msg.toString == "Message"
cause has only one value
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException(java.lang.String, java.lang.Throwable):::EXIT
msg.toString == "Message"
msg.toString == orig(msg.toString)
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException(java.lang.Throwable):::ENTER
===========================================================================
org.apache.commons.lang3.SerializationException.SerializationException(java.lang.Throwable):::EXIT
===========================================================================
org.apache.commons.lang3.SerializationUtils:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.SerializationUtils.SerializationUtils():::EXIT
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::ENTER
object.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::EXIT
return.getClass().getName() == java.util.HashMap.class
return.getClass().getName() == orig(object.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(byte[]):::ENTER
objectData[] one of { [-84, -19, 0, 5, 112], [-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 2, 116, 0, 3, 66, 65, 82, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 7, 116, 0, 3, 70, 79, 79, 116, 0, 3, 102, 111, 111, 120] }
size(objectData[]) one of { 5, 177 }
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(byte[]):::EXIT
objectData[] == orig(objectData[])
objectData[] one of { [-84, -19, 0, 5, 112], [-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 2, 116, 0, 3, 66, 65, 82, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 7, 116, 0, 3, 70, 79, 79, 116, 0, 3, 102, 111, 111, 120] }
return.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(java.io.InputStream):::ENTER
inputStream.getClass().getName() == java.io.ByteArrayInputStream.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.deserialize(java.io.InputStream):::EXIT
return.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::ENTER
obj.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::EXIT
return[] one of { [-84, -19, 0, 5, 112], [-84, -19, 0, 5, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 77, 97, 112, 5, 7, -38, -63, -61, 22, 96, -47, 3, 0, 2, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 73, 0, 9, 116, 104, 114, 101, 115, 104, 111, 108, 100, 120, 112, 63, 64, 0, 0, 0, 0, 0, 12, 119, 8, 0, 0, 0, 16, 0, 0, 0, 2, 116, 0, 3, 66, 65, 82, 115, 114, 0, 17, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 18, -30, -96, -92, -9, -127, -121, 56, 2, 0, 1, 73, 0, 5, 118, 97, 108, 117, 101, 120, 114, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 78, 117, 109, 98, 101, 114, -122, -84, -107, 29, 11, -108, -32, -117, 2, 0, 0, 120, 112, 0, 0, 0, 7, 116, 0, 3, 70, 79, 79, 116, 0, 3, 102, 111, 111, 120] }
size(return[]) one of { 5, 177 }
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::ENTER
obj.getClass().getName() == java.util.HashMap.class
outputStream.getClass().getName() == java.io.ByteArrayOutputStream.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::EXIT
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest$1:::OBJECT
this has only one value
org.apache.commons.lang3.SerializationUtilsTest.this has only one value
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE has only one value
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == "ClassNotFoundSerialization.readObject fake exception"
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE has only one value
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == "Anonymous OutputStream I/O exception"
org.apache.commons.lang3.SerializationUtilsTest.this.iString has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.iString.toString == "foo"
org.apache.commons.lang3.SerializationUtilsTest.this.iInteger has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.iMap has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.fName has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.fName.toString == "testSerializeIOException"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest$1.(org.apache.commons.lang3.SerializationUtilsTest):::ENTER
org.apache.commons.lang3.SerializationUtilsTest.this has only one value
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE has only one value
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == "ClassNotFoundSerialization.readObject fake exception"
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE has only one value
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == "Anonymous OutputStream I/O exception"
org.apache.commons.lang3.SerializationUtilsTest.this.iString has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.iString.toString == "foo"
org.apache.commons.lang3.SerializationUtilsTest.this.iInteger has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.iMap has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.fName has only one value
org.apache.commons.lang3.SerializationUtilsTest.this.fName.toString == "testSerializeIOException"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest$1.(org.apache.commons.lang3.SerializationUtilsTest):::EXIT
org.apache.commons.lang3.SerializationUtilsTest.this == orig(org.apache.commons.lang3.SerializationUtilsTest.this)
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.this.iString == orig(org.apache.commons.lang3.SerializationUtilsTest.this.iString)
org.apache.commons.lang3.SerializationUtilsTest.this.iInteger == orig(org.apache.commons.lang3.SerializationUtilsTest.this.iInteger)
org.apache.commons.lang3.SerializationUtilsTest.this.iMap == orig(org.apache.commons.lang3.SerializationUtilsTest.this.iMap)
org.apache.commons.lang3.SerializationUtilsTest.this.fName == orig(org.apache.commons.lang3.SerializationUtilsTest.this.fName)
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.this.iString.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.this.iString.toString)
org.apache.commons.lang3.SerializationUtilsTest.this.fName.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest:::CLASS
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE has only one value
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE != null
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == "ClassNotFoundSerialization.readObject fake exception"
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE has only one value
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE != null
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == "Anonymous OutputStream I/O exception"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString > org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest:::OBJECT
this.iString.toString == "foo"
this.fName != null
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString < this.iString.toString
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString < this.fName.toString
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString < this.iString.toString
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString < this.fName.toString
this.iString.toString < this.fName.toString
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.SerializationUtilsTest(java.lang.String):::ENTER
name != null
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.SerializationUtilsTest(java.lang.String):::EXIT
this.fName == orig(name)
this.iString == null
this.iInteger == null
this.iMap == null
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString < name.toString
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString < name.toString
this.fName.toString == name.toString
name.toString == orig(name.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.setUp():::ENTER
this.iString == null
this.iInteger == null
this.iMap == null
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.setUp():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.fName == orig(this.fName)
this.iString has only one value
this.iString != null
this.iInteger != null
this.iMap != null
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testClone():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testClone"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testClone():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testClone"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testCloneNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testCloneNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testCloneNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testCloneNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testCloneUnserializable():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testCloneUnserializable"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testCloneUnserializable():::EXIT363
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testCloneUnserializable():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testCloneUnserializable"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testConstructor():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testConstructor():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testConstructor"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytes():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytes"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytes():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytes"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytesBadStream"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream():::EXIT333
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytesBadStream"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytesNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesNull():::EXIT324
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytesNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesOfNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytesOfNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesOfNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeBytesOfNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStream():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStream"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStream():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStream"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamBadStream():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamBadStream"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamBadStream():::EXIT223
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamBadStream():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamBadStream"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamClassNotFound():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamClassNotFound"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamClassNotFound():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamClassNotFound"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamNull():::EXIT214
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamOfNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamOfNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamOfNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testDeserializeStreamOfNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testException():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testException"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testException():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testException"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytes():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeBytes"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytes():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeBytes"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeBytesNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeBytesNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesUnserializable():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeBytesUnserializable"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesUnserializable():::EXIT267
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesUnserializable():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeBytesUnserializable"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeIOException():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeIOException"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeIOException():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeIOException"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStream():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStream"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStream():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStream"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamNullNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull():::EXIT154
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamNullNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullObj():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamNullObj"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullObj():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamNullObj"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamObjNull"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull():::EXIT145
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamObjNull"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamUnserializable():::ENTER
this has only one value
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamUnserializable"
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamUnserializable():::EXIT118
===========================================================================
org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamUnserializable():::EXIT
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE)
this.iString == orig(this.iString)
this.iInteger == orig(this.iInteger)
this.iMap == orig(this.iMap)
this.fName == orig(this.fName)
this.iString has only one value
this.iInteger has only one value
this.iMap has only one value
this.fName has only one value
this.fName.toString == "testSerializeStreamUnserializable"
org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE.toString)
org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString == orig(org.apache.commons.lang3.SerializationUtilsTest.SERIALIZE_IO_EXCEPTION_MESSAGE.toString)
this.iString.toString == orig(this.iString.toString)
this.fName.toString == orig(this.fName.toString)
===========================================================================
org.apache.commons.lang3.daikon.SerializationUtilsTest.main(java.lang.String[]):::ENTER
arg has only one value
arg.getClass().getName() == java.lang.String[].class
arg[] == []
arg[].toString == []
===========================================================================
org.apache.commons.lang3.daikon.SerializationUtilsTest.main(java.lang.String[]):::EXIT
arg[] == orig(arg[])
arg[] == []
arg[].toString == []
